{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Introducing a complete toolchain","mdn_url":"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web\"><strong>Complete beginners start here!</strong></a></li><li><details><summary>Getting started with the web</summary><ol><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web\">Getting started with the web</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/Installing_basic_software\">Installing basic software</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like\">What will your website look like?</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/Dealing_with_files\">Dealing with files</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML basics</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS basics</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/Publishing_your_website\">Publishing your website</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works\">How the web works</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/HTML\"><strong>HTML — Structuring the web</strong></a></li><li><details><summary>Introduction to HTML</summary><ol><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML\">Introduction to HTML</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">Getting started with HTML</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">What's in the head? Metadata in HTML</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals\">HTML text fundamentals</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">Creating hyperlinks</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting\">Advanced text formatting</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure\">Document and website structure</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML\">Debugging HTML</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter\">Marking up a letter</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content\">Structuring a page of content</a></li></ol></details></li><li><details><summary>Multimedia and embedding</summary><ol><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding\">Multimedia and embedding</a></li><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML\">Images in HTML</a></li><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\">Video and audio content</a></li><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\">From object to iframe — other embedding technologies</a></li><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web\">Adding vector graphics to the web</a></li><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">Responsive images</a></li><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page\">Mozilla splash page</a></li></ol></details></li><li><details><summary>HTML tables</summary><ol><li><a href=\"/en-US/docs/Learn/HTML/Tables\">HTML tables</a></li><li><a href=\"/en-US/docs/Learn/HTML/Tables/Basics\">HTML table basics</a></li><li><a href=\"/en-US/docs/Learn/HTML/Tables/Advanced\">HTML table advanced features and accessibility</a></li><li><a href=\"/en-US/docs/Learn/HTML/Tables/Structuring_planet_data\">Structuring planet data</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/CSS\"><strong>CSS — Styling the web</strong></a></li><li><details><summary>CSS first steps</summary><ol><li><a href=\"/en-US/docs/Learn/CSS/First_steps\">CSS first steps overview</a></li><li><a href=\"/en-US/docs/Learn/CSS/First_steps/What_is_CSS\">What is CSS?</a></li><li><a href=\"/en-US/docs/Learn/CSS/First_steps/Getting_started\">Getting started with CSS</a></li><li><a href=\"/en-US/docs/Learn/CSS/First_steps/How_CSS_is_structured\">How CSS is structured</a></li><li><a href=\"/en-US/docs/Learn/CSS/First_steps/How_CSS_works\">How CSS works</a></li><li><a href=\"/en-US/docs/Learn/CSS/First_steps/Styling_a_biography_page\">Styling a biography page</a></li></ol></details></li><li><details><summary>CSS building blocks</summary><ol><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks\">CSS building blocks</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Selectors/Type_Class_and_ID_Selectors\">Type, class, and ID selectors</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Selectors/Attribute_selectors\">Attribute selectors</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements\">Pseudo-classes and pseudo-elements</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Selectors/Combinators\">Combinators</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and inheritance</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Cascade_layers\">Cascade layers</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/The_box_model\">The box model</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders\">Backgrounds and borders</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Handling_different_text_directions\">Handling different text directions</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Overflowing_content\">Overflowing content</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Values_and_units\">CSS values and units</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">Sizing items in CSS</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Images_media_form_elements\">Images, media, and form elements</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Styling_tables\">Styling tables</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Debugging_CSS\">Debugging CSS</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Organizing\">Organizing your CSS</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Fundamental_CSS_comprehension\">Fundamental CSS comprehension</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Creating_fancy_letterheaded_paper\">Creating fancy letterheaded paper</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/A_cool_looking_box\">A cool-looking box</a></li></ol></details></li><li><details><summary>Styling text</summary><ol><li><a href=\"/en-US/docs/Learn/CSS/Styling_text\">CSS styling text</a></li><li><a href=\"/en-US/docs/Learn/CSS/Styling_text/Fundamentals\">Fundamental text and font styling</a></li><li><a href=\"/en-US/docs/Learn/CSS/Styling_text/Styling_lists\">Styling lists</a></li><li><a href=\"/en-US/docs/Learn/CSS/Styling_text/Styling_links\">Styling links</a></li><li><a href=\"/en-US/docs/Learn/CSS/Styling_text/Web_fonts\">Web fonts</a></li><li><a href=\"/en-US/docs/Learn/CSS/Styling_text/Typesetting_a_homepage\">Typesetting a community school homepage</a></li></ol></details></li><li><details><summary>CSS layout</summary><ol><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout\">CSS layout</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Introduction\">Introduction to CSS layout</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow\">Normal Flow</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Flexbox\">Flexbox</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Grids\">Grids</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Floats\">Floats</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Positioning\">Positioning</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\">Multiple-column layout</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Responsive_Design\">Responsive design</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Media_queries\">Beginner's guide to media queries</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\">Legacy layout methods</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\">Supporting older browsers</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension\">Fundamental layout comprehension</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/JavaScript\"><strong>JavaScript — Dynamic client-side scripting</strong></a></li><li><details><summary>JavaScript first steps</summary><ol><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps\">JavaScript First Steps</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript\">What is JavaScript?</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/A_first_splash\">A first splash into JavaScript</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/What_went_wrong\">What went wrong? Troubleshooting JavaScript</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/Variables\">Storing the information you need — Variables</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/Math\">Basic math in JavaScript — numbers and operators</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/Strings\">Handling text — strings in JavaScript</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods\">Useful string methods</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/Arrays\">Arrays</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/Silly_story_generator\">Silly story generator</a></li></ol></details></li><li><details><summary>JavaScript building blocks</summary><ol><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/conditionals\">Making decisions in your code — conditionals</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code\">Looping code</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Functions\">Functions — reusable blocks of code</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">Build your own function</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Return_values\">Function return values</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Events\">Introduction to events</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Image_gallery\">Image gallery</a></li></ol></details></li><li><details><summary>Introducing JavaScript objects</summary><ol><li><a href=\"/en-US/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/Basics\">JavaScript object basics</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\">Object prototypes</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/Object-oriented_programming\">Object-oriented programming</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Classes in JavaScript</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/JSON\">Working with JSON</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/Object_building_practice\">Object building practice</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features\">Adding features to our bouncing balls demo</a></li></ol></details></li><li><details><summary>Asynchronous JavaScript</summary><ol><li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous\">Asynchronous JavaScript</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous/Introducing\">Introducing asynchronous JavaScript</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous/Promises\">How to use promises</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous/Implementing_a_promise-based_API\">How to implement a promise-based API</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous/Introducing_workers\">Introducing workers</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous/Sequencing_animations\">Sequencing animations</a></li></ol></details></li><li><details><summary>Client-side web APIs</summary><ol><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">Introduction to web APIs</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">Manipulating documents</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">Fetching data from the server</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\">Third-party APIs</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics\">Drawing graphics</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs\">Video and Audio APIs</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\">Client-side storage</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/Forms\"><strong>Web forms — Working with user data</strong></a></li><li><details><summary>Core forms learning pathway</summary><ol><li><a href=\"/en-US/docs/Learn/Forms\">Web forms — Working with user data</a></li><li><a href=\"/en-US/docs/Learn/Forms/Your_first_form\">Your first form</a></li><li><a href=\"/en-US/docs/Learn/Forms/How_to_structure_a_web_form\">How to structure a web form</a></li><li><a href=\"/en-US/docs/Learn/Forms/Basic_native_form_controls\">Basic native form controls</a></li><li><a href=\"/en-US/docs/Learn/Forms/HTML5_input_types\">The HTML5 input types</a></li><li><a href=\"/en-US/docs/Learn/Forms/Other_form_controls\">Other form controls</a></li><li><a href=\"/en-US/docs/Learn/Forms/Styling_web_forms\">Styling web forms</a></li><li><a href=\"/en-US/docs/Learn/Forms/Advanced_form_styling\">Advanced form styling</a></li><li><a href=\"/en-US/docs/Learn/Forms/UI_pseudo-classes\">UI pseudo-classes</a></li><li><a href=\"/en-US/docs/Learn/Forms/Form_validation\">Client-side form validation</a></li><li><a href=\"/en-US/docs/Learn/Forms/Sending_and_retrieving_form_data\">Sending form data</a></li></ol></details></li><li><details><summary>Advanced forms articles</summary><ol><li><a href=\"/en-US/docs/Learn/Forms/How_to_build_custom_form_controls\">How to build custom form controls</a></li><li><a href=\"/en-US/docs/Learn/Forms/Sending_forms_through_JavaScript\">Sending forms through JavaScript</a></li><li><a href=\"/en-US/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">CSS property compatibility table for form controls</a></li><li><a href=\"/en-US/docs/Learn/Forms/HTML_forms_in_legacy_browsers\">HTML forms in legacy browsers</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/Accessibility\"><strong>Accessibility — Make the web usable by everyone</strong></a></li><li><details><summary>Accessibility guides</summary><ol><li><a href=\"/en-US/docs/Learn/Accessibility\">Accessibility</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/What_is_accessibility\">What is accessibility?</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/HTML\">HTML: A good basis for accessibility</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/CSS_and_JavaScript\">CSS and JavaScript accessibility best practices</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/WAI-ARIA_basics\">WAI-ARIA basics</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/Multimedia\">Accessible multimedia</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/Mobile\">Mobile accessibility</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/Accessibility_troubleshooting\">Assessment: Accessibility troubleshooting</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/Performance\"><strong>Performance — Making websites fast and responsive</strong></a></li><li><details><summary>Performance guides</summary><ol><li><a href=\"/en-US/docs/Learn/Performance\">Web performance</a></li><li><a href=\"/en-US/docs/Learn/Performance/why_web_performance\">The \"why\" of web performance</a></li><li><a href=\"/en-US/docs/Learn/Performance/What_is_web_performance\">What is web performance?</a></li><li><a href=\"/en-US/docs/Learn/Performance/Perceived_performance\">Perceived performance</a></li><li><a href=\"/en-US/docs/Learn/Performance/Measuring_performance\">Measuring performance</a></li><li><a href=\"/en-US/docs/Learn/Performance/Multimedia\">Multimedia: Images</a></li><li><a href=\"/en-US/docs/Learn/Performance/video\">Multimedia: video</a></li><li><a href=\"/en-US/docs/Learn/Performance/JavaScript\">JavaScript performance optimization</a></li><li><a href=\"/en-US/docs/Learn/Performance/HTML\">HTML performance optimization</a></li><li><a href=\"/en-US/docs/Learn/Performance/CSS\">CSS performance optimization</a></li><li><a href=\"/en-US/docs/Learn/Performance/business_case_for_performance\">The business case for web performance</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/MathML\"><strong>MathML — Writing mathematics with MathML</strong></a></li><li><details><summary>MathML first steps</summary><ol><li><a href=\"/en-US/docs/Learn/MathML/First_steps\">MathML first steps overview</a></li><li><a href=\"/en-US/docs/Learn/MathML/First_steps/Getting_started\">Getting started with MathML</a></li><li><a href=\"/en-US/docs/Learn/MathML/First_steps/Text_containers\">MathML Text Containers</a></li><li><a href=\"/en-US/docs/Learn/MathML/First_steps/Fractions_and_roots\">MathML fractions and roots</a></li><li><a href=\"/en-US/docs/Learn/MathML/First_steps/Scripts\">MathML scripted elements</a></li><li><a href=\"/en-US/docs/Learn/MathML/First_steps/Tables\">MathML tables</a></li><li><a href=\"/en-US/docs/Learn/MathML/First_steps/Three_famous_mathematical_formulas\">Three famous mathematical formulas</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/../Games\"><strong>Games — Developing games for the web</strong></a></li><li><details><summary>Guides and tutorials</summary><ol><li><a href=\"/en-US/docs/Games/Introduction\">Introduction to game development for the Web</a></li><li><a href=\"/en-US/docs/Games/Techniques\">Techniques for game development</a></li><li><a href=\"/en-US/docs/Games/Tutorials\">Tutorials</a></li><li><a href=\"/en-US/docs/Games/Publishing_games\">Publishing games</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing\"><strong>Tools and testing</strong></a></li><li><details open=\"\"><summary>Client-side web development tools</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">Understanding client-side web development tools</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">Client-side tooling overview</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\">Command line crash course</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\">Package management basics</a></li><li><em><a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain\" aria-current=\"page\">Introducing a complete toolchain</a></em></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\">Deploying our app</a></li></ol></details></li><li><details><summary>Introduction to client-side frameworks</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">Introduction to client-side frameworks</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features\">Framework main features</a></li></ol></details></li><li><details><summary>React</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\">Getting started with React</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning\">Beginning our React todo list</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components\">Componentizing our React app</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\">React interactivity: Events and state</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering\">React interactivity: Editing, filtering, conditional rendering</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\">Accessibility in React</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources\">React resources</a></li></ol></details></li><li><details><summary>Ember</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started\">Getting started with Ember</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization\">Ember app structure and componentization</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state\">Ember interactivity: Events, classes and state</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer\">Ember Interactivity: Footer functionality, conditional rendering</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing\">Routing in Ember</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources\">Ember resources and troubleshooting</a></li></ol></details></li><li><details><summary>Vue</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">Getting started with Vue</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component\">Creating our first Vue component</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists\">Rendering a list of Vue components</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models\">Adding a new todo form: Vue events, methods, and models</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling\">Styling Vue components with CSS</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">Using Vue computed properties</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering\">Vue conditional rendering: editing existing todos</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management\">Focus management with Vue refs</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources\">Vue resources</a></li></ol></details></li><li><details><summary>Svelte</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started\">Getting started with Svelte</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning\">Starting our Svelte to-do list app</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props\">Dynamic behavior in Svelte: working with variables and props</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components\">Componentizing our Svelte app</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\">Advanced Svelte: Reactivity, lifecycle, accessibility</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores\">Working with Svelte stores</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript\">TypeScript support in Svelte</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next\">Deployment and next steps</a></li></ol></details></li><li><details><summary>Angular</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started\">Getting started with Angular</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning\">Beginning our Angular todo list app</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling\">Styling our Angular app</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component\">Creating an item component</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering\">Filtering our to-do items</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building\">Building Angular applications and further resources</a></li></ol></details></li><li><details><summary>Git and GitHub</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/GitHub\">Git and GitHub</a></li></ol></details></li><li><details><summary>Cross browser testing</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing\">Cross browser testing</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction\">Introduction to cross-browser testing</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies\">Strategies for carrying out testing</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS\">Handling common HTML and CSS problems</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript\">Handling common JavaScript problems</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility\">Handling common accessibility problems</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">Implementing feature detection</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing\">Introduction to automated testing</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">Setting up your own test automation environment</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/Server-side\"><strong>Server-side website programming</strong></a></li><li><details><summary>First steps</summary><ol><li><a href=\"/en-US/docs/Learn/Server-side/First_steps\">Server-side website programming first steps</a></li><li><a href=\"/en-US/docs/Learn/Server-side/First_steps/Introduction\">Introduction to the server side</a></li><li><a href=\"/en-US/docs/Learn/Server-side/First_steps/Client-Server_overview\">Client-Server Overview</a></li><li><a href=\"/en-US/docs/Learn/Server-side/First_steps/Web_frameworks\">Server-side web frameworks</a></li><li><a href=\"/en-US/docs/Learn/Server-side/First_steps/Website_security\">Website security</a></li></ol></details></li><li><details><summary>Django web framework (Python)</summary><ol><li><a href=\"/en-US/docs/Learn/Server-side/Django\">Django Web Framework (Python)</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Introduction\">Django introduction</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/development_environment\">Setting up a Django development environment</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Tutorial_local_library_website\">Django Tutorial: The Local Library website</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/skeleton_website\">Django Tutorial Part 2: Creating a skeleton website</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Models\">Django Tutorial Part 3: Using models</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Admin_site\">Django Tutorial Part 4: Django admin site</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Home_page\">Django Tutorial Part 5: Creating our home page</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Generic_views\">Django Tutorial Part 6: Generic list and detail views</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Sessions\">Django Tutorial Part 7: Sessions framework</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Authentication\">Django Tutorial Part 8: User authentication and permissions</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Forms\">Django Tutorial Part 9: Working with forms</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Testing\">Django Tutorial Part 10: Testing a Django web application</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Deployment\">Django Tutorial Part 11: Deploying Django to production</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/web_application_security\">Django web application security</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/django_assessment_blog\">Assessment: DIY Django mini blog</a></li></ol></details></li><li><details><summary>Express Web Framework (Node.js/JavaScript)</summary><ol><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs\">Express web framework (Node.js/JavaScript)</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node introduction</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/development_environment\">Setting up a Node development environment</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express Tutorial: The Local Library website</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express Tutorial Part 2: Creating a skeleton website</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express Tutorial Part 3: Using a Database (with Mongoose)</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/routes\">Express Tutorial Part 4: Routes and controllers</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms\">Express Tutorial Part 6: Working with forms</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/deployment\">Express Tutorial Part 7: Deploying to production</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/Common_questions\"><strong>Further resources</strong></a></li><li><details><summary>Common questions</summary><ol><li><a href=\"/en-US/docs/Learn/Common_questions\">Common questions</a></li><li><a href=\"/en-US/docs/Learn/HTML/Howto\">Use HTML to solve common problems</a></li><li><a href=\"/en-US/docs/Learn/CSS/Howto\">Use CSS to solve common problems</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Howto\">Solve common problems in your JavaScript code</a></li><li><a href=\"/en-US/docs/Learn/Common_questions/Web_mechanics\">Web mechanics</a></li><li><a href=\"/en-US/docs/Learn/Common_questions/Tools_and_setup\">Tools and setup</a></li><li><a href=\"/en-US/docs/Learn/Common_questions/Design_and_accessibility\">Design and accessibility</a></li></ol></details></li></ol>","sidebarMacro":"LearnSidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\"><span class=\"button-wrap\"> Previous </span></a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools\"><span class=\"button-wrap\"> Overview: Understanding client-side tools</span></a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\"><span class=\"button-wrap\"> Next  </span></a></li>\n</ul>\n<p>In the final couple of articles in the series, we will solidify your tooling knowledge by walking you through the process of building up a sample case study toolchain. We'll go all the way from setting up a sensible development environment and putting transformation tools in place to actually deploying your app on Netlify. In this article, we'll introduce the case study, set up our development environment, and set up our code transformation tools.</p>\n<figure class=\"table-container\"><table>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Prerequisites:</th>\n      <td>\n        Familiarity with the core <a href=\"/en-US/docs/Learn/HTML\">HTML</a>,\n        <a href=\"/en-US/docs/Learn/CSS\">CSS</a>, and\n        <a href=\"/en-US/docs/Learn/JavaScript\">JavaScript</a> languages.\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Objective:</th>\n      <td>\n        To solidify what we've learnt so far by working through a complete\n        toolchain case study.\n      </td>\n    </tr>\n  </tbody>\n</table></figure>\n<p>There really are unlimited combinations of tools and ways to use them, what you see in this article and the next is only <em>one</em> way that the featured tools can be used for a project.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> It's also worth repeating that not all of these tools need to be run on the command line. Many of today's code editors (such as VS Code) have integration support for a <em>lot</em> of tools via plugins.</p>\n</div>"}},{"type":"prose","value":{"id":"introducing_our_case_study","title":"Introducing our case study","isH3":false,"content":"<p>The toolchain that we are creating in this article will be used to build and deploy a mini-site that lists data (taken from one of <a href=\"https://api.nasa.gov/\" class=\"external\" target=\"_blank\">NASA's open APIs</a>) concerning potentially hazardous space objects that threaten our existence on Earth! It looks like this:</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain/will-it-miss-screenshot.png\" alt=\"screenshot of the sample will it miss website\" width=\"790\" height=\"498\" loading=\"lazy\">\n</p>\n<p>You can see a live version of the site at <a href=\"https://near-misses.netlify.app/\" class=\"external\" target=\"_blank\">near-misses.netlify.com</a>.</p>"}},{"type":"prose","value":{"id":"tools_used_in_our_toolchain","title":"Tools used in our toolchain","isH3":false,"content":"<p>In this article we're going to use the following tools and features:</p>\n<ul>\n  <li><a href=\"https://react.dev/learn/writing-markup-with-jsx\" class=\"external\" target=\"_blank\">JSX</a>, a <a href=\"https://react.dev\" class=\"external\" target=\"_blank\">React</a>-related set of syntax extensions that allow you to do things like defining component structures inside JavaScript. You won't need to know React to follow this tutorial, but we've included this to give you an idea of how a non-native web language could be integrated into a toolchain.</li>\n  <li>The latest built-in JavaScript features (at the time of writing), such as <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/import\"><code>import</code></a>.</li>\n  <li>Useful development tools such as <a href=\"https://prettier.io/\" class=\"external\" target=\"_blank\">Prettier</a> for formatting and <a href=\"https://eslint.org/\" class=\"external\" target=\"_blank\">ESLint</a> for linting.</li>\n  <li><a href=\"https://postcss.org/\" class=\"external\" target=\"_blank\">PostCSS</a> to provide CSS nesting capabilities.</li>\n  <li><a href=\"https://parceljs.org/\" class=\"external\" target=\"_blank\">Parcel</a> to build and minify our code, and to write a bunch of configuration file content automatically for us.</li>\n  <li><a href=\"/en-US/docs/Learn/Tools_and_testing/GitHub\">GitHub</a> to manage our source code control.</li>\n  <li><a href=\"https://www.netlify.com/\" class=\"external\" target=\"_blank\">Netlify</a> to automate our deployment process.</li>\n</ul>\n<p>You may not be familiar with all the above features and tools or what they are doing, but don't panic — we'll explain each part as we move through this article.</p>"}},{"type":"prose","value":{"id":"toolchains_and_their_inherent_complexity","title":"Toolchains and their inherent complexity","isH3":false,"content":"<p>As with any chain, the more links you have in your toolchain, the more complex and potentially brittle it is — for example it might be more complex to configure, and easier to break. Conversely, the fewer links, the more resilient the toolchain is likely to be.</p>\n<p>All web projects will be different, and you need to consider what parts of your toolchain are necessary and consider each part carefully.</p>\n<p>The smallest toolchain is one that has no links at all. You would hand code the HTML, use \"vanilla JavaScript\" (meaning no frameworks or intermediary languages), and manually upload it all to a server for hosting.</p>\n<p>However, more complicated software requirements will likely benefit from the usage of tools to help simplify the development process. In addition, you should include tests before you deploy to your production server to ensure your software works as intended — this already sounds like a necessary toolchain.</p>\n<p>For our sample project, we'll be using a toolchain specifically designed to aid our software development and support the technical choices made during the software design phase. We will however be avoiding any superfluous tooling, with the aim of keeping complexity to a minimum.</p>\n<p>For example, we <em>could</em> have included a tool to minimize our SVG file sizes during the build. However, this project has only 4 SVG images, which were <a href=\"https://www.npmjs.com/package/svgo\" class=\"external\" target=\"_blank\">manually minified using SVGO</a> before adding them to the project.</p>"}},{"type":"prose","value":{"id":"a_couple_of_prerequisites","title":"A couple of prerequisites","isH3":false,"content":"<p>Besides the tools we're going to install that contribute to our toolchain, we mentioned two web services in the above list of tools. Let's take this opportunity to make sure we are set up with them before we continue. You will need to create accounts with each of GitHub and Netlify if you wish to complete the tutorial.</p>\n<ul>\n  <li>As mentioned previously, GitHub is a source code repository service that adds community features such as issue tracking, following project releases, and much more. In the next chapter, we will push to a GitHub code repository, which will cause a cascade effect that (should) deploy all the software to a home on the web.</li>\n  <li>Netlify is a hosting service for static websites (that is, websites that entirely consist of files that do not change in real-time), which lets us deploy multiple times a day and freely hosts static sites of all kinds. Netlify is what provides the \"home on the web\" mentioned above — free hosting for us to deploy our test app to.</li>\n</ul>\n<p>Once you've signed up for <a href=\"https://github.com/\" class=\"external\" target=\"_blank\">GitHub</a> (click the <em>Sign Up</em> link on the homepage if you don't already have an account, and follow the instructions), you can use your GitHub account for authentication on <a href=\"https://www.netlify.com/\" class=\"external\" target=\"_blank\">Netlify</a> (click <em>Sign Up</em>, then choose <em>GitHub</em> from the \"Sign up with one of the following\" list), so technically you only need to create one new account.</p>\n<p>Later on, you'll need to connect your Netlify account to your GitHub repository to deploy this project; we'll see how to do that in the next chapter.</p>"}},{"type":"prose","value":{"id":"three_stages_of_tools","title":"Three stages of tools","isH3":false,"content":"<p>As we talked about in <a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">Chapter 1</a>, the toolchain will be structured into the following phases:</p>\n<ul>\n  <li><strong>Safety net</strong>: Making the software development experience stable and more efficient. We might also refer to this as our development environment.</li>\n  <li><strong>Transformation</strong>: Tooling that allows us to use the latest features of a language (e.g. JavaScript) or another language entirely (e.g. JSX or TypeScript) in our development process, and then transforms our code so that the production version still runs on a wide variety of browsers, modern and older.</li>\n  <li><strong>Post development</strong>: Tooling that comes into play after you are done with the body of development to ensure that your software makes it to the web and continues to run. In this case study we'll look at adding tests to your code, and deploying your app using Netlify so it is available for all the web to see.</li>\n</ul>\n<p>Let's start working on these, beginning with our development environment.</p>"}},{"type":"prose","value":{"id":"creating_a_development_environment","title":"Creating a development environment","isH3":false,"content":"<p>This part of the toolchain is sometimes seen to be delaying the actual work, and it can be very easy to fall into a \"rabbit hole\" of tooling where you spend a lot of time trying to get the environment \"just right\".</p>\n<p>But you can look at this in the same way as setting up your physical work environment. The chair needs to be comfortable, and set up in a good position to help with your posture. You need power, Wi-Fi, and USB ports! There might be important decorations or music that help with your mental state — these are all important to do your best work possible, and they should also only need to be set up once, if done properly.</p>\n<p>In the same way, setting up your development environment, if done well, needs to be done only once and should be reusable in many future projects. You will probably want to review this part of the toolchain semi-regularly and consider if there are any upgrades or changes you should introduce, but this shouldn't be required too often.</p>\n<p>Your toolchain will depend on your own needs, but for this example of a (possible) complete toolchain, the tools that will be installed up front will be:</p>\n<ul>\n  <li>Library installation tools — for adding dependencies.</li>\n  <li>Code revision control.</li>\n  <li>Code tidying tools — for tidying JavaScript, CSS, and HTML.</li>\n  <li>Code linting tools — for linting our code.</li>\n</ul>"}},{"type":"prose","value":{"id":"library_installation_tools","title":"Library installation tools","isH3":true,"content":"<p>We'll use npm to install our tools, which you first met in Chapter 2. You should have Node.js and npm installed already, but if not, <a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line#adding_powerups\">refer back to that section</a>.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> Though it's not clear from the installation process, installing npm also installs a complementary tool called npx. We will use npx later in this chapter to help run tools that are installed as local dependencies to the project.</p>\n</div>\n<p>npm will be used to install subsequent parts of our toolchain. First of all, however, we'll install git to help with revision control.</p>"}},{"type":"prose","value":{"id":"code_revision_control","title":"Code revision control","isH3":true,"content":"<p>It's possible you've heard of \"git\" before. <a href=\"https://git-scm.com/\" class=\"external\" target=\"_blank\">Git</a> is currently the most popular source code revision control tool available to developers — revision control provides many advantages, such as a way to backup your work in a remote place, and a mechanism to work in a team on the same project without fear of overwriting each other's code.</p>\n<p>It might be obvious to some, but it bears repeating: Git is not the same thing as GitHub. Git is the revision control tool, whereas <a href=\"https://github.com/\" class=\"external\" target=\"_blank\">GitHub</a> is an online store for git repositories (plus a number of useful tools for working with them). Note that, although we're using GitHub in this chapter, there are several alternatives including <a href=\"https://about.gitlab.com/\" class=\"external\" target=\"_blank\">GitLab</a> and <a href=\"https://www.atlassian.com/software/bitbucket\" class=\"external\" target=\"_blank\">Bitbucket</a>, and you could even host your own git repositories.</p>\n<p>Using revision control in your projects and including it as part of the toolchain will help manage the evolution of your code. It offers a way to \"commit\" blocks of work as you progress, along with comments such as \"X new feature implemented\", or \"Bug Z now fixed due to Y changes\".</p>\n<p>Revision control can also allow you to <em>branch</em> out your project code, creating a separate version, and trying out new functionality on, without those changes affecting your original code.</p>\n<p>Finally, it can help you undo changes or revert your code back to a time \"when it was working\" if a mistake has been introduced somewhere and you are having trouble fixing it — something all developers need to do once in a while!</p>\n<p>Git can be <a href=\"https://git-scm.com/downloads\" class=\"external\" target=\"_blank\">downloaded and installed via the git-scm website</a> — download the relevant installer for your system, run it, and follow the on-screen prompts. This is all you need to do for now.</p>\n<p>You can interact with git in a number of different ways, from using the command line to issue commands, to using a <a href=\"https://git-scm.com/downloads/guis\" class=\"external\" target=\"_blank\">git GUI app</a> to issue the same commands by pushing buttons, or even from directly inside your code editor, as seen in the Visual Studio Code example below:</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain/vscode-git.png\" alt=\"GitHub integration shown in VS Code\" width=\"800\" height=\"506\" loading=\"lazy\">\n</p>\n<p>Anyway, installing git is all we need to do for now. Let's move on.</p>"}},{"type":"prose","value":{"id":"code_tidying_tools","title":"Code tidying tools","isH3":true,"content":"<p>We'll be using Prettier, which we first met in Chapter 2, to tidy our code in this project. If you followed the directions in the <a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line#installing_prettier\">Installing Prettier</a> section then you might already have Prettier installed. If not, we'll get you to install Prettier as a global utility using the terminal right now.</p>\n<p>You can check whether you've already got it installed globally using the following command:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code>prettier <span class=\"token parameter variable\">-v</span>\n</code></pre></div>\n<p>If installed, you'll get a version number returned like 2.0.2; if not, it'll return something along the lines of \"command not found\". If this is the case, install it using the following command:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> prettier <span class=\"token parameter variable\">-g</span>\n</code></pre></div>\n<p>Now that Prettier is installed, running and tidying your code can be done on the command line on an individual file basis from anywhere on your computer, for example:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code>prettier <span class=\"token parameter variable\">--write</span> ./src/index.html\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> In the command above, I use Prettier with the <code>--write</code> flag. Prettier understands this to mean \"if there's any problem in my code format, go ahead and fix them, then save my file\". This is fine for our development process, but we can also use <code>prettier</code> without the flag and it will only check the file. Checking the file (and not saving it) is useful for purposes like checks that run before a release - i.e. \"don't release any code that's not been properly formatted.\"</p>\n</div>\n<p>It can be arduous to run the initial command against each file, and it would be useful to have a single command to do this for us (and the same will go for our linting tools).</p>\n<p>There are many ways to solve this problem; here's just a few:</p>\n<ul>\n  <li>Using npm scripts to run multiple commands from the command line in one go, such as <code>npm run tidy-code</code>.</li>\n  <li>Using special \"git hooks\" to test if the code is formatted before a commit.</li>\n  <li>Using code editor plugins to run Prettier commands each time a file is saved.</li>\n</ul>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> What is a git hook? Git (not GitHub) provides a system that lets us attach pre- and post- actions to the tasks we perform with git (such as committing your code). Although git hooks can be a bit overly complicated (in this author's opinion), once they're in place they can be very powerful. If you're interested in using hooks, <a href=\"https://github.com/typicode/husky\" class=\"external\" target=\"_blank\">Husky</a> is a greatly simplified route into using hooks.</p>\n</div>\n<p>For VS Code, one useful extension is the <a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" class=\"external\" target=\"_blank\">Prettier Code Formatter by Esben Petersen</a>, which lets VSCode automatically format code upon saving. This means that any file in the project we are working on gets formatted nicely, including HTML, CSS, JavaScript, JSON, markdown, and more. All the editor needs is \"Format On Save\" enabled.</p>\n<p>Like many tools made more recently Prettier comes with \"sensible defaults\". That means that you'll be able to use Prettier without having to configure anything (if you are happy with the <a href=\"https://prettier.io/docs/en/configuration.html\" class=\"external\" target=\"_blank\">defaults</a>). This lets you get on with what's important: the creative work.</p>"}},{"type":"prose","value":{"id":"code_linting_tools","title":"Code linting tools","isH3":true,"content":"<p>Linting helps with code quality but also is a way to catch potential errors earlier during development. It's a key ingredient of a good toolchain and one that many development projects will include by default.</p>\n<p>Web development linting tools mostly exist for JavaScript (though there are a few available for HTML and CSS). This makes sense: if an unknown HTML element or invalid CSS property is used, due to the resilient nature of these two languages nothing is likely to break. JavaScript is a lot more fragile — mistakenly calling a function that doesn't exist for example causes your JavaScript to break; linting JavaScript is therefore very important, especially for larger projects.</p>\n<p>The go-to tool for JavaScript linting is <a href=\"https://eslint.org/\" class=\"external\" target=\"_blank\">ESLint</a>. It's an extremely powerful and versatile tool but can be tricky to configure correctly and you could easily consume many hours trying to get a configuration <em>just right</em>!</p>\n<p>Out of the box, ESLint is going to complain that it can't find the configuration file if you run it. The configuration file supports multiple formats but for this project, we'll use <code>.eslintrc.json</code> (the leading period means the file is hidden by default).</p>\n<p>ESLint is installed via npm, so as per discussions in Chapter 2, you have the choice to install this tool locally or globally. Using both is recommended:</p>\n<ul>\n  <li>For projects you intend to share, you should always include ESLint as a local dependency so that anyone making their own copy can follow the rules you've applied to the project.</li>\n  <li>You should also consider having ESLint installed globally so that you can quickly use it to check any file you want.</li>\n</ul>\n<p>For the sake of simplicity, in this chapter, we're not going to explore all the features of ESLint, but we will put a configuration in place that works for our particular project and its requirements. However, bear in mind that if you want to refine and enforce a rule about how your code looks (or validates), it's very likely that it can be done with the right ESLint configuration.</p>\n<p>A little later in this chapter, we'll provide the ESLint config. Once a working configuration is in place, running the command can generate some useful information. Here is an example ESLint output:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code>./my-project/src/index.js\n   <span class=\"token number\">2</span>:8 error <span class=\"token string\">'React'</span> is defined but never used  no-unused-vars\n <span class=\"token number\">22</span>:20 error <span class=\"token string\">'body'</span> is defined but never used   no-unused-vars\n <span class=\"token number\">96</span>:19 error <span class=\"token string\">'b'</span> is defined but never used      no-unused-vars\n\n✖ <span class=\"token number\">3</span> problems <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> errors, <span class=\"token number\">0</span> warnings<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> We'll install ESLint in the next section; don't worry about this for now.</p>\n</div>\n<p>As with other tools, code editor integration support is typically good for ESLint, and potentially more useful as it can give us real-time feedback when issues crop up:</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain/eslint-error.png\" alt=\"ESLint error integration shown in VS Code\" width=\"800\" height=\"251\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"configuring_the_initial_project","title":"Configuring the initial project","isH3":false,"content":"<p>Using these tools, a new project can be set up safely in the knowledge that many \"basic\" issues will be caught early on.</p>\n<p>Using the command line, we can create the project, install the initial tooling, and create rudimentary configuration files. Again, once you've repeated this process a few times, you'll get a feel for what your default setup should be. Of course, this is <em>just one</em> possible configuration.</p>"}},{"type":"prose","value":{"id":"initial_setup","title":"Initial setup","isH3":true,"content":"<p>OK, let's get the initial project setup out of the way.</p>\n<ol>\n  <li>Start off by opening your terminal, and navigating to a place that you'll be able to find and get to easily. The Desktop perhaps, or your home or documents folder?</li>\n  <li>Next, run the following commands to create a folder to keep your project in, and go inside the folder:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">mkdir</span> will-it-miss\n<span class=\"token builtin class-name\">cd</span> will-it-miss\n</code></pre></div>\n  </li>\n  <li>Now we will create a new directory for all of our website's development code to live in. Run the following now:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">mkdir</span> src\n</code></pre></div>Code organization tends to be quite subjective from team to team. For this project, the source code will live in <code>src</code>.\n  </li>\n  <li>Making sure you are inside the root of the <code>will-it-miss</code> directory, enter the following command to start git's source control functionality working on the directory:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> init\n</code></pre></div>This means that you'll now be able to start storing revisions to the folder's contents, saving it to a remote repository, etc. More on this later!\n  </li>\n  <li>Next, enter the following command to turn your directory into an npm package, with the advantages that we discussed in the previous article:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> init <span class=\"token parameter variable\">--force</span>\n</code></pre></div>This will create a default <code>package.json</code> file that we can configure later on if desired. The <code>--force</code> flag causes the command to instantly create a default <code>package.json</code> file without asking you all the usual questions about what contents you want it to have (as we saw previously). We only need the defaults for now, so this saves us a bit of time.\n  </li>\n</ol>\n<h4 id=\"getting_the_project_code_files\">Getting the project code files</h4>\n<p>At this point, we'll get hold of the project's code files (HTML, CSS, JavaScript, etc.), and put them in our <code>src</code> directory. We won't teach you how they work, as that is not the point of this chapter. They are merely here to run the tools on, to teach you about how <em>they</em> work.</p>\n<ol>\n  <li>\n    To get hold of the code files, visit <a href=\"https://github.com/remy/mdn-will-it-miss\" class=\"external\" target=\"_blank\">https://github.com/remy/mdn-will-it-miss</a> and download and unzip the contents of this repo onto your local drive somewhere. You can download the entire project as a zip file by selecting <em>Clone or download</em> &gt; <em>Download ZIP</em>.\n    \n    <img src=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain/github-will-it-miss.png\" alt=\"The GitHub will it miss repo\" width=\"790\" height=\"662\" loading=\"lazy\">\n  </li>\n  <li>Now copy the contents of the project's <code>src</code> directory to your currently empty <code>src</code> directory.</li>\n</ol>\n<p>We have our project files in place. That's all we need to do for now!</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Note:</strong> To set up the project on your local machine, go to the root directory of the unzipped folder, open a terminal in that location, and execute the <code>npm install</code> command in the terminal. This will install all project dependencies that are mentioned in the <code>package.json</code> file.</p>\n</div>\n<h4 id=\"installing_our_tools\">Installing our tools</h4>\n<p>Now it's time to install the initial set of tools we'll be using in our dev environment. Run the following from inside your project's root directory:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint prettier babel-eslint\n</code></pre></div>\n<p>There are two important things to note about the command you just ran. The first is that we're installing the dependencies locally to the project — installing tools locally is better for a specific project. Installing locally (not including the <code>--global</code> option) allows us to easily recreate this setup on other machines.</p>\n<p>The second important part of this install command is the <code>--save-dev</code> option. This tells the npm tool that these particular dependencies are only needed for development (npm therefore lists them in the <code>package.json</code> file under <code>devDependencies</code>, not <code>dependencies</code>). This means that if this project is installed in production mode these dependencies will not be installed. A \"typical\" project can have many development dependencies which are not needed to actually run the code in production. Keeping them as separate dependencies reduces any unnecessary work when deploying to production (which we will look at in the next chapter).</p>\n<p>Before starting on the development of the actual application code, a little configuration is required for our tools to work properly. It's not a prerequisite of developing for the web, but it's useful to have the tools configured correctly if they're going to help catch errors during development — which ESLint is particularly useful for.</p>"}},{"type":"prose","value":{"id":"configuring_our_tools","title":"Configuring our tools","isH3":true,"content":"<p>In the root of the project (not in the <code>src</code> directory), we will add configuration files to configure some of our tools, namely Prettier and ESLint. This is general practice for tool configuration — you tend to find the config files in the project root, which more often than not contain configuration options expressed in a JSON structure (though our tools and many others also support YAML, which you can switch to if that's your preferred flavor of the configuration file).</p>\n<ol>\n  <li>First of all, create a file in the root of your <code>will-it-miss</code> directory called <code>.prettierrc.json</code>.</li>\n  <li>To configure Prettier, give <code>.prettierrc.json</code> the following contents:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">json</span></p><pre class=\"brush: json notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"trailingComma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>With these settings, when Prettier formats JavaScript for you it will use single quotes for all your quoted values, and it won't use trailing commas (a newer feature of ECMAScript that will cause errors in older browsers). You can find more about <a href=\"https://prettier.io/docs/en/configuration.html\" class=\"external\" target=\"_blank\">configuring Prettier</a> in its documentation.\n  </li>\n  <li>Next up, we'll configure ESLint — create another file in the root of your <code>will-it-miss</code> directory called <code>.eslintrc.json</code>, and give it the following contents:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">json</span></p><pre class=\"brush: json notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>The above ESLint configuration says that we want to use the \"recommended\" ESLint settings, that we're going to allow usage of ES6 features (such as <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a> or <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set\"><code>Set()</code></a>), that we can use module <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/import\"><code>import</code></a> statements, and that using <a href=\"/en-US/docs/Web/API/console/log_static\"><code>console.log()</code></a> is allowed.\n  </li>\n  <li>\n    However, in the project's source files we are using React JSX syntax (for your real projects you might use React or Vue or any other framework, or no framework at all!).\n    Putting JSX syntax in the middle of our JavaScript is going to cause ESLint to complain pretty quickly with the current configuration, so we'll need to add a little more configuration to the ESLint settings to get it to accept JSX features.\n    The final config file should look like this — add in the bolded parts and save it:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">json</span></p><pre class=\"brush: json notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"plugin:react/recommended\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ecmaFeatures\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"react\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react/jsx-uses-vars\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>As the configuration now uses a plugin called \"React\", this development dependency also needs to be installed, so that the code is there to actually run that part of the linting process.\n  </li>\n  <li>Run the following terminal command in the root of your project folder:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint-plugin-react\n</code></pre></div>\n  </li>\n</ol>\n<p>There's a complete <a href=\"https://eslint.org/docs/rules/\" class=\"external\" target=\"_blank\">list of ESLint rules</a> that you can tweak and configure to your heart's content and many companies and teams have published their <a href=\"https://www.npmjs.com/search?q=keywords:eslintconfig\" class=\"external\" target=\"_blank\">own ESLint configurations</a>, which can sometimes be useful either to get inspiration or to select one that you feel suits your own standards. A forewarning though: ESLint configuration is a very deep rabbit hole!</p>\n<p>That's our dev environment setup complete at this point. Now, finally we're (very nearly) ready to code.</p>"}},{"type":"prose","value":{"id":"build_and_transformation_tools","title":"Build and transformation tools","isH3":false,"content":"<p>For this project, as mentioned above, React is going to be used, which also means that JSX will be used in the source code. The project will also use the latest JavaScript features.</p>\n<p>An immediate issue is that no browser has native support for JSX; it is an intermediate language that is meant to be compiled into languages the browser understands in the production code.</p>\n<p>If the browser tries to run the source JavaScript it will immediately complain; the project needs a build tool to transform the source code to something the browser can consume without issue.</p>\n<p>There's a number of choices for transform tools and though WebPack is a particularly popular one, this project is going to use Parcel — specifically because it requires a lot less configuration.</p>\n<p>Parcel works on the basis that it will try to configure your development requirements on the fly. Parcel will watch the code and run a live-reloading web server during development. This also means that Parcel will install our software dependencies automatically as they are referenced in the source code, as we <a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management#using_the_package_ecosystem\">saw in Chapter 3</a>.</p>\n<p>Parcel will take care of installing any transformation tooling and configuration required without us needing to intervene (in most cases).</p>\n<p>Then as a final bonus, Parcel can bundle and prepare the code for production deployment, taking care of minification and browser compatibility requirements.</p>\n<p>We therefore need to install the parcel dependency in our project too — run the following command in your terminal:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev parcel-bundler\n</code></pre></div>"}},{"type":"prose","value":{"id":"using_future_features","title":"Using future features","isH3":true,"content":"<p>The code for our project is using some new web features including features that are so new they aren't fully standardized yet. For example, instead of reaching for a tool like <a href=\"https://sass-lang.com/\" class=\"external\" target=\"_blank\">Sass</a>, this particular project uses the W3C proposal for <a href=\"https://drafts.csswg.org/css-nesting/\" class=\"external\" target=\"_blank\">CSS nesting</a>. CSS nesting allows us to nest CSS selectors and properties inside one another thus creating more specific selector scope. Sass was one of the first preprocessors to support nesting (if not the first) but now after many years, nesting looks like it will soon be standardized, which means that we will have it available in our browsers without needing build tools.</p>\n<p>Until then, Parcel will do the transformation between nested CSS and natively supported CSS with the help of <a href=\"https://postcss.org/\" class=\"external\" target=\"_blank\">PostCSS</a>, which Parcel works with out of the box. Since we've specifically decided this project should use CSS nesting (instead of Sass), the project will need to include a PostCSS plugin.</p>\n<p>Let's use the <a href=\"https://preset-env.cssdb.org/\" class=\"external\" target=\"_blank\">postcss-preset-env</a>, which lets us \"use tomorrow's CSS today\". To do so, follow these steps:</p>\n<ol>\n  <li>Add a single file called <code>.postcssrc</code> to the root of your project directory.</li>\n  <li>Add the following contents to the new file, which will automagically give us full access to the latest CSS features:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">json</span></p><pre class=\"brush: json notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"postcss-preset-env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"stage\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ol>\n<p>That's all we need to do — remember that Parcel installs the dependencies for us by default!</p>\n<p>Although this stage of our toolchain can be quite painful, because we've chosen a tool that purposely tries to reduce configuration and complexity, there's really nothing more we need to do during the development phase. Modules are correctly imported, nested CSS is correctly transformed to \"regular CSS\", and our development is unimpeded by the build process.</p>\n<p>Now our software is ready to be written!</p>"}},{"type":"prose","value":{"id":"running_the_transformation","title":"Running the transformation","isH3":false,"content":"<p>To start working with our project, we'll run the Parcel server on the command line. In its default mode it will watch for changes in your code and automatically install your dependencies. This is nice because we don't have to flit back and forth between the code and the command line.</p>\n<ol>\n  <li>To start Parcel off in the background, go to your terminal and run the following command:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code>npx parcel src/index.html\n</code></pre></div>You should see an output like this (once the dependencies have been installed):\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code>Server running at http://localhost:1234\n✨  Built <span class=\"token keyword\">in</span> 129ms.\n</code></pre></div>Parcel also installs the dependencies that we will use in our code, including react, react-dom, react-async-hook, date-fns, and format-number. This first run will therefore be longer than a typical run of Parcel.\n    <div class=\"notecard note\" id=\"sect7\">\n      <p><strong>Note:</strong> if you run Parcel on this project and are faced with an error that reads <code>Error: ENOENT: no such file or directory</code>, stop the process using <kbd>Ctrl</kbd> + <kbd>C</kbd> and then try re-running it.</p>\n    </div>The server is now running on the URL that was printed (in this case localhost:1234).\n  </li>\n  <li>Go to this URL in your browser and you will see the example app running!</li>\n</ol>\n<p>Another clever trick Parcel has up its sleeve is that any changes to your source code will now trigger an update in the browser. To try this out:</p>\n<ol>\n  <li>Load up the file <code>src/components/App.js</code> in your favorite text editor.</li>\n  <li>Search for the text \"near misses\", and replace it with something silly like \"flying pigs\".</li>\n  <li>Save the file, then go straight back to the app running in your browser. You'll notice that the browser has automatically refreshed, and the line \"&lt;date&gt; there will be &lt;number&gt; near misses\" at the top of the page has been changed!</li>\n</ol>\n<p>You could also try using ESLint and Prettier too — try deliberately removing a load of the whitespace from one of your files and running Prettier on it to clean it up, or introduce a syntax error into one of your JavaScript files and see what errors ESLint gives you when you try to use Parcel to build it again.</p>"}},{"type":"prose","value":{"id":"summary","title":"Summary","isH3":false,"content":"<p>We've come a long way in this chapter, building up a rather nice local development environment to create an application in.</p>\n<p>At this point during web software development you would usually be crafting your code for the software you intend to build. Since this module is all about learning the tools around web development, not web development code itself, we won't be teaching you any actual coding — you'll find that information in the rest of MDN!</p>\n<p>Instead, we've written an example project for you to use your tools on. We'd suggest that you work through the rest of the chapter using our example code, and then you can try changing the contents of the src directory to your own project and publishing that on Netlify instead! And indeed, deploying to Netlify will be the end goal of the next chapter!</p><ul class=\"prev-next\">\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\"><span class=\"button-wrap\"> Previous </span></a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools\"><span class=\"button-wrap\"> Overview: Understanding client-side tools</span></a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\"><span class=\"button-wrap\"> Next  </span></a></li>\n</ul>"}}],"toc":[{"text":"Introducing our case study","id":"introducing_our_case_study"},{"text":"Tools used in our toolchain","id":"tools_used_in_our_toolchain"},{"text":"Toolchains and their inherent complexity","id":"toolchains_and_their_inherent_complexity"},{"text":"A couple of prerequisites","id":"a_couple_of_prerequisites"},{"text":"Three stages of tools","id":"three_stages_of_tools"},{"text":"Creating a development environment","id":"creating_a_development_environment"},{"text":"Configuring the initial project","id":"configuring_the_initial_project"},{"text":"Build and transformation tools","id":"build_and_transformation_tools"},{"text":"Running the transformation","id":"running_the_transformation"},{"text":"Summary","id":"summary"}],"summary":"We've come a long way in this chapter, building up a rather nice local development environment to create an application in.","popularity":0.0042,"modified":"2023-11-15T05:37:52.000Z","source":{"folder":"en-us/learn/tools_and_testing/understanding_client-side_tools/introducing_complete_toolchain","github_url":"https://github.com/mdn/content/blob/main/files/en-us/learn/tools_and_testing/understanding_client-side_tools/introducing_complete_toolchain/index.md","last_commit_url":"https://github.com/mdn/content/commit/e822af5fc37c5cd436a58b05656cc82e18cf7d63","filename":"index.md"},"short_title":"Introducing a complete toolchain","parents":[{"uri":"/en-US/docs/Learn","title":"Guides"},{"uri":"/en-US/docs/Learn/Tools_and_testing","title":"Tools and testing"},{"uri":"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools","title":"Understanding client-side web development tools"},{"uri":"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain","title":"Introducing a complete toolchain"}],"pageTitle":"Introducing a complete toolchain - Learn web development | MDN","noIndexing":false}}