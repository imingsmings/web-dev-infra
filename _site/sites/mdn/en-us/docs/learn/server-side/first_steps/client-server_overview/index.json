{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Client-Server Overview","mdn_url":"/en-US/docs/Learn/Server-side/First_steps/Client-Server_overview","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web\"><strong>Complete beginners start here!</strong></a></li><li><details><summary>Getting started with the web</summary><ol><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web\">Getting started with the web</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/Installing_basic_software\">Installing basic software</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like\">What will your website look like?</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/Dealing_with_files\">Dealing with files</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML basics</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS basics</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/Publishing_your_website\">Publishing your website</a></li><li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works\">How the web works</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/HTML\"><strong>HTML — Structuring the web</strong></a></li><li><details><summary>Introduction to HTML</summary><ol><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML\">Introduction to HTML</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">Getting started with HTML</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">What's in the head? Metadata in HTML</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals\">HTML text fundamentals</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">Creating hyperlinks</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting\">Advanced text formatting</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure\">Document and website structure</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML\">Debugging HTML</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter\">Marking up a letter</a></li><li><a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content\">Structuring a page of content</a></li></ol></details></li><li><details><summary>Multimedia and embedding</summary><ol><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding\">Multimedia and embedding</a></li><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML\">Images in HTML</a></li><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\">Video and audio content</a></li><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\">From object to iframe — other embedding technologies</a></li><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web\">Adding vector graphics to the web</a></li><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">Responsive images</a></li><li><a href=\"/en-US/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page\">Mozilla splash page</a></li></ol></details></li><li><details><summary>HTML tables</summary><ol><li><a href=\"/en-US/docs/Learn/HTML/Tables\">HTML tables</a></li><li><a href=\"/en-US/docs/Learn/HTML/Tables/Basics\">HTML table basics</a></li><li><a href=\"/en-US/docs/Learn/HTML/Tables/Advanced\">HTML table advanced features and accessibility</a></li><li><a href=\"/en-US/docs/Learn/HTML/Tables/Structuring_planet_data\">Structuring planet data</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/CSS\"><strong>CSS — Styling the web</strong></a></li><li><details><summary>CSS first steps</summary><ol><li><a href=\"/en-US/docs/Learn/CSS/First_steps\">CSS first steps overview</a></li><li><a href=\"/en-US/docs/Learn/CSS/First_steps/What_is_CSS\">What is CSS?</a></li><li><a href=\"/en-US/docs/Learn/CSS/First_steps/Getting_started\">Getting started with CSS</a></li><li><a href=\"/en-US/docs/Learn/CSS/First_steps/How_CSS_is_structured\">How CSS is structured</a></li><li><a href=\"/en-US/docs/Learn/CSS/First_steps/How_CSS_works\">How CSS works</a></li><li><a href=\"/en-US/docs/Learn/CSS/First_steps/Styling_a_biography_page\">Styling a biography page</a></li></ol></details></li><li><details><summary>CSS building blocks</summary><ol><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks\">CSS building blocks</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Selectors/Type_Class_and_ID_Selectors\">Type, class, and ID selectors</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Selectors/Attribute_selectors\">Attribute selectors</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements\">Pseudo-classes and pseudo-elements</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Selectors/Combinators\">Combinators</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade, specificity, and inheritance</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Cascade_layers\">Cascade layers</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/The_box_model\">The box model</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders\">Backgrounds and borders</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Handling_different_text_directions\">Handling different text directions</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Overflowing_content\">Overflowing content</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Values_and_units\">CSS values and units</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">Sizing items in CSS</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Images_media_form_elements\">Images, media, and form elements</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Styling_tables\">Styling tables</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Debugging_CSS\">Debugging CSS</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Organizing\">Organizing your CSS</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Fundamental_CSS_comprehension\">Fundamental CSS comprehension</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/Creating_fancy_letterheaded_paper\">Creating fancy letterheaded paper</a></li><li><a href=\"/en-US/docs/Learn/CSS/Building_blocks/A_cool_looking_box\">A cool-looking box</a></li></ol></details></li><li><details><summary>Styling text</summary><ol><li><a href=\"/en-US/docs/Learn/CSS/Styling_text\">CSS styling text</a></li><li><a href=\"/en-US/docs/Learn/CSS/Styling_text/Fundamentals\">Fundamental text and font styling</a></li><li><a href=\"/en-US/docs/Learn/CSS/Styling_text/Styling_lists\">Styling lists</a></li><li><a href=\"/en-US/docs/Learn/CSS/Styling_text/Styling_links\">Styling links</a></li><li><a href=\"/en-US/docs/Learn/CSS/Styling_text/Web_fonts\">Web fonts</a></li><li><a href=\"/en-US/docs/Learn/CSS/Styling_text/Typesetting_a_homepage\">Typesetting a community school homepage</a></li></ol></details></li><li><details><summary>CSS layout</summary><ol><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout\">CSS layout</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Introduction\">Introduction to CSS layout</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow\">Normal Flow</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Flexbox\">Flexbox</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Grids\">Grids</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Floats\">Floats</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Positioning\">Positioning</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\">Multiple-column layout</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Responsive_Design\">Responsive design</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Media_queries\">Beginner's guide to media queries</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\">Legacy layout methods</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\">Supporting older browsers</a></li><li><a href=\"/en-US/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension\">Fundamental layout comprehension</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/JavaScript\"><strong>JavaScript — Dynamic client-side scripting</strong></a></li><li><details><summary>JavaScript first steps</summary><ol><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps\">JavaScript First Steps</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript\">What is JavaScript?</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/A_first_splash\">A first splash into JavaScript</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/What_went_wrong\">What went wrong? Troubleshooting JavaScript</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/Variables\">Storing the information you need — Variables</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/Math\">Basic math in JavaScript — numbers and operators</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/Strings\">Handling text — strings in JavaScript</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods\">Useful string methods</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/Arrays\">Arrays</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/First_steps/Silly_story_generator\">Silly story generator</a></li></ol></details></li><li><details><summary>JavaScript building blocks</summary><ol><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/conditionals\">Making decisions in your code — conditionals</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code\">Looping code</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Functions\">Functions — reusable blocks of code</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">Build your own function</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Return_values\">Function return values</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Events\">Introduction to events</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks/Image_gallery\">Image gallery</a></li></ol></details></li><li><details><summary>Introducing JavaScript objects</summary><ol><li><a href=\"/en-US/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/Basics\">JavaScript object basics</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\">Object prototypes</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/Object-oriented_programming\">Object-oriented programming</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Classes in JavaScript</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/JSON\">Working with JSON</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/Object_building_practice\">Object building practice</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features\">Adding features to our bouncing balls demo</a></li></ol></details></li><li><details><summary>Asynchronous JavaScript</summary><ol><li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous\">Asynchronous JavaScript</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous/Introducing\">Introducing asynchronous JavaScript</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous/Promises\">How to use promises</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous/Implementing_a_promise-based_API\">How to implement a promise-based API</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous/Introducing_workers\">Introducing workers</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Asynchronous/Sequencing_animations\">Sequencing animations</a></li></ol></details></li><li><details><summary>Client-side web APIs</summary><ol><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">Introduction to web APIs</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">Manipulating documents</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">Fetching data from the server</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\">Third-party APIs</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics\">Drawing graphics</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs\">Video and Audio APIs</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\">Client-side storage</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/Forms\"><strong>Web forms — Working with user data</strong></a></li><li><details><summary>Core forms learning pathway</summary><ol><li><a href=\"/en-US/docs/Learn/Forms\">Web forms — Working with user data</a></li><li><a href=\"/en-US/docs/Learn/Forms/Your_first_form\">Your first form</a></li><li><a href=\"/en-US/docs/Learn/Forms/How_to_structure_a_web_form\">How to structure a web form</a></li><li><a href=\"/en-US/docs/Learn/Forms/Basic_native_form_controls\">Basic native form controls</a></li><li><a href=\"/en-US/docs/Learn/Forms/HTML5_input_types\">The HTML5 input types</a></li><li><a href=\"/en-US/docs/Learn/Forms/Other_form_controls\">Other form controls</a></li><li><a href=\"/en-US/docs/Learn/Forms/Styling_web_forms\">Styling web forms</a></li><li><a href=\"/en-US/docs/Learn/Forms/Advanced_form_styling\">Advanced form styling</a></li><li><a href=\"/en-US/docs/Learn/Forms/UI_pseudo-classes\">UI pseudo-classes</a></li><li><a href=\"/en-US/docs/Learn/Forms/Form_validation\">Client-side form validation</a></li><li><a href=\"/en-US/docs/Learn/Forms/Sending_and_retrieving_form_data\">Sending form data</a></li></ol></details></li><li><details><summary>Advanced forms articles</summary><ol><li><a href=\"/en-US/docs/Learn/Forms/How_to_build_custom_form_controls\">How to build custom form controls</a></li><li><a href=\"/en-US/docs/Learn/Forms/Sending_forms_through_JavaScript\">Sending forms through JavaScript</a></li><li><a href=\"/en-US/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">CSS property compatibility table for form controls</a></li><li><a href=\"/en-US/docs/Learn/Forms/HTML_forms_in_legacy_browsers\">HTML forms in legacy browsers</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/Accessibility\"><strong>Accessibility — Make the web usable by everyone</strong></a></li><li><details><summary>Accessibility guides</summary><ol><li><a href=\"/en-US/docs/Learn/Accessibility\">Accessibility</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/What_is_accessibility\">What is accessibility?</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/HTML\">HTML: A good basis for accessibility</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/CSS_and_JavaScript\">CSS and JavaScript accessibility best practices</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/WAI-ARIA_basics\">WAI-ARIA basics</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/Multimedia\">Accessible multimedia</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/Mobile\">Mobile accessibility</a></li><li><a href=\"/en-US/docs/Learn/Accessibility/Accessibility_troubleshooting\">Assessment: Accessibility troubleshooting</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/Performance\"><strong>Performance — Making websites fast and responsive</strong></a></li><li><details><summary>Performance guides</summary><ol><li><a href=\"/en-US/docs/Learn/Performance\">Web performance</a></li><li><a href=\"/en-US/docs/Learn/Performance/why_web_performance\">The \"why\" of web performance</a></li><li><a href=\"/en-US/docs/Learn/Performance/What_is_web_performance\">What is web performance?</a></li><li><a href=\"/en-US/docs/Learn/Performance/Perceived_performance\">Perceived performance</a></li><li><a href=\"/en-US/docs/Learn/Performance/Measuring_performance\">Measuring performance</a></li><li><a href=\"/en-US/docs/Learn/Performance/Multimedia\">Multimedia: Images</a></li><li><a href=\"/en-US/docs/Learn/Performance/video\">Multimedia: video</a></li><li><a href=\"/en-US/docs/Learn/Performance/JavaScript\">JavaScript performance optimization</a></li><li><a href=\"/en-US/docs/Learn/Performance/HTML\">HTML performance optimization</a></li><li><a href=\"/en-US/docs/Learn/Performance/CSS\">CSS performance optimization</a></li><li><a href=\"/en-US/docs/Learn/Performance/business_case_for_performance\">The business case for web performance</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/MathML\"><strong>MathML — Writing mathematics with MathML</strong></a></li><li><details><summary>MathML first steps</summary><ol><li><a href=\"/en-US/docs/Learn/MathML/First_steps\">MathML first steps overview</a></li><li><a href=\"/en-US/docs/Learn/MathML/First_steps/Getting_started\">Getting started with MathML</a></li><li><a href=\"/en-US/docs/Learn/MathML/First_steps/Text_containers\">MathML Text Containers</a></li><li><a href=\"/en-US/docs/Learn/MathML/First_steps/Fractions_and_roots\">MathML fractions and roots</a></li><li><a href=\"/en-US/docs/Learn/MathML/First_steps/Scripts\">MathML scripted elements</a></li><li><a href=\"/en-US/docs/Learn/MathML/First_steps/Tables\">MathML tables</a></li><li><a href=\"/en-US/docs/Learn/MathML/First_steps/Three_famous_mathematical_formulas\">Three famous mathematical formulas</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/../Games\"><strong>Games — Developing games for the web</strong></a></li><li><details><summary>Guides and tutorials</summary><ol><li><a href=\"/en-US/docs/Games/Introduction\">Introduction to game development for the Web</a></li><li><a href=\"/en-US/docs/Games/Techniques\">Techniques for game development</a></li><li><a href=\"/en-US/docs/Games/Tutorials\">Tutorials</a></li><li><a href=\"/en-US/docs/Games/Publishing_games\">Publishing games</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing\"><strong>Tools and testing</strong></a></li><li><details><summary>Client-side web development tools</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">Understanding client-side web development tools</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">Client-side tooling overview</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\">Command line crash course</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\">Package management basics</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain\">Introducing a complete toolchain</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\">Deploying our app</a></li></ol></details></li><li><details><summary>Introduction to client-side frameworks</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">Introduction to client-side frameworks</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features\">Framework main features</a></li></ol></details></li><li><details><summary>React</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\">Getting started with React</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning\">Beginning our React todo list</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components\">Componentizing our React app</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\">React interactivity: Events and state</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering\">React interactivity: Editing, filtering, conditional rendering</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\">Accessibility in React</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources\">React resources</a></li></ol></details></li><li><details><summary>Ember</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started\">Getting started with Ember</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization\">Ember app structure and componentization</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state\">Ember interactivity: Events, classes and state</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer\">Ember Interactivity: Footer functionality, conditional rendering</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing\">Routing in Ember</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources\">Ember resources and troubleshooting</a></li></ol></details></li><li><details><summary>Vue</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">Getting started with Vue</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component\">Creating our first Vue component</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists\">Rendering a list of Vue components</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models\">Adding a new todo form: Vue events, methods, and models</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling\">Styling Vue components with CSS</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">Using Vue computed properties</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering\">Vue conditional rendering: editing existing todos</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management\">Focus management with Vue refs</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources\">Vue resources</a></li></ol></details></li><li><details><summary>Svelte</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started\">Getting started with Svelte</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning\">Starting our Svelte to-do list app</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props\">Dynamic behavior in Svelte: working with variables and props</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components\">Componentizing our Svelte app</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\">Advanced Svelte: Reactivity, lifecycle, accessibility</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores\">Working with Svelte stores</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript\">TypeScript support in Svelte</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next\">Deployment and next steps</a></li></ol></details></li><li><details><summary>Angular</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started\">Getting started with Angular</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning\">Beginning our Angular todo list app</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling\">Styling our Angular app</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component\">Creating an item component</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering\">Filtering our to-do items</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building\">Building Angular applications and further resources</a></li></ol></details></li><li><details><summary>Git and GitHub</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/GitHub\">Git and GitHub</a></li></ol></details></li><li><details><summary>Cross browser testing</summary><ol><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing\">Cross browser testing</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction\">Introduction to cross-browser testing</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies\">Strategies for carrying out testing</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS\">Handling common HTML and CSS problems</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript\">Handling common JavaScript problems</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility\">Handling common accessibility problems</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">Implementing feature detection</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing\">Introduction to automated testing</a></li><li><a href=\"/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">Setting up your own test automation environment</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/Server-side\"><strong>Server-side website programming</strong></a></li><li><details open=\"\"><summary>First steps</summary><ol><li><a href=\"/en-US/docs/Learn/Server-side/First_steps\">Server-side website programming first steps</a></li><li><a href=\"/en-US/docs/Learn/Server-side/First_steps/Introduction\">Introduction to the server side</a></li><li><em><a href=\"/en-US/docs/Learn/Server-side/First_steps/Client-Server_overview\" aria-current=\"page\">Client-Server Overview</a></em></li><li><a href=\"/en-US/docs/Learn/Server-side/First_steps/Web_frameworks\">Server-side web frameworks</a></li><li><a href=\"/en-US/docs/Learn/Server-side/First_steps/Website_security\">Website security</a></li></ol></details></li><li><details><summary>Django web framework (Python)</summary><ol><li><a href=\"/en-US/docs/Learn/Server-side/Django\">Django Web Framework (Python)</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Introduction\">Django introduction</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/development_environment\">Setting up a Django development environment</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Tutorial_local_library_website\">Django Tutorial: The Local Library website</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/skeleton_website\">Django Tutorial Part 2: Creating a skeleton website</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Models\">Django Tutorial Part 3: Using models</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Admin_site\">Django Tutorial Part 4: Django admin site</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Home_page\">Django Tutorial Part 5: Creating our home page</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Generic_views\">Django Tutorial Part 6: Generic list and detail views</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Sessions\">Django Tutorial Part 7: Sessions framework</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Authentication\">Django Tutorial Part 8: User authentication and permissions</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Forms\">Django Tutorial Part 9: Working with forms</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Testing\">Django Tutorial Part 10: Testing a Django web application</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/Deployment\">Django Tutorial Part 11: Deploying Django to production</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/web_application_security\">Django web application security</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Django/django_assessment_blog\">Assessment: DIY Django mini blog</a></li></ol></details></li><li><details><summary>Express Web Framework (Node.js/JavaScript)</summary><ol><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs\">Express web framework (Node.js/JavaScript)</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node introduction</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/development_environment\">Setting up a Node development environment</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express Tutorial: The Local Library website</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express Tutorial Part 2: Creating a skeleton website</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express Tutorial Part 3: Using a Database (with Mongoose)</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/routes\">Express Tutorial Part 4: Routes and controllers</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms\">Express Tutorial Part 6: Working with forms</a></li><li><a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/deployment\">Express Tutorial Part 7: Deploying to production</a></li></ol></details></li><li><a href=\"/en-US/docs/Learn/Common_questions\"><strong>Further resources</strong></a></li><li><details><summary>Common questions</summary><ol><li><a href=\"/en-US/docs/Learn/Common_questions\">Common questions</a></li><li><a href=\"/en-US/docs/Learn/HTML/Howto\">Use HTML to solve common problems</a></li><li><a href=\"/en-US/docs/Learn/CSS/Howto\">Use CSS to solve common problems</a></li><li><a href=\"/en-US/docs/Learn/JavaScript/Howto\">Solve common problems in your JavaScript code</a></li><li><a href=\"/en-US/docs/Learn/Common_questions/Web_mechanics\">Web mechanics</a></li><li><a href=\"/en-US/docs/Learn/Common_questions/Tools_and_setup\">Tools and setup</a></li><li><a href=\"/en-US/docs/Learn/Common_questions/Design_and_accessibility\">Design and accessibility</a></li></ol></details></li></ol>","sidebarMacro":"LearnSidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Learn/Server-side/First_steps/Introduction\"><span class=\"button-wrap\"> Previous </span></a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Learn/Server-side/First_steps\"><span class=\"button-wrap\"> Overview: First steps</span></a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Learn/Server-side/First_steps/Web_frameworks\"><span class=\"button-wrap\"> Next  </span></a></li>\n</ul>\n<p>Now that you know the purpose and potential benefits of server-side programming, we're going to examine in detail what happens when a server receives a \"dynamic request\" from a browser. As most website server-side code handles requests and responses in similar ways, this will help you understand what you need to do when writing most of your own code.</p>\n<figure class=\"table-container\"><table>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Prerequisites:</th>\n      <td>Basic computer literacy. A basic understanding of what a web server is.</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Objective:</th>\n      <td>\n        To understand client-server interactions in a dynamic website, and in\n        particular what operations need to be performed by server-side code.\n      </td>\n    </tr>\n  </tbody>\n</table></figure>\n<p>There is no real code in the discussion because we haven't yet chosen a web framework to use to write our code! This discussion is however still very relevant, because the described behavior must be implemented by your server-side code, irrespective of which programming language or web framework you select.</p>"}},{"type":"prose","value":{"id":"web_servers_and_http_a_primer","title":"Web servers and HTTP (a primer)","isH3":false,"content":"<p>Web browsers communicate with <a href=\"/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_web_server\">web servers</a> using the <strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol (<a href=\"/en-US/docs/Web/HTTP\">HTTP</a>). When you click a link on a web page, submit a form, or run a search, the browser sends an <em>HTTP Request</em> to the server.</p>\n<p>This request includes:</p>\n<ul>\n  <li>A URL identifying the target server and resource (e.g. an HTML file, a particular data point on the server, or a tool to run).</li>\n  <li>A method that defines the required action (for example, to get a file or to save or update some data). The different methods/verbs and their associated actions are listed below:\n    <ul>\n      <li><code>GET</code>: Get a specific resource (e.g. an HTML file containing information about a product, or a list of products).</li>\n      <li><code>POST</code>: Create a new resource (e.g. add a new article to a wiki, add a new contact to a database).</li>\n      <li><code>HEAD</code>: Get the metadata information about a specific resource without getting the body like <code>GET</code> would. You might for example use a <code>HEAD</code> request to find out the last time a resource was updated, and then only use the (more \"expensive\") <code>GET</code> request to download the resource if it has changed.</li>\n      <li><code>PUT</code>: Update an existing resource (or create a new one if it doesn't exist).</li>\n      <li><code>DELETE</code>: Delete the specified resource.</li>\n      <li><code>TRACE</code>, <code>OPTIONS</code>, <code>CONNECT</code>, <code>PATCH</code>: These verbs are for less common/advanced tasks, so we won't cover them here.</li>\n    </ul>\n  </li>\n  <li>Additional information can be encoded with the request (for example, HTML form data). Information can be encoded as:\n    <ul>\n      <li>URL parameters: <code>GET</code> requests encode data in the URL sent to the server by adding name/value pairs onto the end of it — for example <code>http://example.com?name=Fred&amp;age=11</code>. You always have a question mark (<code>?</code>) separating the rest of the URL from the URL parameters, an equals sign (<code>=</code>) separating each name from its associated value, and an ampersand (<code>&amp;</code>) separating each pair. URL parameters are inherently \"insecure\" as they can be changed by users and then resubmitted. As a result URL parameters/<code>GET</code> requests are not used for requests that update data on the server.</li>\n      <li><code>POST</code> data. <code>POST</code> requests add new resources, the data for which is encoded within the request body.</li>\n      <li>Client-side cookies. Cookies contain session data about the client, including keys that the server can use to determine their login status and permissions/accesses to resources.</li>\n    </ul>\n  </li>\n</ul>\n<p>Web servers wait for client request messages, process them when they arrive, and reply to the web browser with an HTTP Response message. The response contains an <a href=\"/en-US/docs/Web/HTTP/Status\">HTTP Response status code</a> indicating whether or not the request succeeded (e.g. \"<code>200 OK</code>\" for success, \"<code>404 Not Found</code>\" if the resource cannot be found, \"<code>403 Forbidden</code>\" if the user isn't authorized to see the resource, etc.). The body of a successful response to a <code>GET</code> request would contain the requested resource.</p>\n<p>When an HTML page is returned it is rendered by the web browser. As part of processing, the browser may discover links to other resources (e.g. an HTML page usually references JavaScript and CSS files), and will send separate HTTP Requests to download these files.</p>\n<p>Both static and dynamic websites (discussed in the following sections) use exactly the same communication protocol/patterns.</p>"}},{"type":"prose","value":{"id":"get_requestresponse_example","title":"GET request/response example","isH3":true,"content":"<p>You can make a simple <code>GET</code> request by clicking on a link or searching on a site (like a search engine homepage). For example, the HTTP request that is sent when you perform a search on MDN for the term \"client-server overview\" will look a lot like the text shown below (it will not be identical because parts of the message depend on your browser/setup).</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> The format of HTTP messages is defined in a \"web standard\" (<a href=\"https://httpwg.org/specs/rfc9110.html#messages\" class=\"external\" target=\"_blank\">RFC9110</a>). You don't need to know this level of detail, but at least now you know where this all came from!</p>\n</div>\n<h4 id=\"the_request\">The request</h4>\n<p>Each line of the request contains information about it. The first part is called the <strong>header</strong>, and contains useful information about the request, in the same way that an <a href=\"/en-US/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">HTML head</a> contains useful information about an HTML document (but not the actual content itself, which is in the body):</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">http</span></p><pre class=\"brush: http notranslate\"><code><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\"><span class=\"token path\"><span class=\"token path-separator\">/</span>en-US<span class=\"token path-separator\">/</span>search</span><span class=\"token query\"><span class=\"token query-delimiter\">?</span><span class=\"token pair\"><span class=\"token key\">q</span>=<span class=\"token value\">client+server+overview</span></span><span class=\"token pair-delimiter\">&amp;</span><span class=\"token pair\"><span class=\"token key\">topic</span>=<span class=\"token value\">apps</span></span><span class=\"token pair-delimiter\">&amp;</span><span class=\"token pair\"><span class=\"token key\">topic</span>=<span class=\"token value\">html</span></span><span class=\"token pair-delimiter\">&amp;</span><span class=\"token pair\"><span class=\"token key\">topic</span>=<span class=\"token value\">css</span></span><span class=\"token pair-delimiter\">&amp;</span><span class=\"token pair\"><span class=\"token key\">topic</span>=<span class=\"token value\">js</span></span><span class=\"token pair-delimiter\">&amp;</span><span class=\"token pair\"><span class=\"token key\">topic</span>=<span class=\"token value\">api</span></span><span class=\"token pair-delimiter\">&amp;</span><span class=\"token pair\"><span class=\"token key\">topic</span>=<span class=\"token value\">webdev</span></span></span></span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">developer.mozilla.org</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">keep-alive</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Pragma</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">no-cache</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cache-Control</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">no-cache</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Upgrade-Insecure-Requests</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Referer</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://developer.mozilla.org/en-US/</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate, sdch, br</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Charset</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">ISO-8859-1,UTF-8;q=0.7,*;q=0.7</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">en-US,en;q=0.8,es;q=0.6</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cookie</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">sessionid=6ynxs23n521lu21b1t136rhbv7ezngie; csrftoken=zIPUJsAZv6pcgCBJSCj1zU6pQZbfMUAT; dwf_section_edit=False; dwf_sg_task_completion=False; _gat=1; _ga=GA1.2.1688886003.1471911953; ffo=true</span></span>\n</code></pre></div>\n<p>The first and second lines contain most of the information we talked about above:</p>\n<ul>\n  <li>The type of request (<code>GET</code>).</li>\n  <li>The target resource URL (<code>/en-US/search</code>).</li>\n  <li>The URL parameters (<code>q=client%2Bserver%2Boverview&amp;topic=apps&amp;topic=html&amp;topic=css&amp;topic=js&amp;topic=api&amp;topic=webdev</code>).</li>\n  <li>The target/host website (developer.mozilla.org).</li>\n  <li>The end of the first line also includes a short string identifying the specific protocol version (<code>HTTP/1.1</code>).</li>\n</ul>\n<p>The final line contains information about the client-side cookies — you can see in this case the cookie includes an id for managing sessions (<code>Cookie: sessionid=6ynxs23n521lu21b1t136rhbv7ezngie; …</code>).</p>\n<p>\n  The remaining lines contain information about the browser used and the sort of responses it can handle.\n  For example, you can see here that:\n</p>\n<ul>\n  <li>My browser (<code>User-Agent</code>) is Mozilla Firefox (<code>Mozilla/5.0</code>).</li>\n  <li>It can accept gzip compressed information (<code>Accept-Encoding: gzip</code>).</li>\n  <li>It can accept the specified set of characters (<code>Accept-Charset: ISO-8859-1,UTF-8;q=0.7,*;q=0.7</code>) and languages (<code>Accept-Language: en-US,en;q=0.8,es;q=0.6</code>).</li>\n  <li>The <code>Referer</code> line indicates the address of the web page that contained the link to this resource (i.e. the origin of the request, <code>https://developer.mozilla.org/en-US/</code>).</li>\n</ul>\n<p>HTTP requests can also have a body, but it is empty in this case.</p>\n<h4 id=\"the_response\">The response</h4>\n<p>The first part of the response for this request is shown below. The header contains information like the following:</p>\n<ul>\n  <li>The first line includes the response code <code>200 OK</code>, which tells us that the request succeeded.</li>\n  <li>We can see that the response is <code>text/html</code> formatted (<code>Content-Type</code>).</li>\n  <li>We can also see that it uses the UTF-8 character set (<code>Content-Type: text/html; charset=utf-8</code>).</li>\n  <li>The head also tells us how big it is (<code>Content-Length: 41823</code>).</li>\n</ul>\n<p>At the end of the message we see the <strong>body</strong> content — which contains the actual HTML returned by the request.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">http</span></p><pre class=\"brush: http notranslate\"><code><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">200</span> <span class=\"token reason-phrase string\">OK</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Server</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Apache</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">X-Backend-Server</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">developer1.webapp.scl3.mozilla.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Vary</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Accept, Cookie, Accept-Encoding</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html; charset=utf-8</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Date</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Wed, 07 Sep 2016 00:11:31 GMT</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Keep-Alive</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">timeout=5, max=999</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Keep-Alive</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">X-Frame-Options</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">DENY</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Allow</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">GET</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">X-Cache-Info</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">caching</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">41823</span></span>\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en-US\" dir=\"ltr\" class=\"redesign no-js\"  data-ffo-opensanslight=false data-ffo-opensans=false &gt;\n&lt;head prefix=\"og: http://ogp.me/ns#\"&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\"&gt;\n  &lt;script&gt;(function(d) { d.className = d.className.replace(/\\bno-js/, ''); })(document.documentElement);&lt;/script&gt;\n  …\n</code></pre></div>\n<p>The remainder of the response header includes information about the response (e.g. when it was generated), the server, and how it expects the browser to handle the page (e.g. the <code>X-Frame-Options: DENY</code> line tells the browser not to allow this page to be embedded in an <a href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> in another site).</p>"}},{"type":"prose","value":{"id":"post_requestresponse_example","title":"POST request/response example","isH3":true,"content":"<p>An HTTP <code>POST</code> is made when you submit a form containing information to be saved on the server.</p>\n<h4 id=\"the_request_2\">The request</h4>\n<p>The text below shows the HTTP request made when a user submits new profile details on this site. The format of the request is almost the same as the <code>GET</code> request example shown previously, though the first line identifies this request as a <code>POST</code>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">http</span></p><pre class=\"brush: http notranslate\"><code><span class=\"token request-line\"><span class=\"token method property\">POST</span> <span class=\"token request-target url\"><span class=\"token path\"><span class=\"token path-separator\">/</span>en-US<span class=\"token path-separator\">/</span>profiles<span class=\"token path-separator\">/</span>hamishwillee<span class=\"token path-separator\">/</span>edit</span></span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">developer.mozilla.org</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">keep-alive</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">432</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Pragma</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">no-cache</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cache-Control</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">no-cache</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Origin</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://developer.mozilla.org</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Upgrade-Insecure-Requests</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/x-www-form-urlencoded</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Referer</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://developer.mozilla.org/en-US/profiles/hamishwillee/edit</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate, br</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">en-US,en;q=0.8,es;q=0.6</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cookie</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">sessionid=6ynxs23n521lu21b1t136rhbv7ezngie; _gat=1; csrftoken=zIPUJsAZv6pcgCBJSCj1zU6pQZbfMUAT; dwf_section_edit=False; dwf_sg_task_completion=False; _ga=GA1.2.1688886003.1471911953; ffo=true</span></span>\n\ncsrfmiddlewaretoken=zIPUJsAZv6pcgCBJSCj1zU6pQZbfMUAT&amp;user-username=hamishwillee&amp;user-fullname=Hamish+Willee&amp;user-title=&amp;user-organization=&amp;user-location=Australia&amp;user-locale=en-US&amp;user-timezone=Australia%2FMelbourne&amp;user-irc_nickname=&amp;user-interests=&amp;user-expertise=&amp;user-twitter_url=&amp;user-stackoverflow_url=&amp;user-linkedin_url=&amp;user-mozillians_url=&amp;user-facebook_url=\n</code></pre></div>\n<p>The main difference is that the URL doesn't have any parameters. As you can see, the information from the form is encoded in the body of the request (for example, the new user fullname is set using: <code>&amp;user-fullname=Hamish+Willee</code>).</p>\n<h4 id=\"the_response_2\">The response</h4>\n<p>The response from the request is shown below. The status code of \"<code>302 Found</code>\" tells the browser that the post succeeded, and that it must issue a second HTTP request to load the page specified in the <code>Location</code> field. The information is otherwise similar to that for the response to a <code>GET</code> request.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">http</span></p><pre class=\"brush: http notranslate\"><code><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">302</span> <span class=\"token reason-phrase string\">FOUND</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Server</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Apache</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">X-Backend-Server</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">developer3.webapp.scl3.mozilla.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Vary</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Cookie</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Vary</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Accept-Encoding</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html; charset=utf-8</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Date</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Wed, 07 Sep 2016 00:38:13 GMT</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Location</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://developer.mozilla.org/en-US/profiles/hamishwillee</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Keep-Alive</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">timeout=5, max=1000</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Keep-Alive</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">X-Frame-Options</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">DENY</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">X-Cache-Info</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">not cacheable; request wasn't a GET or HEAD</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">0</span></span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> The HTTP responses and requests shown in these examples were captured using the <a href=\"https://www.telerik.com/download/fiddler\" class=\"external\" target=\"_blank\">Fiddler</a> application, but you can get similar information using web sniffers (e.g. <a href=\"https://websniffer.cc/\" class=\"external\" target=\"_blank\">Websniffer</a>) or packet analyzers like <a href=\"https://www.wireshark.org/\" class=\"external\" target=\"_blank\">Wireshark</a>. You can try this yourself. Use any of the linked tools, and then navigate through a site and edit profile information to see the different requests and responses. Most modern browsers also have tools that monitor network requests (for example, the <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/network_monitor/index.html\" class=\"external\" target=\"_blank\">Network Monitor</a> tool in Firefox).</p>\n</div>"}},{"type":"prose","value":{"id":"static_sites","title":"Static sites","isH3":false,"content":"<p>A <em>static site</em> is one that returns the same hard coded content from the server whenever a particular resource is requested. So for example if you have a page about a product at <code>/static/myproduct1.html</code>, this same page will be returned to every user. If you add another similar product to your site you will need to add another page (e.g. <code>myproduct2.html</code>) and so on. This can start to get really inefficient — what happens when you get to thousands of product pages? You would repeat a lot of code across each page (the basic page template, structure, etc.), and if you wanted to change anything about the page structure — like add a new \"related products\" section for example — then you'd have to change every page individually.</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> Static sites are excellent when you have a small number of pages and you want to send the same content to every user. However they can have a significant cost to maintain as the number of pages becomes larger.</p>\n</div>\n<p>Let's recap on how this works, by looking again at the static site architecture diagram we looked at in the last article.</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/First_steps/Client-Server_overview/basic_static_app_server.png\" alt=\"A simplified diagram of a static web server.\" width=\"960\" height=\"267\" loading=\"lazy\">\n</p>\n<p>When a user wants to navigate to a page, the browser sends an HTTP <code>GET</code> request specifying the URL of its HTML page. The server retrieves the requested document from its file system and returns an HTTP response containing the document and an <a href=\"/en-US/docs/Web/HTTP/Status\">HTTP Response status code</a> of \"<code>200 OK</code>\" (indicating success). The server might return a different status code, for example \"<code>404 Not Found</code>\" if the file is not present on the server, or \"<code>301 Moved Permanently</code>\" if the file exists but has been redirected to a different location.</p>\n<p>The server for a static site will only ever need to process GET requests, because the server doesn't store any modifiable data. It also doesn't change its responses based on HTTP Request data (e.g. URL parameters or cookies).</p>\n<p>Understanding how static sites work is nevertheless useful when learning server-side programming, because dynamic sites handle requests for static files (CSS, JavaScript, static images, etc.) in exactly the same way.</p>"}},{"type":"prose","value":{"id":"dynamic_sites","title":"Dynamic sites","isH3":false,"content":"<p>A <em>dynamic site</em> is one that can generate and return content based on the specific request URL and data (rather than always returning the same hard-coded file for a particular URL). Using the example of a product site, the server would store product \"data\" in a database rather than individual HTML files. When receiving an HTTP <code>GET</code> Request for a product, the server determines the product ID, fetches the data from the database, and then constructs the HTML page for the response by inserting the data into an HTML template. This has major advantages over a static site:</p>\n<p>Using a database allows the product information to be stored efficiently in an easily extensible, modifiable, and searchable way.</p>\n<p>Using HTML templates makes it very easy to change the HTML structure, because this only needs to be done in one place, in a single template, and not across potentially thousands of static pages.</p>"}},{"type":"prose","value":{"id":"anatomy_of_a_dynamic_request","title":"Anatomy of a dynamic request","isH3":true,"content":"<p>This section provides a step-by-step overview of the \"dynamic\" HTTP request and response cycle, building on what we looked at in the last article with much more detail. In order to \"keep things real\" we'll use the context of a sports-team manager website where a coach can select their team name and team size in an HTML form and get back a suggested \"best lineup\" for their next game.</p>\n<p>The diagram below shows the main elements of the \"team coach\" website, along with numbered labels for the sequence of operations when the coach accesses their \"best team\" list. The parts of the site that make it dynamic are the <em>Web Application</em> (this is how we will refer to the server-side code that processes HTTP requests and returns HTTP responses), the <em>Database</em>, which contains information about players, teams, coaches and their relationships, and the <em>HTML Templates</em>.</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/First_steps/Client-Server_overview/web_application_with_html_and_steps.png\" alt=\"This is a diagram of a simple web server with step numbers for each of step of the client-server interaction.\" width=\"1226\" height=\"584\" loading=\"lazy\">\n</p>\n<p>After the coach submits the form with the team name and number of players, the sequence of operations is:</p>\n<ol>\n  <li>The web browser creates an HTTP <code>GET</code> request to the server using the base URL for the resource (<code>/best</code>) and encoding the team and player number either as URL parameters (e.g. <code>/best?team=my_team_name&amp;show=11</code>) or as part of the URL pattern (e.g. <code>/best/my_team_name/11/</code>). A <code>GET</code> request is used because the request is only fetching data (not modifying data).</li>\n  <li>The <em>Web Server</em> detects that the request is \"dynamic\" and forwards it to the <em>Web Application</em> for processing (the web server determines how to handle different URLs based on pattern matching rules defined in its configuration).</li>\n  <li>The <em>Web Application</em> identifies that the <em>intention</em> of the request is to get the \"best team list\" based on the URL (<code>/best/</code>) and finds out the required team name and number of players from the URL. The <em>Web Application</em> then gets the required information from the database (using additional \"internal\" parameters to define which players are \"best\", and possibly also getting the identity of the logged in coach from a client-side cookie).</li>\n  <li>The <em>Web Application</em> dynamically creates an HTML page by putting the data (from the <em>Database</em>) into placeholders inside an HTML template.</li>\n  <li>The <em>Web Application</em> returns the generated HTML to the web browser (via the <em>Web Server</em>), along with an HTTP status code of 200 (\"success\"). If anything prevents the HTML from being returned then the <em>Web Application</em> will return another code — for example \"404\" to indicate that the team does not exist.</li>\n  <li>The Web Browser will then start to process the returned HTML, sending separate requests to get any other CSS or JavaScript files that it references (see step 7).</li>\n  <li>The Web Server loads static files from the file system and returns them to the browser directly (again, correct file handling is based on configuration rules and URL pattern matching).</li>\n</ol>\n<p>An operation to update a record in the database would be handled similarly, except that like any database update, the HTTP request from the browser should be encoded as a <code>POST</code> request.</p>"}},{"type":"prose","value":{"id":"doing_other_work","title":"Doing other work","isH3":true,"content":"<p>A <em>Web Application's</em> job is to receive HTTP requests and return HTTP responses. While interacting with a database to get or update information are very common tasks, the code may do other things at the same time, or not interact with a database at all.</p>\n<p>A good example of an additional task that a <em>Web Application</em> might perform would be sending an email to users to confirm their registration with the site. The site might also perform logging or other operations.</p>"}},{"type":"prose","value":{"id":"returning_something_other_than_html","title":"Returning something other than HTML","isH3":true,"content":"<p>Server-side website code does not have to return HTML snippets/files in the response. It can instead dynamically create and return other types of files (text, PDF, CSV, etc.) or even data (JSON, XML, etc.).</p>\n<p>The idea of returning data to a web browser so that it can dynamically update its own content (<a href=\"/en-US/docs/Glossary/AJAX\">AJAX</a>) has been around for quite a while. More recently \"Single-page apps\" have become popular, where the whole website is written with a single HTML file that is dynamically updated when needed. Websites created using this style of application push a lot of computational cost from the server to the web browser, and can result in websites that appear to behave a lot more like native apps (highly responsive, etc.).</p>"}},{"type":"prose","value":{"id":"web_frameworks_simplify_server-side_web_programming","title":"Web frameworks simplify server-side web programming","isH3":false,"content":"<p>Server-side web frameworks make writing code to handle the operations described above much easier.</p>\n<p>One of the most important operations they perform is providing simple mechanisms to map URLs for different resources/pages to specific handler functions. This makes it easier to keep the code associated with each type of resource separate. It also has benefits in terms of maintenance, because you can change the URL used to deliver a particular feature in one place, without having to change the handler function.</p>\n<p>For example, consider the following Django (Python) code that maps two URL patterns to two view functions. The first pattern ensures that an HTTP request with a resource URL of <code>/best</code> will be passed to a function named <code>index()</code> in the <code>views</code> module. A request that has the pattern \"<code>/best/junior</code>\", will instead be passed to the <code>junior()</code> view function.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">python</span></p><pre class=\"brush: python notranslate\"><code><span class=\"token comment\"># file: best/urls.py</span>\n<span class=\"token comment\">#</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> url\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> views\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\"># example: /best/</span>\n    url<span class=\"token punctuation\">(</span><span class=\"token string\">r'^$'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># example: /best/junior/</span>\n    url<span class=\"token punctuation\">(</span><span class=\"token string\">r'^junior/$'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>junior<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> The first parameters in the <code>url()</code> functions may look a bit odd (e.g. <code>r'^junior/$'</code>) because they use a pattern matching technique called \"regular expressions\" (RegEx, or RE). You don't need to know how regular expressions work at this point, other than that they allow us to match patterns in the URL (rather than the hard coded values above) and use them as parameters in our view functions. As an example, a really simple RegEx might say \"match a single uppercase letter, followed by between 4 and 7 lower case letters.\"</p>\n</div>\n<p>The web framework also makes it easy for a view function to fetch information from the database. The structure of our data is defined in models, which are Python classes that define the fields to be stored in the underlying database. If we have a model named <em>Team</em> with a field of \"<em>team_type</em>\" then we can use a simple query syntax to get back all teams that have a particular type.</p>\n<p>The example below gets a list of all teams that have the exact (case sensitive) <code>team_type</code> of \"junior\" — note the format: field name (<code>team_type</code>) followed by double underscore, and then the type of match to use (in this case <code>exact</code>). There are many other types of matches and we can daisy chain them. We can also control the order and the number of results returned.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">python</span></p><pre class=\"brush: python notranslate\"><code><span class=\"token comment\">#best/views.py</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Team\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">junior</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    list_teams <span class=\"token operator\">=</span> Team<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>team_type__exact<span class=\"token operator\">=</span><span class=\"token string\">\"junior\"</span><span class=\"token punctuation\">)</span>\n    context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">:</span> list_teams<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'best/index.html'</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>After the <code>junior()</code> function gets the list of junior teams, it calls the <code>render()</code> function, passing the original <code>HttpRequest</code>, an HTML template, and a \"context\" object defining the information to be included in the template. The <code>render()</code> function is a convenience function that generates HTML using a context and an HTML template, and returns it in an <code>HttpResponse</code> object.</p>\n<p>Obviously web frameworks can help you with a lot of other tasks. We discuss a lot more benefits and some popular web framework choices in the next article.</p>"}},{"type":"prose","value":{"id":"summary","title":"Summary","isH3":false,"content":"<p>At this point you should have a good overview of the operations that server-side code has to perform, and know some of the ways in which a server-side web framework can make this easier.</p>\n<p>In a following module we'll help you choose the best Web Framework for your first site.</p><ul class=\"prev-next\">\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Learn/Server-side/First_steps/Introduction\"><span class=\"button-wrap\"> Previous </span></a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Learn/Server-side/First_steps\"><span class=\"button-wrap\"> Overview: First steps</span></a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Learn/Server-side/First_steps/Web_frameworks\"><span class=\"button-wrap\"> Next  </span></a></li>\n</ul>"}}],"toc":[{"text":"Web servers and HTTP (a primer)","id":"web_servers_and_http_a_primer"},{"text":"Static sites","id":"static_sites"},{"text":"Dynamic sites","id":"dynamic_sites"},{"text":"Web frameworks simplify server-side web programming","id":"web_frameworks_simplify_server-side_web_programming"},{"text":"Summary","id":"summary"}],"summary":"At this point you should have a good overview of the operations that server-side code has to perform, and know some of the ways in which a server-side web framework can make this easier.","popularity":0.0178,"modified":"2023-07-03T10:12:35.000Z","source":{"folder":"en-us/learn/server-side/first_steps/client-server_overview","github_url":"https://github.com/mdn/content/blob/main/files/en-us/learn/server-side/first_steps/client-server_overview/index.md","last_commit_url":"https://github.com/mdn/content/commit/bb026bcb88b7f45374d602301b7b0db5a49ff303","filename":"index.md"},"short_title":"Client-Server Overview","parents":[{"uri":"/en-US/docs/Learn","title":"Guides"},{"uri":"/en-US/docs/Learn/Server-side","title":"Server-side website programming"},{"uri":"/en-US/docs/Learn/Server-side/First_steps","title":"Server-side website programming first steps"},{"uri":"/en-US/docs/Learn/Server-side/First_steps/Client-Server_overview","title":"Client-Server Overview"}],"pageTitle":"Client-Server Overview - Learn web development | MDN","noIndexing":false}}