{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Template primer","mdn_url":"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Template_primer","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>A template is a text file defining the <em>structure</em> or layout of an output file, with placeholders used to represent where data will be inserted when the template is rendered (in <em>Express</em>, templates are referred to as <em>views</em>).</p>"}},{"type":"prose","value":{"id":"express_template_choices","title":"Express template choices","isH3":false,"content":"<p>Express can be used with many different <a href=\"https://expressjs.com/en/guide/using-template-engines.html\" class=\"external\" target=\"_blank\">template rendering engines</a>. In this tutorial we use <a href=\"https://pugjs.org/api/getting-started.html\" class=\"external\" target=\"_blank\">Pug</a> (formerly known as <em>Jade</em>) for our templates. This is the most popular Node template language, and describes itself as a \"clean, whitespace-sensitive syntax for writing HTML, heavily influenced by <a href=\"https://haml.info/\" class=\"external\" target=\"_blank\">Haml</a>\".</p>\n<p>Different template languages use different approaches for defining layout and marking placeholders for dataâ€”some use HTML to define the layout while others use different markup formats that can be transpiled to HTML. Pug is of the second type; it uses a <em>representation</em> of HTML where the first word in any line usually represents an HTML element, and indentation on subsequent lines is used to represent nesting. The result is a page definition that translates directly to HTML, but is more concise and arguably easier to read.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> The downside of using <em>Pug</em> is that it is sensitive to indentation and whitespace (if you add an extra space in the wrong place you may get an unhelpful error code). Once you have your templates in place, however, they are very easy to read and maintain.</p>\n</div>"}},{"type":"prose","value":{"id":"template_configuration","title":"Template configuration","isH3":false,"content":"<p>The <em>LocalLibrary</em> was configured to use <a href=\"https://pugjs.org/api/getting-started.html\" class=\"external\" target=\"_blank\">Pug</a> when we <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">created the skeleton website</a>. You should see the pug module included as a dependency in the website's <strong>package.json</strong> file, and the following configuration settings in the <strong>app.js</strong> file. The settings tell us that we're using pug as the view engine, and that <em>Express</em> should search for templates in the <strong>/views</strong> subdirectory.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// View engine setup</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"views\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"views\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  If you look in the views directory you will see the .pug files for the project's default views.\n  These include the view for the home page (<strong>index.pug</strong>) and base template (<strong>layout.pug</strong>) that we will need to replace with our own content.\n</p>\n<pre class=\"brush: plain notranslate\">/express-locallibrary-tutorial  //the project root\n  /views\n    error.pug\n    index.pug\n    layout.pug\n</pre>"}},{"type":"prose","value":{"id":"template_syntax","title":"Template syntax","isH3":false,"content":"<p>The example template file below shows off many of Pug's most useful features.</p>\n<p>The first thing to notice is that the file maps the structure of a typical HTML file, with the first word in (almost) every line being an HTML element, and indentation being used to indicate nested elements. So for example, the <code>body</code> element is inside an <code>html</code> element, and paragraph elements (<code>p</code>) are within the <code>body</code> element, etc. Non-nested elements (e.g. individual paragraphs) are on separate lines.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">pug</span></p><pre class=\"brush: pug notranslate\"><code><span class=\"token doctype\">doctype html</span>\n<span class=\"token tag\">html<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">lang</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">\"en\"</span></span><span class=\"token punctuation\">)</span></span></span>\n  <span class=\"token tag\">head</span>\n    <span class=\"token tag\">title</span><span class=\"token punctuation\">=</span><span class=\"token code\"> title</span>\n    <span class=\"token tag\">script<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">type</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'text/javascript'</span></span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">.</span>\n  <span class=\"token tag\">body</span>\n    <span class=\"token tag\">h1</span><span class=\"token punctuation\">=</span><span class=\"token code\"> title</span>\n\n    <span class=\"token tag\">p</span> <span class=\"token plain-text\">This is a line with #[em some emphasis] and #[strong strong text] markup.</span>\n    <span class=\"token tag\">p</span> <span class=\"token plain-text\">This line has un-escaped data: !{'&lt;em&gt; is emphasized&lt;/em&gt;'} and escaped data: #{'&lt;em&gt; is not emphasized&lt;/em&gt;'}.</span>\n      <span class=\"token punctuation\">|</span> This line follows on<span class=\"token punctuation\">.</span>\n    <span class=\"token tag\">p</span><span class=\"token punctuation\">=</span><span class=\"token code\"> <span class=\"token string\">'Evaluated and &lt;em&gt;escaped expression&lt;/em&gt;:'</span> <span class=\"token operator\">+</span> title</span>\n\n    <span class=\"token markup\"><span class=\"token comment\">&lt;!-- You can add HTML comments directly --&gt;</span></span>\n    <span class=\"token comment\">// You can add single line JavaScript comments and they are generated to HTML comments</span>\n    <span class=\"token comment\">//- Introducing a single line JavaScript comment with \"//-\" ensures the comment isn't rendered to HTML</span>\n\n    <span class=\"token tag\">p</span> <span class=\"token plain-text\">A line with a link</span>\n      <span class=\"token tag\">a<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">href</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'/catalog/authors'</span></span><span class=\"token punctuation\">)</span></span></span> <span class=\"token plain-text\">Some link text</span>\n      <span class=\"token punctuation\">|</span>  and some extra text<span class=\"token punctuation\">.</span>\n\n    <span class=\"token tag\"><span class=\"token attr-id\">#container</span><span class=\"token attr-class\">.col</span></span>\n      <span class=\"token flow-control\"><span class=\"token branch keyword\">if</span> title</span>\n        <span class=\"token tag\">p</span> <span class=\"token plain-text\">A variable named \"title\" exists.</span>\n      <span class=\"token flow-control\"><span class=\"token branch keyword\">else</span></span>\n        <span class=\"token tag\">p</span> <span class=\"token plain-text\">A variable named \"title\" does not exist.</span>\n      <span class=\"token tag\">p</span><span class=\"token punctuation\">.</span><span class=\"token multiline-plain-text\">\n        Pug is a terse and simple template language with a\n        strong focus on performance and powerful features.\n</span>\n    <span class=\"token tag\">h2</span> <span class=\"token plain-text\">Generate a list</span>\n\n    <span class=\"token tag\">ul</span>\n      <span class=\"token flow-control\"><span class=\"token each\"><span class=\"token keyword\">each</span> val <span class=\"token keyword\">in</span></span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></span>\n        <span class=\"token tag\">li</span><span class=\"token punctuation\">=</span><span class=\"token code\"> val</span>\n</code></pre></div>\n<p>Element attributes are defined in parentheses after their associated element. Inside the parentheses, the attributes are defined in comma- or whitespace- separated lists of the pairs of attribute names and attribute values, for example:</p>\n<ul>\n  <li><code>script(type='text/javascript')</code>, <code>link(rel='stylesheet', href='/stylesheets/style.css')</code></li>\n  <li><code>meta(name='viewport' content='width=device-width initial-scale=1')</code></li>\n</ul>\n<p>The values of all attributes are <em>escaped</em> (e.g. characters like \"<code>&gt;</code>\" are converted to their HTML code equivalents like \"<code>&amp;gt;\"</code>) to prevent JavaScript injection or cross-site scripting attacks.</p>\n<p>If a tag is followed by the equals sign, the following text is treated as a JavaScript <em>expression</em>. So for example, in the first line below, the content of the <code>h1</code> tag will be <em>variable</em> <code>title</code> (either defined in the file or passed into the template from Express). In the second line the paragraph content is a text string concatenated with the <code>title</code> variable. In both cases the default behavior is to <em>escape</em> the line.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">pug</span></p><pre class=\"brush: pug notranslate\"><code><span class=\"token tag\">h1</span><span class=\"token punctuation\">=</span><span class=\"token code\"> title</span>\n<span class=\"token tag\">p</span><span class=\"token punctuation\">=</span><span class=\"token code\"> <span class=\"token string\">'Evaluated and &lt;em&gt;escaped expression&lt;/em&gt;:'</span> <span class=\"token operator\">+</span> title</span>\n</code></pre></div>\n<p>If there is no equals symbol after the tag then the content is treated as plain text. Within the plain text you can insert escaped and unescaped data using the <code>#{}</code> and <code>!{}</code> syntax respectively, as shown below. You can also add raw HTML within the plain text.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">pug</span></p><pre class=\"brush: pug notranslate\"><code><span class=\"token tag\">p</span> <span class=\"token plain-text\">This is a line with #[em some emphasis] and #[strong strong text] markup.</span>\n<span class=\"token tag\">p</span> <span class=\"token plain-text\">This line has an un-escaped string: !{'&lt;em&gt; is emphasized&lt;/em&gt;'}, an escaped string: #{'&lt;em&gt; is not emphasized&lt;/em&gt;'}, and escaped variables: #{title}.</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> You will almost always want to escape data from users (via the <strong><code>#{}</code></strong> syntax). Data that can be trusted (e.g. generated counts of records, etc.) may be displayed without escaping the values.</p>\n</div>\n<p>You can use the pipe ('<strong>|</strong>') character at the beginning of a line to indicate \"<a href=\"https://pugjs.org/language/plain-text.html\" class=\"external\" target=\"_blank\">plain text</a>\". For example, the additional text shown below will be displayed on the same line as the preceding anchor, but will not be linked.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">pug</span></p><pre class=\"brush: pug notranslate\"><code><span class=\"token tag\">a<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">href</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'http://someurl/'</span></span><span class=\"token punctuation\">)</span></span></span> <span class=\"token plain-text\">Link text</span>\n<span class=\"token punctuation\">|</span> Plain text\n</code></pre></div>\n<p>Pug allows you to perform conditional operations using <code>if</code>, <code>else</code>, <code>else if</code> and <code>unless</code> â€” for example:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">pug</span></p><pre class=\"brush: pug notranslate\"><code><span class=\"token flow-control\"><span class=\"token branch keyword\">if</span> title</span>\n  <span class=\"token tag\">p</span> <span class=\"token plain-text\">A variable named \"title\" exists</span>\n<span class=\"token flow-control\"><span class=\"token branch keyword\">else</span></span>\n  <span class=\"token tag\">p</span> <span class=\"token plain-text\">A variable named \"title\" does not exist</span>\n</code></pre></div>\n<p>You can also perform loop/iteration operations using <code>each-in</code> or <code>while</code> syntax. In the code fragment below we've looped through an array to display a list of variables (note the use of the 'li=' to evaluate the \"val\" as a variable below. The value you iterate across can also be passed into the template as a variable!</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">pug</span></p><pre class=\"brush: pug notranslate\"><code><span class=\"token tag\">ul</span>\n  <span class=\"token flow-control\"><span class=\"token each\"><span class=\"token keyword\">each</span> val <span class=\"token keyword\">in</span></span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></span>\n    <span class=\"token tag\">li</span><span class=\"token punctuation\">=</span><span class=\"token code\"> val</span>\n</code></pre></div>\n<p>The syntax also supports comments (that can be rendered in the outputâ€”or notâ€”as you choose), mixins to create reusable blocks of code, case statements, and many other features. For more detailed information see <a href=\"https://pugjs.org/api/getting-started.html\" class=\"external\" target=\"_blank\">The Pug docs</a>.</p>"}},{"type":"prose","value":{"id":"extending_templates","title":"Extending templates","isH3":false,"content":"<p>Across a site, it is usual for all pages to have a common structure, including standard HTML markup for the head, footer, navigation, etc. Rather than forcing developers to duplicate this \"boilerplate\" in every page, <em>Pug</em> allows you to declare a base template and then extend it, replacing just the bits that are different for each specific page.</p>\n<p>For example, the base template <strong>layout.pug</strong> created in our <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">skeleton project</a> looks like this:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">pug</span></p><pre class=\"brush: pug notranslate\"><code><span class=\"token doctype\">doctype html</span>\n<span class=\"token tag\">html</span>\n  <span class=\"token tag\">head</span>\n    <span class=\"token tag\">title</span><span class=\"token punctuation\">=</span><span class=\"token code\"> title</span>\n    <span class=\"token tag\">link<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">rel</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'stylesheet'</span></span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">href</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'/stylesheets/style.css'</span></span><span class=\"token punctuation\">)</span></span></span>\n  <span class=\"token tag\">body</span>\n    <span class=\"token keyword\">block content</span>\n</code></pre></div>\n<p>The <code>block</code> tag is used to mark up sections of content that may be replaced in a derived template (if the block is not redefined then its implementation in the base class is used).</p>\n<p>The default <strong>index.pug</strong> (created for our skeleton project) shows how we override the base template. The <code>extends</code> tag identifies the base template to use, and then we use <code>block section_name</code> to indicate the new content of the section that we will override.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">pug</span></p><pre class=\"brush: pug notranslate\"><code><span class=\"token keyword\">extends layout</span>\n\n<span class=\"token keyword\">block content</span>\n  <span class=\"token tag\">h1</span><span class=\"token punctuation\">=</span><span class=\"token code\"> title</span>\n  <span class=\"token tag\">p</span> <span class=\"token plain-text\">Welcome to #{title}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"next_steps","title":"Next steps","isH3":false,"content":"<ul>\n  <li>Return to <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a>.</li>\n  <li>Proceed to the next subarticle of part 5: <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/LocalLibrary_base_template\">The LocalLibrary base template</a>.</li>\n</ul>"}}],"toc":[{"text":"Express template choices","id":"express_template_choices"},{"text":"Template configuration","id":"template_configuration"},{"text":"Template syntax","id":"template_syntax"},{"text":"Extending templates","id":"extending_templates"},{"text":"Next steps","id":"next_steps"}],"summary":"A template is a text file defining the structure or layout of an output file, with placeholders used to represent where data will be inserted when the template is rendered (in Express, templates are referred to as views).","popularity":0.0037,"modified":"2023-07-03T10:12:35.000Z","source":{"folder":"en-us/learn/server-side/express_nodejs/displaying_data/template_primer","github_url":"https://github.com/mdn/content/blob/main/files/en-us/learn/server-side/express_nodejs/displaying_data/template_primer/index.md","last_commit_url":"https://github.com/mdn/content/commit/bb026bcb88b7f45374d602301b7b0db5a49ff303","filename":"index.md"},"short_title":"Template primer","parents":[{"uri":"/en-US/docs/Learn","title":"Guides"},{"uri":"/en-US/docs/Learn/Server-side","title":"Server-side website programming"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs","title":"Express web framework (Node.js/JavaScript)"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Express Tutorial Part 5: Displaying library data"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Template_primer","title":"Template primer"}],"pageTitle":"Template primer - Learn web development | MDN","noIndexing":false}}