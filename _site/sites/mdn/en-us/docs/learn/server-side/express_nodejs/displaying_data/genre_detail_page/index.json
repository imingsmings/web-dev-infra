{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Genre detail page","mdn_url":"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Genre_detail_page","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The genre <em>detail</em> page needs to display the information for a particular genre instance, using its automatically generated <code>_id</code> field value as the identifier.\n  The ID of the required genre record is encoded at the end of the URL and extracted automatically based on the route definition (<strong>/genre/:id</strong>).\n  It is then accessed within the controller via the request parameters: <code>req.params.id</code>.\n</p>\n<p>The page should display the genre name and a list of all books in the genre with links to each book's details page.</p>"}},{"type":"prose","value":{"id":"controller","title":"Controller","isH3":false,"content":"<p>Open <strong>/controllers/genreController.js</strong> and require the <code>Book</code> module at the top of the file (the file should already <code>require()</code> the <code>Genre</code> module and \"express-async-handler\").</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> Book <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../models/book\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Find the exported <code>genre_detail()</code> controller method and replace it with the following code.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Display detail page for a specific Genre.</span>\nexports<span class=\"token punctuation\">.</span>genre_detail <span class=\"token operator\">=</span> <span class=\"token function\">asyncHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Get details of genre and all associated books (in parallel)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>genre<span class=\"token punctuation\">,</span> booksInGenre<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    Genre<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Book<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">genre</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"title summary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>genre <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// No results.</span>\n    <span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Genre not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    err<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"genre_detail\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Genre Detail\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">genre</span><span class=\"token operator\">:</span> genre<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">genre_books</span><span class=\"token operator\">:</span> booksInGenre<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  We first use <code>Genre.findById()</code> to get Genre information for a specific ID, and <code>Book.find()</code> to get all books records that have that same associated genre ID.\n  Because the two requests do not depend on each other, we use <code>Promise.all()</code> to run the database queries in parallel (this same approach for running queries in parallel was demonstrated in the <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Home_page#controller\">home page</a>).\n</p>\n<p>\n  We <code>await</code> on the returned promise, and once it settles we check the results.\n  If the genre does not exist in the database (i.e. it may have been deleted) then <code>findById()</code> will return successfully with no results.\n  In this case we want to display a \"not found\" page, so we create an <code>Error</code> object and pass it to the <code>next</code> middleware function in the chain.\n</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Errors passed to the <code>next</code> middleware function propagate through to our error handling code (this was set up when we <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#app.js\">generated the app skeleton</a> - for more information see <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction#handling_errors\">Handling Errors</a>).</p>\n</div>\n<p>\n  If the <code>genre</code> is found, then we call <code>render()</code> to display the view.\n  The view template is <strong>genre_detail</strong> (.pug).\n  The values for the title, <code>genre</code> and <code>booksInGenre</code> are passed into the template using the corresponding keys (<code>title</code>, <code>genre</code> and <code>genre_books</code>).\n</p>"}},{"type":"prose","value":{"id":"view","title":"View","isH3":false,"content":"<p>Create <strong>/views/genre_detail.pug</strong> and fill it with the text below:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">pug</span></p><pre class=\"brush: pug notranslate\"><code><span class=\"token keyword\">extends layout</span>\n\n<span class=\"token keyword\">block content</span>\n\n  <span class=\"token tag\">h1</span> <span class=\"token plain-text\">Genre: #{genre.name}</span>\n\n  <span class=\"token tag\">div<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">style</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'margin-left:20px;margin-top:20px'</span></span><span class=\"token punctuation\">)</span></span></span>\n\n    <span class=\"token tag\">h4</span> <span class=\"token plain-text\">Books</span>\n\n    <span class=\"token tag\">dl</span>\n      <span class=\"token flow-control\"><span class=\"token each\"><span class=\"token keyword\">each</span> book <span class=\"token keyword\">in</span></span> genre_books</span>\n        <span class=\"token tag\">dt</span>\n          <span class=\"token tag\">a<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">href</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">book<span class=\"token punctuation\">.</span>url</span><span class=\"token punctuation\">)</span></span></span> <span class=\"token plain-text\">#{book.title}</span>\n        <span class=\"token tag\">dd</span> <span class=\"token plain-text\">#{book.summary}</span>\n\n      <span class=\"token flow-control\"><span class=\"token branch keyword\">else</span></span>\n        <span class=\"token tag\">p</span> <span class=\"token plain-text\">This genre has no books</span>\n</code></pre></div>\n<p>The view is very similar to all our other templates. The main difference is that we don't use the <code>title</code> passed in for the first heading (though it is used in the underlying <strong>layout.pug</strong> template to set the page title).</p>"}},{"type":"prose","value":{"id":"what_does_it_look_like","title":"What does it look like?","isH3":false,"content":"<p>Run the application and open your browser to <code>http://localhost:3000/</code>. Select the <em>All genres</em> link, then select one of the genres (e.g. \"Fantasy\"). If everything is set up correctly, your page should look something like the following screenshot.</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Genre_detail_page/locallibary_express_genre_detail.png\" alt=\"Genre Detail Page - Express Local Library site\" width=\"1167\" height=\"610\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> You might get an error similar to the one below if <code>req.params.id</code> (or any other ID) cannot be cast to a <a href=\"https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.Types\" class=\"external\" target=\"_blank\"><code>mongoose.Types.ObjectId()</code></a>.</p>\n  <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">bash</span></p><pre class=\"brush: bash notranslate\"><code>Cast to ObjectId failed <span class=\"token keyword\">for</span> value <span class=\"token string\">\" 59347139895ea23f9430ecbb\"</span> at path <span class=\"token string\">\"_id\"</span> <span class=\"token keyword\">for</span> model <span class=\"token string\">\"Genre\"</span>\n</code></pre></div>\n  <p>\n    The most likely cause is that the ID being passed into the mongoose methods is not actually an ID.\n    <a href=\"https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.isValidObjectId()\" class=\"external\" target=\"_blank\"><code>Mongoose.prototype.isValidObjectId()</code></a> can be used to check whether a particular ID is valid.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"next_steps","title":"Next steps","isH3":false,"content":"<ul>\n  <li>Return to <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a>.</li>\n  <li>Proceed to the next subarticle of part 5: <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Book_detail_page\">Book detail page</a>.</li>\n</ul>"}}],"toc":[{"text":"Controller","id":"controller"},{"text":"View","id":"view"},{"text":"What does it look like?","id":"what_does_it_look_like"},{"text":"Next steps","id":"next_steps"}],"summary":"The genre detail page needs to display the information for a particular genre instance, using its automatically generated _id field value as the identifier.\n  The ID of the required genre record is encoded at the end of the URL and extracted automatically based on the route definition (/genre/:id).\n  It is then accessed within the controller via the request parameters: req.params.id.","popularity":0.0022,"modified":"2023-10-25T08:58:35.000Z","source":{"folder":"en-us/learn/server-side/express_nodejs/displaying_data/genre_detail_page","github_url":"https://github.com/mdn/content/blob/main/files/en-us/learn/server-side/express_nodejs/displaying_data/genre_detail_page/index.md","last_commit_url":"https://github.com/mdn/content/commit/da011b3e8423dd31ea759c9d4257547f5817f658","filename":"index.md"},"short_title":"Genre detail page","parents":[{"uri":"/en-US/docs/Learn","title":"Guides"},{"uri":"/en-US/docs/Learn/Server-side","title":"Server-side website programming"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs","title":"Express web framework (Node.js/JavaScript)"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Express Tutorial Part 5: Displaying library data"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Genre_detail_page","title":"Genre detail page"}],"pageTitle":"Genre detail page - Learn web development | MDN","noIndexing":false}}