{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Create genre form","mdn_url":"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Create_genre_form","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>This sub article shows how we define our page to create <code>Genre</code> objects (this is a good place to start because the <code>Genre</code> has only one field, its <code>name</code>, and no dependencies). Like any other pages, we need to set up routes, controllers, and views.</p>"}},{"type":"prose","value":{"id":"import_validation_and_sanitization_methods","title":"Import validation and sanitization methods","isH3":false,"content":"<p>To use the <em>express-validator</em> in our controllers we have to <em>require</em> the functions we want to use from the <code>'express-validator'</code> module.</p>\n<p>Open <strong>/controllers/genreController.js</strong>, and add the following line at the top of the file, before any route handler functions:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> body<span class=\"token punctuation\">,</span> validationResult <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express-validator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> This syntax allows us to use <code>body</code> and <code>validationResult</code> as the associated middleware functions, as you will see in the post route section below. It is equivalent to:</p>\n  <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> validator <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express-validator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> validator<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> validationResult <span class=\"token operator\">=</span> validator<span class=\"token punctuation\">.</span>validationResult<span class=\"token punctuation\">;</span>\n</code></pre></div>\n</div>"}},{"type":"prose","value":{"id":"controller—get_route","title":"Controller—get route","isH3":false,"content":"<p>\n  Find the exported <code>genre_create_get()</code> controller method and replace it with the following code.\n  This renders the <strong>genre_form.pug</strong> view, passing a title variable.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Display Genre create form on GET.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">genre_create_get</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"genre_form\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Create Genre\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  Note that this replaces the placeholder asynchronous handler that we added in the <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/routes#genre_controller\">Express Tutorial Part 4: Routes and controllers</a> with a \"normal\" express route handler function.\n  We don't need the <code>asyncHandler()</code> wrapper for this route, because it doesn't contain any code that can throw an exception.\n</p>"}},{"type":"prose","value":{"id":"controller—post_route","title":"Controller—post route","isH3":false,"content":"<p>Find the exported <code>genre_create_post()</code> controller method and replace it with the following code.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Handle Genre create on POST.</span>\nexports<span class=\"token punctuation\">.</span>genre_create_post <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// Validate and sanitize the name field.</span>\n  <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Genre name must contain at least 3 characters\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">isLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Process request after validation and sanitization.</span>\n  <span class=\"token function\">asyncHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Extract the validation errors from a request.</span>\n    <span class=\"token keyword\">const</span> errors <span class=\"token operator\">=</span> <span class=\"token function\">validationResult</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Create a genre object with escaped and trimmed data.</span>\n    <span class=\"token keyword\">const</span> genre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Genre</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// There are errors. Render the form again with sanitized values/error messages.</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"genre_form\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Create Genre\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">genre</span><span class=\"token operator\">:</span> genre<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">errors</span><span class=\"token operator\">:</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Data from form is valid.</span>\n      <span class=\"token comment\">// Check if Genre with same name already exists.</span>\n      <span class=\"token keyword\">const</span> genreExists <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Genre<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>genreExists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Genre exists, redirect to its detail page.</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>genreExists<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> genre<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// New genre saved. Redirect to genre detail page.</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>genre<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  The first thing to note is that instead of being a single middleware function (with arguments <code>(req, res, next)</code>) the controller specifies an <em>array</em> of middleware functions.\n  The array is passed to the router function and each method is called in order.\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> This approach is needed, because the validators are middleware functions.</p>\n</div>\n<p>The first method in the array defines a body validator (<code>body()</code>) that validates and sanitizes the field. This uses <code>trim()</code> to remove any trailing/leading whitespace, checks that the <em>name</em> field is not empty, and then uses <code>escape()</code> to remove any dangerous HTML characters).</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// Validate that the name field is not empty.</span>\n  <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Genre name must contain at least 3 characters\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">isLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>After specifying the validators we create a middleware function to extract any validation errors. We use <code>isEmpty()</code> to check whether there are any errors in the validation result. If there are then we render the form again, passing in our sanitized genre object and the array of error messages (<code>errors.array()</code>).</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Process request after validation and sanitization.</span>\n<span class=\"token function\">asyncHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Extract the validation errors from a request.</span>\n  <span class=\"token keyword\">const</span> errors <span class=\"token operator\">=</span> <span class=\"token function\">validationResult</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create a genre object with escaped and trimmed data.</span>\n  <span class=\"token keyword\">const</span> genre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Genre</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// There are errors. Render the form again with sanitized values/error messages.</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"genre_form\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Create Genre\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">genre</span><span class=\"token operator\">:</span> genre<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">errors</span><span class=\"token operator\">:</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Data from form is valid.</span>\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  If the genre name data is valid then we perform a case-insensitive search to see if a <code>Genre</code> with the same name already exists (as we don't want to create duplicate or near duplicate records that vary only in letter case, such as: \"Fantasy\", \"fantasy\", \"FaNtAsY\", and so on).\n  To ignore letter case and accents when searching we chain the <a href=\"https://mongoosejs.com/docs/api/query.html#Query.prototype.collation()\" class=\"external\" target=\"_blank\"><code>collation()</code></a> method, specifying the locale of 'en' and strength of 2 (for more information see the MongoDB <a href=\"https://www.mongodb.com/docs/manual/reference/collation/\" class=\"external\" target=\"_blank\">Collation</a> topic).\n</p>\n<p>\n  If a <code>Genre</code> with a matching name already exists we redirect to its detail page.\n  If not, we save the new <code>Genre</code> and redirect to its detail page.\n  Note that here we <code>await</code> on the result of the database query, following the same pattern as in other route handlers.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Check if Genre with same name already exists.</span>\n<span class=\"token keyword\">const</span> genreExists <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Genre<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">collation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">locale</span><span class=\"token operator\">:</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">strength</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>genreExists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Genre exists, redirect to its detail page.</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>genreExists<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> genre<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// New genre saved. Redirect to genre detail page.</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>genre<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>This same pattern is used in all our post controllers: we run validators (with sanitizers), then check for errors and either re-render the form with error information or save the data.</p>"}},{"type":"prose","value":{"id":"view","title":"View","isH3":false,"content":"<p>\n  The same view is rendered in both the <code>GET</code> and <code>POST</code> controllers/routes when we create a new <code>Genre</code> (and later on it is also used when we <em>update</em> a <code>Genre</code>). In the <code>GET</code> case the form is empty, and we just pass a title variable. In the <code>POST</code> case the user has previously entered invalid data—in the <code>genre</code> variable we pass back a sanitized version of the entered data and in the <code>errors</code> variable we pass back an array of error messages.\n  The code below shows the controller code for rendering the template in both cases.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Render the GET route</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"genre_form\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Create Genre\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Render the POST route</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"genre_form\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Create Genre\"</span><span class=\"token punctuation\">,</span>\n  genre<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">errors</span><span class=\"token operator\">:</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Create <strong>/views/genre_form.pug</strong> and copy in the text below.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">pug</span></p><pre class=\"brush: pug notranslate\"><code><span class=\"token keyword\">extends layout</span>\n\n<span class=\"token keyword\">block content</span>\n\n  <span class=\"token tag\">h1</span> <span class=\"token plain-text\">#{title}</span>\n\n  <span class=\"token tag\">form<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">method</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'POST'</span> action<span class=\"token operator\">=</span><span class=\"token string\">''</span></span><span class=\"token punctuation\">)</span></span></span>\n    <span class=\"token tag\">div<span class=\"token attr-class\">.form-group</span></span>\n      <span class=\"token tag\">label<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">for</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'name'</span></span><span class=\"token punctuation\">)</span></span></span> <span class=\"token plain-text\">Genre:</span>\n      <span class=\"token tag\">input<span class=\"token attr-id\">#name</span><span class=\"token attr-class\">.form-control</span><span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">type</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'text'</span></span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">placeholder</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">'Fantasy</span><span class=\"token punctuation\">,</span> Poetry etc.' <span class=\"token attr-name\">name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'name'</span> required<span class=\"token operator\">=</span><span class=\"token string\">'true'</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token operator\">===</span>genre <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> genre<span class=\"token punctuation\">.</span>name</span><span class=\"token punctuation\">)</span></span></span> <span class=\"token plain-text\">)</span>\n    <span class=\"token tag\">button<span class=\"token attr-class\">.btn</span><span class=\"token attr-class\">.btn-primary</span><span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">type</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'submit'</span></span><span class=\"token punctuation\">)</span></span></span> <span class=\"token plain-text\">Submit</span>\n\n  <span class=\"token flow-control\"><span class=\"token branch keyword\">if</span> errors</span>\n    <span class=\"token tag\">ul</span>\n      <span class=\"token tag\">for</span> <span class=\"token plain-text\">error in errors</span>\n        <span class=\"token tag\">li</span><span class=\"token punctuation\">!=</span><span class=\"token code\"> error<span class=\"token punctuation\">.</span>msg</span>\n</code></pre></div>\n<p>Much of this template will be familiar from our previous tutorials. First, we extend the <strong>layout.pug</strong> base template and override the <code>block</code> named '<strong>content</strong>'. We then have a heading with the <code>title</code> we passed in from the controller (via the <code>render()</code> method).</p>\n<p>Next, we have the pug code for our HTML form that uses <code>method=\"POST\"</code> to send the data to the server, and because the <code>action</code> is an empty string, will send the data to the same URL as the page.</p>\n<p>The form defines a single required field of type \"text\" called \"name\". The default <em>value</em> of the field depends on whether the <code>genre</code> variable is defined. If called from the <code>GET</code> route it will be empty as this is a new form. If called from a <code>POST</code> route it will contain the (invalid) value originally entered by the user.</p>\n<p>The last part of the page is the error code. This prints a list of errors, if the error variable has been defined (in other words, this section will not appear when the template is rendered on the <code>GET</code> route).</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> This is just one way to render the errors. You can also get the names of the affected fields from the error variable, and use these to control where the error messages are rendered, whether to apply custom CSS, etc.</p>\n</div>"}},{"type":"prose","value":{"id":"what_does_it_look_like","title":"What does it look like?","isH3":false,"content":"<p>Run the application, open your browser to <code>http://localhost:3000/</code>, then select the <em>Create new genre</em> link. If everything is set up correctly, your site should look something like the following screenshot. After you enter a value, it should be saved and you'll be taken to the genre detail page.</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Create_genre_form/locallibary_express_genre_create_empty.png\" alt=\"Genre Create Page - Express Local Library site\" width=\"1079\" height=\"406\" loading=\"lazy\">\n</p>\n<p>The only error we validate against server-side is that the genre field must have at least three characters. The screenshot below shows what the error list would look like if you supply a genre with only one or two characters (highlighted in yellow).</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Create_genre_form/locallibary_express_genre_create_error.png\" alt=\"The Create Genre section of the Local library application. The left column has a vertical navigation bar. The right section is the create a new Genre from with a heading that reads 'Create Genre'. There is one input field labeled 'Genre'. There is a submit button at the bottom. There is an error message that reads 'Genre name required' directly below the Submit button. The error message was highlighted by the author of this article. There is no visual indication in the form that the genre is required nor that the error message only appears on error.\" width=\"854\" height=\"321\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> Our validation uses <code>trim()</code> to ensure that whitespace is not accepted as a genre name. We also validate that the field is not empty on the client side by adding the value <code>required='true'</code> to the field definition in the form:</p>\n  <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">pug</span></p><pre class=\"brush: pug notranslate\"><code><span class=\"token tag\">input<span class=\"token attr-id\">#name</span><span class=\"token attr-class\">.form-control</span><span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">type</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'text'</span></span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">placeholder</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">'Fantasy</span><span class=\"token punctuation\">,</span> Poetry etc.' <span class=\"token attr-name\">name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'name'</span> required<span class=\"token operator\">=</span><span class=\"token string\">'true'</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token operator\">===</span>genre <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> genre<span class=\"token punctuation\">.</span>name</span><span class=\"token punctuation\">)</span></span></span> <span class=\"token plain-text\">)</span>\n</code></pre></div>\n</div>"}},{"type":"prose","value":{"id":"next_steps","title":"Next steps","isH3":false,"content":"<ol>\n  <li>Return to <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms\">Express Tutorial Part 6: Working with forms.</a></li>\n  <li>Proceed to the next sub article of part 6: <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Create_author_form\">Create Author form</a>.</li>\n</ol>"}}],"toc":[{"text":"Import validation and sanitization methods","id":"import_validation_and_sanitization_methods"},{"text":"Controller—get route","id":"controller—get_route"},{"text":"Controller—post route","id":"controller—post_route"},{"text":"View","id":"view"},{"text":"What does it look like?","id":"what_does_it_look_like"},{"text":"Next steps","id":"next_steps"}],"summary":"This sub article shows how we define our page to create Genre objects (this is a good place to start because the Genre has only one field, its name, and no dependencies). Like any other pages, we need to set up routes, controllers, and views.","popularity":0.0029,"modified":"2023-11-13T05:41:45.000Z","source":{"folder":"en-us/learn/server-side/express_nodejs/forms/create_genre_form","github_url":"https://github.com/mdn/content/blob/main/files/en-us/learn/server-side/express_nodejs/forms/create_genre_form/index.md","last_commit_url":"https://github.com/mdn/content/commit/264e63d9533b36068c85cdbb847c569b251ac286","filename":"index.md"},"short_title":"Create genre form","parents":[{"uri":"/en-US/docs/Learn","title":"Guides"},{"uri":"/en-US/docs/Learn/Server-side","title":"Server-side website programming"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs","title":"Express web framework (Node.js/JavaScript)"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs/forms","title":"Express Tutorial Part 6: Working with forms"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Create_genre_form","title":"Create genre form"}],"pageTitle":"Create genre form - Learn web development | MDN","noIndexing":false}}