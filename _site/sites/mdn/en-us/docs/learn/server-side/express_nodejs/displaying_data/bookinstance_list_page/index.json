{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"BookInstance list page","mdn_url":"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/BookInstance_list_page","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Next we'll implement our list of all book copies (<code>BookInstance</code>) in the library. This page needs to include the title of the <code>Book</code> associated with each <code>BookInstance</code> (linked to its detail page) along with other information in the <code>BookInstance</code> model, including the status, imprint, and unique id of each copy. The unique id text should be linked to the <code>BookInstance</code> detail page.</p>"}},{"type":"prose","value":{"id":"controller","title":"Controller","isH3":false,"content":"<p>The <code>BookInstance</code> list controller function needs to get a list of all book instances, populate the associated book information, and then pass the list to the template for rendering.</p>\n<p>\n  Open <code>/controllers/bookinstanceController.js</code>.\n  Find the exported <code>bookinstance_list()</code> controller method and replace it with the following code.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Display list of all BookInstances.</span>\nexports<span class=\"token punctuation\">.</span>bookinstance_list <span class=\"token operator\">=</span> <span class=\"token function\">asyncHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> allBookInstances <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> BookInstance<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookinstance_list\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Book Instance List\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">bookinstance_list</span><span class=\"token operator\">:</span> allBookInstances<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  The route handler calls the <code>find()</code> function on the <code>BookInstance</code> model, and then daisy-chains a call to <code>populate()</code> with the <code>book</code> field—this will replace the book id stored for each <code>BookInstance</code> with a full <code>Book</code> document.\n  <code>exec()</code> is then daisy-chained on the end in order to execute the query and return a promise.\n</p>\n<p>\n  The route handler uses <code>await</code> to wait on the promise, pausing execution until it is settled.\n  If the promise is fulfilled, the results of the query are saved to the <code>allBookInstances</code> variable, and the route handler continues execution.\n</p>\n<p>The last part of the code calls <code>render()</code>, specifying the <strong>bookinstance_list</strong> (.pug) template and passing values for the <code>title</code> and <code>bookinstance_list</code> into the template.</p>"}},{"type":"prose","value":{"id":"view","title":"View","isH3":false,"content":"<p>Create <strong>/views/bookinstance_list.pug</strong> and copy in the text below.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">pug</span></p><pre class=\"brush: pug notranslate\"><code><span class=\"token keyword\">extends layout</span>\n\n<span class=\"token keyword\">block content</span>\n  <span class=\"token tag\">h1</span><span class=\"token punctuation\">=</span><span class=\"token code\"> title</span>\n\n  <span class=\"token tag\">ul</span>\n    <span class=\"token flow-control\"><span class=\"token each\"><span class=\"token keyword\">each</span> val <span class=\"token keyword\">in</span></span> bookinstance_list</span>\n      <span class=\"token tag\">li</span>\n        <span class=\"token tag\">a<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">href</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">val<span class=\"token punctuation\">.</span>url</span><span class=\"token punctuation\">)</span></span></span> <span class=\"token plain-text\">#{val.book.title} : #{val.imprint} -</span>\n        <span class=\"token flow-control\"><span class=\"token branch keyword\">if</span> val<span class=\"token punctuation\">.</span>status<span class=\"token operator\">==</span><span class=\"token string\">'Available'</span></span>\n          <span class=\"token tag\">span<span class=\"token attr-class\">.text-success</span></span> <span class=\"token plain-text\">#{val.status}</span>\n        <span class=\"token flow-control\"><span class=\"token branch keyword\">else</span> <span class=\"token keyword\">if</span> val<span class=\"token punctuation\">.</span>status<span class=\"token operator\">==</span><span class=\"token string\">'Maintenance'</span></span>\n          <span class=\"token tag\">span<span class=\"token attr-class\">.text-danger</span></span> <span class=\"token plain-text\">#{val.status}</span>\n        <span class=\"token flow-control\"><span class=\"token branch keyword\">else</span></span>\n          <span class=\"token tag\">span<span class=\"token attr-class\">.text-warning</span></span> <span class=\"token plain-text\">#{val.status}</span>\n        <span class=\"token flow-control\"><span class=\"token branch keyword\">if</span> val<span class=\"token punctuation\">.</span>status<span class=\"token operator\">!=</span><span class=\"token string\">'Available'</span></span>\n          <span class=\"token tag\">span</span> <span class=\"token plain-text\"> (Due: #{val.due_back} )</span>\n\n    <span class=\"token flow-control\"><span class=\"token branch keyword\">else</span></span>\n      <span class=\"token tag\">li</span> <span class=\"token plain-text\">There are no book copies in this library.</span>\n</code></pre></div>\n<p>This view is much the same as all the others. It extends the layout, replacing the <em>content</em> block, displays the <code>title</code> passed in from the controller, and iterates through all the book copies in <code>bookinstance_list</code>. For each copy we display its status (color coded) and if the book is not available, its expected return date. One new feature is introduced—we can use dot notation after a tag to assign a class. So <code>span.text-success</code> will be compiled to <code>&lt;span class=\"text-success\"&gt;</code> (and might also be written in Pug as <code>span(class=\"text-success\")</code>.</p>"}},{"type":"prose","value":{"id":"what_does_it_look_like","title":"What does it look like?","isH3":false,"content":"<p>Run the application, open your browser to <code>http://localhost:3000/</code>, then select the <em>All book-instances</em> link. If everything is set up correctly, your site should look something like the following screenshot.</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/BookInstance_list_page/locallibary_express_bookinstance_list.png\" alt=\"BookInstance List Page - Express Local Library site\" width=\"1621\" height=\"435\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"next_steps","title":"Next steps","isH3":false,"content":"<ul>\n  <li>Return to <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a>.</li>\n  <li>Proceed to the next subarticle of part 5: <a href=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Date_formatting_using_moment\">Date formatting using luxon</a>.</li>\n</ul>"}}],"toc":[{"text":"Controller","id":"controller"},{"text":"View","id":"view"},{"text":"What does it look like?","id":"what_does_it_look_like"},{"text":"Next steps","id":"next_steps"}],"summary":"Next we'll implement our list of all book copies (BookInstance) in the library. This page needs to include the title of the Book associated with each BookInstance (linked to its detail page) along with other information in the BookInstance model, including the status, imprint, and unique id of each copy. The unique id text should be linked to the BookInstance detail page.","popularity":0.002,"modified":"2023-07-03T10:12:35.000Z","source":{"folder":"en-us/learn/server-side/express_nodejs/displaying_data/bookinstance_list_page","github_url":"https://github.com/mdn/content/blob/main/files/en-us/learn/server-side/express_nodejs/displaying_data/bookinstance_list_page/index.md","last_commit_url":"https://github.com/mdn/content/commit/bb026bcb88b7f45374d602301b7b0db5a49ff303","filename":"index.md"},"short_title":"BookInstance list page","parents":[{"uri":"/en-US/docs/Learn","title":"Guides"},{"uri":"/en-US/docs/Learn/Server-side","title":"Server-side website programming"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs","title":"Express web framework (Node.js/JavaScript)"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Express Tutorial Part 5: Displaying library data"},{"uri":"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/BookInstance_list_page","title":"BookInstance list page"}],"pageTitle":"BookInstance list page - Learn web development | MDN","noIndexing":false}}