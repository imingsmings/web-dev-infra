{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Guidelines for writing CSS code examples","mdn_url":"/en-US/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS","locale":"en-US","native":"English (US)","sidebarHTML":"\n    <ol>\n        <li>\n            <a href=\"/en-US/docs/MDN/\">The MDN Web Docs Project</a>\n        </li>\n\n        <li class=\"toggle\">\n            <details>\n                <summary>Community guidelines</summary>\n                <ol>\n                    <li><a href=\"/en-US/docs/MDN/Community\">Overview</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Community/Contributing\">Contributing to MDN</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Community/Open_source_etiquette\">Open source etiquette</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Community/Communication_channels\">Communication channels</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Community/Discussions\">Discussions</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Community/Learn_forum\">Learn forum</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Community/Issues\">Issue guidelines</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Community/Pull_requests\">Pull request guidelines</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Community/Mdn_content\">Content repository guidelines</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Community/Users_teams\">Roles and teams</a></li>\n                </ol>\n            </details>\n        </li>\n\n        <li class=\"toggle\">\n            <details>\n                <summary>Writing guidelines</summary>\n                <ol>\n                    <li><a href=\"/en-US/docs/MDN/Writing_guidelines\">Overview</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Writing_guidelines/What_we_write\">What we write</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Writing_guidelines/Writing_style_guide\">Writing style guide</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Writing_guidelines/Howto\">How-to guides</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Writing_guidelines/Page_structures\">Page structures</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Writing_guidelines/Attrib_copyright_license\">Attribution and copyright</a></li>\n                    <li><a href=\"/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete\">Experimental, deprecated and obsolete</a></li>\n                </ol>\n            </details>\n        </li>\n    </ol>\n","sidebarMacro":"MDNSidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The following guidelines cover how to write CSS example code for MDN Web Docs.</p>"}},{"type":"prose","value":{"id":"general_guidelines_for_css_code_examples","title":"General guidelines for CSS code examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"choosing_a_format","title":"Choosing a format","isH3":true,"content":"<p>Opinions on correct indentation, whitespace, and line lengths have always been controversial. Discussions on these topics are a distraction from creating and maintaining content.</p>\n<p>On MDN Web Docs, we use <a href=\"https://prettier.io/\" class=\"external\" target=\"_blank\">Prettier</a> as a code formatter to keep the code style consistent (and to avoid off-topic discussions). You can consult our <a href=\"https://github.com/mdn/content/blob/main/.prettierrc.json\" class=\"external\" target=\"_blank\">configuration file</a> to learn about the current rules, and read the <a href=\"https://prettier.io/docs/en/index.html\" class=\"external\" target=\"_blank\">Prettier documentation</a>.</p>\n<p>Prettier formats all the code and keeps the style consistent. Nevertheless, there are a few additional rules that you need to follow.</p>"}},{"type":"prose","value":{"id":"plan_your_css","title":"Plan your CSS","isH3":true,"content":"<p>Before diving in and writing huge chunks of CSS, plan your styles carefully. What general styles are going to be needed, what different layouts do you need to create, what specific overrides need to be created, and are they reusable? Above all, you need to try to <strong>avoid too much overriding</strong>. If you keep finding yourself writing styles and then cancelling them again a few rules down, you probably need to rethink your strategy.</p>"}},{"type":"prose","value":{"id":"use_flexiblerelative_units","title":"Use flexible/relative units","isH3":true,"content":"<p>For maximum flexibility over the widest possible range of devices, it is a good idea to size containers, padding, etc. using relative units like ems and rems or percentages and viewport units if you want them to vary depending on viewport width. You can read some more about this in our <a href=\"/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#relative_length_units\">guide to CSS values and units</a>.</p>"}},{"type":"prose","value":{"id":"dont_use_preprocessors","title":"Don't use preprocessors","isH3":true,"content":"<p>Don't use preprocessor syntax, such as <a href=\"https://sass-lang.com/\" class=\"external\" target=\"_blank\">Sass</a>, <a href=\"https://lesscss.org/\" class=\"external\" target=\"_blank\">Less</a>, or <a href=\"https://stylus-lang.com/\" class=\"external\" target=\"_blank\">Stylus,</a>, in the example code. On MDN Web Docs, we document the vanilla CSS language. Using preprocessors will only raise the bar to understanding the examples, potentially confusing readers.</p>"}},{"type":"prose","value":{"id":"dont_use_specific_css_methodologies","title":"Don't use specific CSS methodologies","isH3":true,"content":"<p>In the same spirit as the previous guideline, don't write example codes on MDN Web Docs using a specific CSS methodology such as <a href=\"https://getbem.com/naming/\" class=\"external\" target=\"_blank\">BEM</a> or <a href=\"https://smacss.com/\" class=\"external\" target=\"_blank\">SMACSS</a>. Even though they are valid CSS syntax, the naming conventions can be confusing to people not familiar with those methodologies.</p>"}},{"type":"prose","value":{"id":"dont_use_resets","title":"Don't use resets","isH3":true,"content":"<p>For maximum control over CSS across platforms, a lot of people used to use CSS resets to remove every style, before then building things back up themselves. This certainly has its merits, but especially in the modern world, CSS resets can be an overkill, resulting in a lot of extra time spent reimplementing things that weren't completely broken in the first place, like default margins, list styles, etc.</p>\n<p>If you really feel like you need to use a reset, consider using <a href=\"https://necolas.github.io/normalize.css/\" class=\"external\" target=\"_blank\">normalize.css by Nicolas Gallagher</a>, which aims to just make things more consistent across browsers, get rid of some default annoyances that we always remove (the margins on <code>&lt;body&gt;</code>, for example) and fix a few bugs.</p>"}},{"type":"prose","value":{"id":"!important","title":"!important","isH3":false,"content":"<p><code>!important</code> is the last resort that is generally used only when you need to override something and there is no other way to do it. Using <code>!important</code> is a bad practice and you should avoid it wherever possible.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css example-bad notranslate\"><code><span class=\"token selector\">.bad-code</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 4rem <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"css_comments","title":"CSS comments","isH3":false,"content":"<p>Use CSS-style comments to comment code that isn't self-documenting. Also note that you should leave a space between the asterisks and the comment.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css example-good notranslate\"><code><span class=\"token comment\">/* This is a CSS-style comment */</span>\n</code></pre></div>\n<p>Put your comments on separate lines preceding the code they are referring to, like so:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">h3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Creates a red drop shadow, offset 1px right and down, w/2px blur radius */</span>\n  <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 1px 1px 2px red<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Sets the font-size to double the default document font size */</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"double_quotes_around_values","title":"Double quotes around values","isH3":false,"content":"<p>Where quotes can or should be included, use them, and use double quotes. For example:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">[data-vegetable=\"liquid\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> goldenrod<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"../../media/examples/lizard.png\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"longhand_vs._shorthand_rules","title":"Longhand vs. shorthand rules","isH3":false,"content":"<p>Usually, when teaching the specifics of CSS syntax, it is clearer and more obvious to use longhand properties, rather than terse shorthand (unless, of course, you're explaining shorthand through the example). Remember that the point of examples on MDN Web Docs is to teach people, not to be clever or efficient. We explain here why writing with longhand rules is recommended.</p>\n<ul>\n  <li>It is often harder to understand what the shorthand is doing. In the example below, it takes a while to pick apart exactly what the <a href=\"/en-US/docs/Web/CSS/font\"><code>font</code></a> syntax is doing.\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css notranslate\"><code><span class=\"token property\">font</span><span class=\"token punctuation\">:</span> small-caps bold 2rem/1.5 sans-serif<span class=\"token punctuation\">;</span>\n</code></pre></div>Whereas the following style is clearer:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css notranslate\"><code><span class=\"token property\">font-variant</span><span class=\"token punctuation\">:</span> small-caps<span class=\"token punctuation\">;</span>\n<span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span>\n<span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n<span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.5<span class=\"token punctuation\">;</span>\n<span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>CSS shorthand comes with potential added pitfalls — default values are set for parts of the syntax that you don't explicitly set, which can produce unexpected resets of values you've set earlier in the cascade or other expected effects. The <a href=\"/en-US/docs/Web/CSS/grid\"><code>grid</code></a> property, for example, sets all of the following default values for items that are not specified:\n    <ul>\n      <li><a href=\"/en-US/docs/Web/CSS/grid-template-rows\"><code>grid-template-rows</code></a>: <code>none</code></li>\n      <li><a href=\"/en-US/docs/Web/CSS/grid-template-columns\"><code>grid-template-columns</code></a>: <code>none</code></li>\n      <li><a href=\"/en-US/docs/Web/CSS/grid-template-areas\"><code>grid-template-areas</code></a>: <code>none</code></li>\n      <li><a href=\"/en-US/docs/Web/CSS/grid-auto-rows\"><code>grid-auto-rows</code></a>: <code>auto</code></li>\n      <li><a href=\"/en-US/docs/Web/CSS/grid-auto-columns\"><code>grid-auto-columns</code></a>: <code>auto</code></li>\n      <li><a href=\"/en-US/docs/Web/CSS/grid-auto-flow\"><code>grid-auto-flow</code></a>: <code>row</code></li>\n      <li><a href=\"/en-US/docs/Web/CSS/column-gap\"><code>column-gap</code></a>: <code>0</code></li>\n      <li><a href=\"/en-US/docs/Web/CSS/row-gap\"><code>row-gap</code></a>: <code>0</code></li>\n      <li><a href=\"/en-US/docs/Web/CSS/column-gap\"><code>column-gap</code></a>: <code>normal</code></li>\n      <li><a href=\"/en-US/docs/Web/CSS/row-gap\"><code>row-gap</code></a>: <code>normal</code></li>\n    </ul>\n  </li>\n  <li>Some shorthands only work as expected if you include the different value components in a certain order. This is the case in CSS animations. In the example below, the expected order is written as a comment:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css notranslate\"><code><span class=\"token comment\">/* duration | timing-function | delay | iteration-count\n  direction | fill-mode | play-state | name */</span>\n<span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> 3s ease-in 1s 2 reverse both paused slidein<span class=\"token punctuation\">;</span>\n</code></pre></div>In this example, the first value that can be parsed as a <a href=\"/en-US/docs/Web/CSS/time\"><code>&lt;time&gt;</code></a> is assigned to the <a href=\"/en-US/docs/Web/CSS/animation-duration\"><code>animation-duration</code></a> property, and the second value that can be parsed as time is assigned to <a href=\"/en-US/docs/Web/CSS/animation-delay\"><code>animation-delay</code></a>. (For more information, see <a href=\"/en-US/docs/Web/CSS/animation#syntax\">animation syntax</a> details.)\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"mobile-first_media_queries","title":"Mobile-first media queries","isH3":false,"content":"<p>In a stylesheet that contains <a href=\"/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries\">media query</a> styles for different target viewport sizes, first include the narrow screen/mobile styling before any other media queries are encountered. Add styling for wider viewport sizes via successive media queries. Following this rule has many advantages that are explained in the <a href=\"/en-US/docs/Learn/CSS/CSS_layout/Responsive_Design\">Mobile First</a> article.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css example-good notranslate\"><code><span class=\"token comment\">/* Default CSS layout for narrow screens */</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 480px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* CSS for medium width screens */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* CSS for wide screens */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1100px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* CSS for really wide screens */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"selectors","title":"Selectors","isH3":false,"content":"<ul>\n  <li>Don't use ID selectors because they are:\n    <ul>\n      <li>less flexible; you can't add more if you discover you need more than one.</li>\n      <li>harder to override because they have higher specificity than classes.</li>\n    </ul>\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css example-good notranslate\"><code><span class=\"token selector\">.editorial-summary</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css example-bad notranslate\"><code><span class=\"token selector\">#editorial-summary</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"value_to_turn_off_properties","title":"Value to turn off properties","isH3":false,"content":"<p>When turning off borders (and any other properties that can take <code>0</code> or <code>none</code> as values), use <code>0</code> rather than <code>none</code>:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css example-good notranslate\"><code><span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<p><a href=\"/en-US/docs/Web/CSS/Reference#index\">CSS reference index</a> - browse through our CSS property reference pages to check out some good, concise, meaningful CSS snippets. Our interactive examples in the \"Try it\" section are generally written to follow the guidelines described on this page.</p>"}}],"toc":[{"text":"General guidelines for CSS code examples","id":"general_guidelines_for_css_code_examples"},{"text":"!important","id":"!important"},{"text":"CSS comments","id":"css_comments"},{"text":"Double quotes around values","id":"double_quotes_around_values"},{"text":"Longhand vs. shorthand rules","id":"longhand_vs._shorthand_rules"},{"text":"Mobile-first media queries","id":"mobile-first_media_queries"},{"text":"Selectors","id":"selectors"},{"text":"Value to turn off properties","id":"value_to_turn_off_properties"},{"text":"See also","id":"see_also"}],"summary":"The following guidelines cover how to write CSS example code for MDN Web Docs.","popularity":0.0045,"modified":"2023-12-04T12:04:17.000Z","source":{"folder":"en-us/mdn/writing_guidelines/writing_style_guide/code_style_guide/css","github_url":"https://github.com/mdn/content/blob/main/files/en-us/mdn/writing_guidelines/writing_style_guide/code_style_guide/css/index.md","last_commit_url":"https://github.com/mdn/content/commit/8d766d1d1c60a2d6d2c95bd2aa9d0b297d9c70ac","filename":"index.md"},"short_title":"Guidelines for writing CSS code examples","parents":[{"uri":"/en-US/docs/MDN","title":"The MDN Web Docs project"},{"uri":"/en-US/docs/MDN/Writing_guidelines","title":"Writing guidelines"},{"uri":"/en-US/docs/MDN/Writing_guidelines/Writing_style_guide","title":"Writing style guide"},{"uri":"/en-US/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide","title":"Guidelines for writing code examples"},{"uri":"/en-US/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/CSS","title":"Guidelines for writing CSS code examples"}],"pageTitle":"Guidelines for writing CSS code examples - The MDN Web Docs project | MDN","noIndexing":false}}