{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Array","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array","locale":"en-US","native":"English (US)","browserCompat":["javascript.builtins.Array"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><em><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" aria-current=\"page\"><code>Array</code></a></em></strong></li><li><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array\"><code>Array() constructor</code></a></li></ol></details></li><li><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species\"><code>Array[@@species]</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables\"><code>Array.prototype[@@unscopables]</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>Array: length</code></a></li></ol></details></li><li><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator\"><code>Array.prototype[@@iterator]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\"><code>Array.prototype.at()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>Array.prototype.copyWithin()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\"><code>Array.prototype.entries()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>Array.prototype.every()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>Array.prototype.fill()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>Array.prototype.filter()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>Array.prototype.find()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>Array.prototype.findIndex()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>Array.prototype.findLast()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>Array.prototype.findLastIndex()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>Array.prototype.flat()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>Array.prototype.flatMap()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fromAsync\"><code>Array.fromAsync()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"><code>Array.isArray()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>Array.prototype.join()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\"><code>Array.prototype.keys()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>Array.prototype.lastIndexOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>Array.prototype.map()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\"><code>Array.of()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\"><code>Array.prototype.pop()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>Array.prototype.push()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>Array.prototype.reduce()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>Array.prototype.reduceRight()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>Array.prototype.reverse()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\"><code>Array.prototype.shift()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>Array.prototype.some()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>Array.prototype.sort()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>Array.prototype.splice()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\"><code>Array.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed\"><code>Array.prototype.toReversed()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"><code>Array.prototype.toSorted()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced\"><code>Array.prototype.toSpliced()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>Array.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\"><code>Array.prototype.unshift()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>Array.prototype.values()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/with\"><code>Array.prototype.with()</code></a></li></ol></details></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><details><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function() constructor</code></a></li></ol></details></li><li><details><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function: displayName</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function: length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function: name</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function: prototype</code></a></li></ol></details></li><li><details><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance\"><code>Function.prototype[@@hasInstance]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></details></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><details><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li></ol></details></li><li><details><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></details></li></ol>","sidebarMacro":"JSRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>Array</code></strong> object, as with arrays in other programming languages, enables <a href=\"/en-US/docs/Learn/JavaScript/First_steps/Arrays\">storing a collection of multiple items under a single variable name</a>, and has members for <a href=\"#examples\">performing common array operations</a>.</p>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>In JavaScript, arrays aren't <a href=\"/en-US/docs/Glossary/Primitive\">primitives</a> but are instead <code>Array</code> objects with the following core characteristics:</p>\n<ul>\n  <li><strong>JavaScript arrays are resizable</strong> and <strong>can contain a mix of different <a href=\"/en-US/docs/Web/JavaScript/Data_structures\">data types</a></strong>. (When those characteristics are undesirable, use <a href=\"/en-US/docs/Web/JavaScript/Guide/Typed_arrays\">typed arrays</a> instead.)</li>\n  <li><strong>JavaScript arrays are not associative arrays</strong> and so, array elements cannot be accessed using arbitrary strings as indexes, but must be accessed using nonnegative integers (or their respective string form) as indexes.</li>\n  <li><strong>JavaScript arrays are <a href=\"https://en.wikipedia.org/wiki/Zero-based_numbering\" class=\"external\" target=\"_blank\">zero-indexed</a></strong>: the first element of an array is at index <code>0</code>, the second is at index <code>1</code>, and so on — and the last element is at the value of the array's <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property minus <code>1</code>.</li>\n  <li><strong>JavaScript <a href=\"#copy_an_array\">array-copy operations</a> create <a href=\"/en-US/docs/Glossary/Shallow_copy\">shallow copies</a></strong>. (All standard built-in copy operations with <em>any</em> JavaScript objects create shallow copies, rather than <a href=\"/en-US/docs/Glossary/Deep_copy\">deep copies</a>).</li>\n</ul>"}},{"type":"prose","value":{"id":"array_indices","title":"Array indices","isH3":true,"content":"<p><code>Array</code> objects cannot use arbitrary strings as element indexes (as in an <a href=\"https://en.wikipedia.org/wiki/Associative_array\" class=\"external\" target=\"_blank\">associative array</a>) but must use nonnegative integers (or their respective string form). Setting or accessing via non-integers will not set or retrieve an element from the array list itself, but will set or access a variable associated with that array's <a href=\"/en-US/docs/Web/JavaScript/Data_structures#properties\">object property collection</a>. The array's object properties and list of array elements are separate, and the array's <a href=\"/en-US/docs/Web/JavaScript/Guide/Indexed_collections#array_methods\">traversal and mutation operations</a> cannot be applied to these named properties.</p>\n<p>Array elements are object properties in the same way that <code>toString</code> is a property (to be specific, however, <code>toString()</code> is a method). Nevertheless, trying to access an element of an array as follows throws a syntax error because the property name is not valid:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code>arr<span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a syntax error</span>\n</code></pre></div>\n<p>JavaScript syntax requires properties beginning with a digit to be accessed using <a href=\"/en-US/docs/Web/JavaScript/Guide/Working_with_objects#objects_and_properties\">bracket notation</a> instead of <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors\">dot notation</a>. It's also possible to quote the array indices (e.g., <code>years['2']</code> instead of <code>years[2]</code>), although usually not necessary.</p>\n<p>The <code>2</code> in <code>years[2]</code> is coerced into a string by the JavaScript engine through an implicit <code>toString</code> conversion. As a result, <code>'2'</code> and <code>'02'</code> would refer to two different slots on the <code>years</code> object, and the following example could be <code>true</code>:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>years<span class=\"token punctuation\">[</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> years<span class=\"token punctuation\">[</span><span class=\"token string\">\"02\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Only <code>years['2']</code> is an actual array index. <code>years['02']</code> is an arbitrary string property that will not be visited in array iteration.</p>"}},{"type":"prose","value":{"id":"relationship_between_length_and_numerical_properties","title":"Relationship between length and numerical properties","isH3":true,"content":"<p>A JavaScript array's <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property and numerical properties are connected.</p>\n<p>Several of the built-in array methods (e.g., <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>join()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a>, etc.) take into account the value of an array's <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property when they're called.</p>\n<p>Other methods (e.g., <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>push()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a>, etc.) also result in updates to an array's <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"peach\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>When setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the engine will update the array's <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property accordingly:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"mango\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'mango'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['0', '1', '2', '5']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n</code></pre></div>\n<p>Increasing the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> extends the array by adding empty slots without creating any new elements — not even <code>undefined</code>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>fruits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['banana', 'apple', 'peach', empty x 2, 'mango', empty x 4]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['0', '1', '2', '5']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n</code></pre></div>\n<p>Decreasing the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property does, however, delete elements.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>fruits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['0', '1']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>This is explained further on the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> page.</p>"}},{"type":"prose","value":{"id":"array_methods_and_empty_slots","title":"Array methods and empty slots","isH3":true,"content":"<p>Empty slots in <a href=\"/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays\">sparse arrays</a> behave inconsistently between array methods. Generally, the older methods will skip empty slots, while newer ones treat them as <code>undefined</code>.</p>\n<p>Among methods that iterate through multiple elements, the following do an <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/in\"><code>in</code></a> check before accessing the index and do not conflate empty slots with <code>undefined</code>:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>concat()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>copyWithin()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>every()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>filter()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>flat()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>flatMap()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>lastIndexOf()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>reduce()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>reduceRight()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>reverse()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>some()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>sort()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a></li>\n</ul>\n<p>For exactly how they treat empty slots, see the page for each method.</p>\n<p>These methods treat empty slots as if they are <code>undefined</code>:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\"><code>entries()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>fill()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>findLast()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>findLastIndex()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>includes()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>join()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\"><code>keys()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\"><code>toLocaleString()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>values()</code></a></li>\n</ul>"}},{"type":"prose","value":{"id":"copying_methods_and_mutating_methods","title":"Copying methods and mutating methods","isH3":true,"content":"<p>Some methods do not mutate the existing array that the method was called on, but instead return a new array. They do so by first constructing a new array and then populating it with elements. The copy always happens <a href=\"/en-US/docs/Glossary/Shallow_copy\"><em>shallowly</em></a> — the method never copies anything beyond the initially created array. Elements of the original array(s) are copied into the new array as follows:</p>\n<ul>\n  <li>Objects: the object reference is copied into the new array. Both the original and new array refer to the same object. That is, if a referenced object is modified, the changes are visible to both the new and original arrays.</li>\n  <li>Primitive types such as strings, numbers and booleans (not <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>, and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> objects): their values are copied into the new array.</li>\n</ul>\n<p>Other methods mutate the array that the method was called on, in which case their return value differs depending on the method: sometimes a reference to the same array, sometimes the length of the new array.</p>\n<p>The following methods create new arrays by accessing <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species\"><code>this.constructor[Symbol.species]</code></a> to determine the constructor to use:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>concat()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>filter()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>flat()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>flatMap()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> (to construct the array of removed elements that's returned)</li>\n</ul>\n<p>The following methods always create new arrays with the <code>Array</code> base constructor:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed\"><code>toReversed()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"><code>toSorted()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced\"><code>toSpliced()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/with\"><code>with()</code></a></li>\n</ul>\n<p>The following table lists the methods that mutate the original array, and the corresponding non-mutating alternative:</p>\n<figure class=\"table-container\"><table>\n  <thead>\n    <tr>\n      <th>Mutating method</th>\n      <th>Non-mutating alternative</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>copyWithin()</code></a></td>\n      <td>No one-method alternative</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>fill()</code></a></td>\n      <td>No one-method alternative</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\"><code>pop()</code></a></td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice(0, -1)</code></a></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>push(v1, v2)</code></a></td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>concat([v1, v2])</code></a></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>reverse()</code></a></td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed\"><code>toReversed()</code></a></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\"><code>shift()</code></a></td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice(1)</code></a></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>sort()</code></a></td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"><code>toSorted()</code></a></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a></td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced\"><code>toSpliced()</code></a></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\"><code>unshift(v1, v2)</code></a></td>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced\"><code>toSpliced(0, 0, v1, v2)</code></a></td>\n    </tr>\n  </tbody>\n</table></figure>\n<p>An easy way to change a mutating method into a non-mutating alternative is to use the <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a> or <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice()</code></a> to create a copy first:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>arr<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// mutates arr</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// does not mutate arr</span>\n<span class=\"token keyword\">const</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// does not mutate arr</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"iterative_methods","title":"Iterative methods","isH3":true,"content":"<p>Many array methods take a callback function as an argument. The callback function is called sequentially and at most once for each element in the array, and the return value of the callback function is used to determine the return value of the method. They all share the same signature:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">method</span><span class=\"token punctuation\">(</span>callbackFn<span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Where <code>callbackFn</code> takes three arguments:</p>\n<dl>\n  <dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n  <dd>\n    <p>The current element being processed in the array.</p>\n  </dd>\n  <dt id=\"index\"><a href=\"#index\"><code>index</code></a></dt>\n  <dd>\n    <p>The index of the current element being processed in the array.</p>\n  </dd>\n  <dt id=\"array\"><a href=\"#array\"><code>array</code></a></dt>\n  <dd>\n    <p>The array that the method was called upon.</p>\n  </dd>\n</dl>\n<p>What <code>callbackFn</code> is expected to return depends on the array method that was called.</p>\n<p>The <code>thisArg</code> argument (defaults to <code>undefined</code>) will be used as the <code>this</code> value when calling <code>callbackFn</code>. The <code>this</code> value ultimately observable by <code>callbackFn</code> is determined according to <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/this\">the usual rules</a>: if <code>callbackFn</code> is <a href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode#no_this_substitution\">non-strict</a>, primitive <code>this</code> values are wrapped into objects, and <code>undefined</code>/<code>null</code> is substituted with <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\"><code>globalThis</code></a>. The <code>thisArg</code> argument is irrelevant for any <code>callbackFn</code> defined with an <a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow function</a>, as arrow functions don't have their own <code>this</code> <a href=\"/en-US/docs/Glossary/Binding\">binding</a>.</p>\n<p>The <code>array</code> argument passed to <code>callbackFn</code> is most useful if you want to read another index during iteration, because you may not always have an existing variable that refers to the current array. You should generally not mutate the array during iteration (see <a href=\"#mutating_initial_array_in_iterative_methods\">mutating initial array in iterative methods</a>), but you can also use this argument to do so. The <code>array</code> argument is <em>not</em> the array that is being built, in the case of methods like <code>map()</code>, <code>filter()</code>, and <code>flatMap()</code> — there is no way to access the array being built from the callback function.</p>\n<p>All iterative methods are <a href=\"#copying_methods_and_mutating_methods\">copying</a> and <a href=\"#generic_array_methods\">generic</a>, although they behave differently with <a href=\"#array_methods_and_empty_slots\">empty slots</a>.</p>\n<p>The following methods are iterative:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>every()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>filter()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>findLast()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>findLastIndex()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>flatMap()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>some()</code></a></li>\n</ul>\n<p>In particular, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>every()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>findLast()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>findLastIndex()</code></a>, and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>some()</code></a> do not always invoke <code>callbackFn</code> on every element — they stop iteration as soon as the return value is determined.</p>\n<p>There are two other methods that take a callback function and run it at most once for each element in the array, but they have slightly different signatures from typical iterative methods (for example, they don't accept <code>thisArg</code>):</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>reduce()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>reduceRight()</code></a></li>\n</ul>\n<p>The <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>sort()</code></a> method also takes a callback function, but it is not an iterative method. It mutates the array in-place, doesn't accept <code>thisArg</code>, and may invoke the callback multiple times on an index.</p>\n<p>Iterative methods iterate the array like the following (with a lot of technical details omitted):</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callbackFn<span class=\"token punctuation\">,</span> thisArg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">callbackFn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Do something with result; maybe return early</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Note the following:</p>\n<ol>\n  <li>Not all methods do the <code>i in this</code> test. The <code>find</code>, <code>findIndex</code>, <code>findLast</code>, and <code>findLastIndex</code> methods do not, but other methods do.</li>\n  <li>The <code>length</code> is memorized before the loop starts. This affects how insertions and deletions during iteration are handled (see <a href=\"#mutating_initial_array_in_iterative_methods\">mutating initial array in iterative methods</a>).</li>\n  <li>The method doesn't memorize the array contents, so if any index is modified during iteration, the new value might be observed.</li>\n  <li>The code above iterates the array in ascending order of index. Some methods iterate in descending order of index (<code>for (let i = length - 1; i &gt;= 0; i--)</code>): <code>reduceRight()</code>, <code>findLast()</code>, and <code>findLastIndex()</code>.</li>\n  <li><code>reduce</code> and <code>reduceRight</code> have slightly different signatures and do not always start at the first/last element.</li>\n</ol>"}},{"type":"prose","value":{"id":"generic_array_methods","title":"Generic array methods","isH3":true,"content":"<p>Array methods are always generic — they don't access any internal data of the array object. They only access the array elements through the <code>length</code> property and the indexed elements. This means that they can be called on array-like objects as well.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> arrayLike <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'a+b'</span>\n</code></pre></div>\n<h4 id=\"normalization_of_the_length_property\">Normalization of the length property</h4>\n<p>The <code>length</code> property is <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion\">converted to an integer</a> and then clamped to the range between 0 and 2<sup>53</sup> - 1. <code>NaN</code> becomes <code>0</code>, so even when <code>length</code> is not present or is <code>undefined</code>, it behaves as if it has value <code>0</code>.</p>\n<p>The language avoids setting <code>length</code> to an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">unsafe integer</a>. All built-in methods will throw a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> if <code>length</code> will be set to a number greater than 2<sup>53</sup> - 1. However, because the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property of arrays throws an error if it's set to greater than 2<sup>32</sup> - 1, the safe integer threshold is usually not reached unless the method is called on a non-array object.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span>\n</code></pre></div>\n<p>Some array methods set the <code>length</code> property of the array object. They always set the value after normalization, so <code>length</code> always ends as an integer.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">0.7</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n</code></pre></div>\n<h4 id=\"array-like_objects\">Array-like objects</h4>\n<p>The term <a href=\"/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\"><em>array-like object</em></a> refers to any object that doesn't throw during the <code>length</code> conversion process described above. In practice, such object is expected to actually have a <code>length</code> property and to have indexed elements in the range <code>0</code> to <code>length - 1</code>. (If it doesn't have all indices, it will be functionally equivalent to a <a href=\"#array_methods_and_empty_slots\">sparse array</a>.) Any integer index less than zero or greater than <code>length - 1</code> is ignored when an array method operates on an array-like object.</p>\n<p>Many DOM objects are array-like — for example, <a href=\"/en-US/docs/Web/API/NodeList\"><code>NodeList</code></a> and <a href=\"/en-US/docs/Web/API/HTMLCollection\"><code>HTMLCollection</code></a>. The <a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> object is also array-like. You can call array methods on them even if they don't have these methods themselves.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'a+b'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"array_2\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array\"><code>Array()</code></a></dt>\n  <dd>\n    <p>Creates a new <code>Array</code> object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_properties","title":"Static properties","isH3":false,"content":"<dl>\n  <dt id=\"arrayspecies\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species\"><code>Array[@@species]</code></a></dt>\n  <dd>\n    <p>Returns the <code>Array</code> constructor.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_methods","title":"Static methods","isH3":false,"content":"<dl>\n  <dt id=\"array.from\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a></dt>\n  <dd>\n    <p>Creates a new <code>Array</code> instance from an iterable or array-like object.</p>\n  </dd>\n  <dt id=\"array.fromasync\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fromAsync\"><code>Array.fromAsync()</code></a></dt>\n  <dd>\n    <p>Creates a new <code>Array</code> instance from an async iterable, iterable, or array-like object.</p>\n  </dd>\n  <dt id=\"array.isarray\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"><code>Array.isArray()</code></a></dt>\n  <dd>\n    <p>Returns <code>true</code> if the argument is an array, or <code>false</code> otherwise.</p>\n  </dd>\n  <dt id=\"array.of\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\"><code>Array.of()</code></a></dt>\n  <dd>\n    <p>Creates a new <code>Array</code> instance with a variable number of arguments, regardless of number or type of the arguments.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<p>These properties are defined on <code>Array.prototype</code> and shared by all <code>Array</code> instances.</p>\n<dl>\n  <dt id=\"array.prototype.constructor\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Array.prototype.constructor</code></a></dt>\n  <dd>\n    <p>The constructor function that created the instance object. For <code>Array</code> instances, the initial value is the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array\"><code>Array</code></a> constructor.</p>\n  </dd>\n  <dt id=\"array.prototypeunscopables\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables\"><code>Array.prototype[@@unscopables]</code></a></dt>\n  <dd>\n    <p>Contains property names that were not included in the ECMAScript standard prior to the ES2015 version and that are ignored for <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/with\"><code>with</code></a> statement-binding purposes.</p>\n  </dd>\n</dl>\n<p>These properties are own properties of each <code>Array</code> instance.</p>\n<dl>\n  <dt id=\"length\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a></dt>\n  <dd>\n    <p>Reflects the number of elements in an array.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"array.prototype.at\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\"><code>Array.prototype.at()</code></a></dt>\n  <dd>\n    <p>Returns the array item at the given index. Accepts negative integers, which count back from the last item.</p>\n  </dd>\n  <dt id=\"array.prototype.concat\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a></dt>\n  <dd>\n    <p>Returns a new array that is the calling array joined with other array(s) and/or value(s).</p>\n  </dd>\n  <dt id=\"array.prototype.copywithin\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>Array.prototype.copyWithin()</code></a></dt>\n  <dd>\n    <p>Copies a sequence of array elements within an array.</p>\n  </dd>\n  <dt id=\"array.prototype.entries\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\"><code>Array.prototype.entries()</code></a></dt>\n  <dd>\n    <p>Returns a new <a href=\"/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators\"><em>array iterator</em></a> object that contains the key/value pairs for each index in an array.</p>\n  </dd>\n  <dt id=\"array.prototype.every\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>Array.prototype.every()</code></a></dt>\n  <dd>\n    <p>Returns <code>true</code> if every element in the calling array satisfies the testing function.</p>\n  </dd>\n  <dt id=\"array.prototype.fill\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>Array.prototype.fill()</code></a></dt>\n  <dd>\n    <p>Fills all the elements of an array from a start index to an end index with a static value.</p>\n  </dd>\n  <dt id=\"array.prototype.filter\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>Array.prototype.filter()</code></a></dt>\n  <dd>\n    <p>Returns a new array containing all elements of the calling array for which the provided filtering function returns <code>true</code>.</p>\n  </dd>\n  <dt id=\"array.prototype.find\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>Array.prototype.find()</code></a></dt>\n  <dd>\n    <p>Returns the value of the first element in the array that satisfies the provided testing function, or <code>undefined</code> if no appropriate element is found.</p>\n  </dd>\n  <dt id=\"array.prototype.findindex\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>Array.prototype.findIndex()</code></a></dt>\n  <dd>\n    <p>Returns the index of the first element in the array that satisfies the provided testing function, or <code>-1</code> if no appropriate element was found.</p>\n  </dd>\n  <dt id=\"array.prototype.findlast\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>Array.prototype.findLast()</code></a></dt>\n  <dd>\n    <p>Returns the value of the last element in the array that satisfies the provided testing function, or <code>undefined</code> if no appropriate element is found.</p>\n  </dd>\n  <dt id=\"array.prototype.findlastindex\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>Array.prototype.findLastIndex()</code></a></dt>\n  <dd>\n    <p>Returns the index of the last element in the array that satisfies the provided testing function, or <code>-1</code> if no appropriate element was found.</p>\n  </dd>\n  <dt id=\"array.prototype.flat\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>Array.prototype.flat()</code></a></dt>\n  <dd>\n    <p>Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.</p>\n  </dd>\n  <dt id=\"array.prototype.flatmap\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>Array.prototype.flatMap()</code></a></dt>\n  <dd>\n    <p>Returns a new array formed by applying a given callback function to each element of the calling array, and then flattening the result by one level.</p>\n  </dd>\n  <dt id=\"array.prototype.foreach\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a></dt>\n  <dd>\n    <p>Calls a function for each element in the calling array.</p>\n  </dd>\n  <dt id=\"array.prototype.includes\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes()</code></a></dt>\n  <dd>\n    <p>Determines whether the calling array contains a value, returning <code>true</code> or <code>false</code> as appropriate.</p>\n  </dd>\n  <dt id=\"array.prototype.indexof\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a></dt>\n  <dd>\n    <p>Returns the first (least) index at which a given element can be found in the calling array.</p>\n  </dd>\n  <dt id=\"array.prototype.join\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>Array.prototype.join()</code></a></dt>\n  <dd>\n    <p>Joins all elements of an array into a string.</p>\n  </dd>\n  <dt id=\"array.prototype.keys\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\"><code>Array.prototype.keys()</code></a></dt>\n  <dd>\n    <p>Returns a new <a href=\"/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators\"><em>array iterator</em></a> that contains the keys for each index in the calling array.</p>\n  </dd>\n  <dt id=\"array.prototype.lastindexof\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>Array.prototype.lastIndexOf()</code></a></dt>\n  <dd>\n    <p>Returns the last (greatest) index at which a given element can be found in the calling array, or <code>-1</code> if none is found.</p>\n  </dd>\n  <dt id=\"array.prototype.map\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>Array.prototype.map()</code></a></dt>\n  <dd>\n    <p>Returns a new array containing the results of invoking a function on every element in the calling array.</p>\n  </dd>\n  <dt id=\"array.prototype.pop\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\"><code>Array.prototype.pop()</code></a></dt>\n  <dd>\n    <p>Removes the last element from an array and returns that element.</p>\n  </dd>\n  <dt id=\"array.prototype.push\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>Array.prototype.push()</code></a></dt>\n  <dd>\n    <p>Adds one or more elements to the end of an array, and returns the new <code>length</code> of the array.</p>\n  </dd>\n  <dt id=\"array.prototype.reduce\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>Array.prototype.reduce()</code></a></dt>\n  <dd>\n    <p>Executes a user-supplied \"reducer\" callback function on each element of the array (from left to right), to reduce it to a single value.</p>\n  </dd>\n  <dt id=\"array.prototype.reduceright\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>Array.prototype.reduceRight()</code></a></dt>\n  <dd>\n    <p>Executes a user-supplied \"reducer\" callback function on each element of the array (from right to left), to reduce it to a single value.</p>\n  </dd>\n  <dt id=\"array.prototype.reverse\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>Array.prototype.reverse()</code></a></dt>\n  <dd>\n    <p>Reverses the order of the elements of an array <em>in place</em>. (First becomes the last, last becomes first.)</p>\n  </dd>\n  <dt id=\"array.prototype.shift\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\"><code>Array.prototype.shift()</code></a></dt>\n  <dd>\n    <p>Removes the first element from an array and returns that element.</p>\n  </dd>\n  <dt id=\"array.prototype.slice\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a></dt>\n  <dd>\n    <p>Extracts a section of the calling array and returns a new array.</p>\n  </dd>\n  <dt id=\"array.prototype.some\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>Array.prototype.some()</code></a></dt>\n  <dd>\n    <p>Returns <code>true</code> if at least one element in the calling array satisfies the provided testing function.</p>\n  </dd>\n  <dt id=\"array.prototype.sort\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>Array.prototype.sort()</code></a></dt>\n  <dd>\n    <p>Sorts the elements of an array in place and returns the array.</p>\n  </dd>\n  <dt id=\"array.prototype.splice\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>Array.prototype.splice()</code></a></dt>\n  <dd>\n    <p>Adds and/or removes elements from an array.</p>\n  </dd>\n  <dt id=\"array.prototype.tolocalestring\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\"><code>Array.prototype.toLocaleString()</code></a></dt>\n  <dd>\n    <p>Returns a localized string representing the calling array and its elements. Overrides the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a> method.</p>\n  </dd>\n  <dt id=\"array.prototype.toreversed\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed\"><code>Array.prototype.toReversed()</code></a></dt>\n  <dd>\n    <p>Returns a new array with the elements in reversed order, without modifying the original array.</p>\n  </dd>\n  <dt id=\"array.prototype.tosorted\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"><code>Array.prototype.toSorted()</code></a></dt>\n  <dd>\n    <p>Returns a new array with the elements sorted in ascending order, without modifying the original array.</p>\n  </dd>\n  <dt id=\"array.prototype.tospliced\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced\"><code>Array.prototype.toSpliced()</code></a></dt>\n  <dd>\n    <p>Returns a new array with some elements removed and/or replaced at a given index, without modifying the original array.</p>\n  </dd>\n  <dt id=\"array.prototype.tostring\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>Array.prototype.toString()</code></a></dt>\n  <dd>\n    <p>Returns a string representing the calling array and its elements. Overrides the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> method.</p>\n  </dd>\n  <dt id=\"array.prototype.unshift\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\"><code>Array.prototype.unshift()</code></a></dt>\n  <dd>\n    <p>Adds one or more elements to the front of an array, and returns the new <code>length</code> of the array.</p>\n  </dd>\n  <dt id=\"array.prototype.values\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>Array.prototype.values()</code></a></dt>\n  <dd>\n    <p>Returns a new <a href=\"/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators\"><em>array iterator</em></a> object that contains the values for each index in the array.</p>\n  </dd>\n  <dt id=\"array.prototype.with\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/with\"><code>Array.prototype.with()</code></a></dt>\n  <dd>\n    <p>Returns a new array with the element at the given index replaced with the given value, without modifying the original array.</p>\n  </dd>\n  <dt id=\"array.prototypeiterator\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator\"><code>Array.prototype[@@iterator]()</code></a></dt>\n  <dd>\n    <p>An alias for the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>values()</code></a> method by default.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>This section provides some examples of common array operations in JavaScript.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> If you're not yet familiar with array basics, consider first reading <a href=\"/en-US/docs/Learn/JavaScript/First_steps/Arrays\">JavaScript First Steps: Arrays</a>, which <a href=\"/en-US/docs/Learn/JavaScript/First_steps/Arrays#what_is_an_array\">explains what arrays are</a>, and includes other examples of common array operations.</p>\n</div>"}},{"type":"prose","value":{"id":"create_an_array","title":"Create an array","isH3":true,"content":"<p>This example shows three ways to create new array: first using <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array#array_literal_notation\">array literal notation</a>, then using the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array\"><code>Array()</code></a> constructor, and finally using <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a> to build the array from a string.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 'fruits' array created using array literal notation.</span>\n<span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// 'fruits2' array created using the Array() constructor.</span>\n<span class=\"token keyword\">const</span> fruits2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// 'fruits3' array created using String.prototype.split().</span>\n<span class=\"token keyword\">const</span> fruits3 <span class=\"token operator\">=</span> <span class=\"token string\">\"Apple, Banana\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits3<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"create_a_string_from_an_array","title":"Create a string from an array","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>join()</code></a> method to create a string from the <code>fruits</code> array.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fruitsString <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruitsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"Apple, Banana\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"access_an_array_item_by_its_index","title":"Access an array item by its index","isH3":true,"content":"<p>This example shows how to access items in the <code>fruits</code> array by specifying the index number of their position in the array.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The index of an array's first element is always 0.</span>\nfruits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Apple</span>\n\n<span class=\"token comment\">// The index of an array's second element is always 1.</span>\nfruits<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Banana</span>\n\n<span class=\"token comment\">// The index of an array's last element is always one</span>\n<span class=\"token comment\">// less than the length of the array.</span>\nfruits<span class=\"token punctuation\">[</span>fruits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Banana</span>\n\n<span class=\"token comment\">// Using an index number larger than the array's length</span>\n<span class=\"token comment\">// returns 'undefined'.</span>\nfruits<span class=\"token punctuation\">[</span><span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"find_the_index_of_an_item_in_an_array","title":"Find the index of an item in an array","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a> method to find the position (index) of the string <code>\"Banana\"</code> in the <code>fruits</code> array.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"check_if_an_array_contains_a_certain_item","title":"Check if an array contains a certain item","isH3":true,"content":"<p>This example shows two ways to check if the <code>fruits</code> array contains <code>\"Banana\"</code> and <code>\"Cherry\"</code>: first with the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>includes()</code></a> method, and then with the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a> method to test for an index value that's not <code>-1</code>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cherry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// If indexOf() doesn't return -1, the array contains the given item.</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cherry\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"append_an_item_to_an_array","title":"Append an item to an array","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>push()</code></a> method to append a new string to the <code>fruits</code> array.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newLength <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Apple\", \"Banana\", \"Orange\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 3</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"remove_the_last_item_from_an_array","title":"Remove the last item from an array","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\"><code>pop()</code></a> method to remove the last item from the <code>fruits</code> array.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItem <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Apple\", \"Banana\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Orange</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> <code>pop()</code> can only be used to remove the last item from an array. To remove multiple items from the end of an array, see the next example.</p>\n</div>"}},{"type":"prose","value":{"id":"remove_multiple_items_from_the_end_of_an_array","title":"Remove multiple items from the end of an array","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> method to remove the last 3 items from the <code>fruits</code> array.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Strawberry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cherry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItems <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Apple\", \"Banana\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Strawberry\", \"Mango\", \"Cherry\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"truncate_an_array_down_to_just_its_first_n_items","title":"Truncate an array down to just its first N items","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> method to truncate the <code>fruits</code> array down to just its first 2 items.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Strawberry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cherry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItems <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Apple\", \"Banana\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Strawberry\", \"Mango\", \"Cherry\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"remove_the_first_item_from_an_array","title":"Remove the first item from an array","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\"><code>shift()</code></a> method to remove the first item from the <code>fruits</code> array.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItem <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Banana\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Apple</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> <code>shift()</code> can only be used to remove the first item from an array. To remove multiple items from the beginning of an array, see the next example.</p>\n</div>"}},{"type":"prose","value":{"id":"remove_multiple_items_from_the_beginning_of_an_array","title":"Remove multiple items from the beginning of an array","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> method to remove the first 3 items from the <code>fruits</code> array.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Strawberry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cherry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> deleteCount <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItems <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> deleteCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Banana\", \"Mango\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Apple\", \"Strawberry\", \"Cherry\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"add_a_new_first_item_to_an_array","title":"Add a new first item to an array","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\"><code>unshift()</code></a> method to add, at index <code>0</code>, a new item to the <code>fruits</code> array — making it the new first item in the array.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newLength <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Strawberry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Strawberry\", \"Banana\", \"Mango\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 3</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"remove_a_single_item_by_index","title":"Remove a single item by index","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> method to remove the string <code>\"Banana\"</code> from the <code>fruits</code> array — by specifying the index position of <code>\"Banana\"</code>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Strawberry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> deleteCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItems <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> deleteCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Strawberry\", \"Mango\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Banana\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"remove_multiple_items_by_index","title":"Remove multiple items by index","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> method to remove the strings <code>\"Banana\"</code> and <code>\"Strawberry\"</code> from the <code>fruits</code> array — by specifying the index position of <code>\"Banana\"</code>, along with a count of the number of total items to remove.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Strawberry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> deleteCount <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItems <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> deleteCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Apple\", \"Mango\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Banana\", \"Strawberry\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"replace_multiple_items_in_an_array","title":"Replace multiple items in an array","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a> method to replace the last 2 items in the <code>fruits</code> array with new items.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Strawberry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> deleteCount <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> removedItems <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> deleteCount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cherry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Apple\", \"Mango\", \"Cherry\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>removedItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Banana\", \"Strawberry\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"iterate_over_an_array","title":"Iterate over an array","isH3":true,"content":"<p>This example uses a <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> loop to iterate over the <code>fruits</code> array, logging each item to the console.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cherry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> fruit <span class=\"token keyword\">of</span> fruits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Apple</span>\n<span class=\"token comment\">// Mango</span>\n<span class=\"token comment\">// Cherry</span>\n</code></pre></div>\n<p>But <code>for...of</code> is just one of many ways to iterate over any array; for more ways, see <a href=\"/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a>, and see the documentation for the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>every()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>filter()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>flatMap()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>reduce()</code></a>, and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>reduceRight()</code></a> methods — and see the next example, which uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach()</code></a> method.</p>"}},{"type":"prose","value":{"id":"call_a_function_on_each_element_in_an_array","title":"Call a function on each element in an array","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach()</code></a> method to call a function on each element in the <code>fruits</code> array; the function causes each item to be logged to the console, along with the item's index number.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cherry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Apple 0</span>\n<span class=\"token comment\">// Mango 1</span>\n<span class=\"token comment\">// Cherry 2</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"merge_multiple_arrays_together","title":"Merge multiple arrays together","isH3":true,"content":"<p>This example uses the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>concat()</code></a> method to merge the <code>fruits</code> array with a <code>moreFruits</code> array, to produce a new <code>combinedFruits</code> array. Notice that <code>fruits</code> and <code>moreFruits</code> remain unchanged.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Strawberry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> moreFruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cherry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> combinedFruits <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>moreFruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>combinedFruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"]</span>\n\n<span class=\"token comment\">// The 'fruits' array remains unchanged.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Apple\", \"Banana\", \"Strawberry\"]</span>\n\n<span class=\"token comment\">// The 'moreFruits' array also remains unchanged.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>moreFruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Mango\", \"Cherry\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"copy_an_array","title":"Copy an array","isH3":true,"content":"<p>This example shows three ways to create a new array from the existing <code>fruits</code> array: first by using <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a>, then by using the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>from()</code></a> method, and then by using the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice()</code></a> method.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Strawberry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a copy using spread syntax.</span>\n<span class=\"token keyword\">const</span> fruitsCopy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>fruits<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Strawberry\", \"Mango\"]</span>\n\n<span class=\"token comment\">// Create a copy using the from() method.</span>\n<span class=\"token keyword\">const</span> fruitsCopy2 <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Strawberry\", \"Mango\"]</span>\n\n<span class=\"token comment\">// Create a copy using the slice() method.</span>\n<span class=\"token keyword\">const</span> fruitsCopy3 <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Strawberry\", \"Mango\"]</span>\n</code></pre></div>\n<p>All built-in array-copy operations (<a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">spread syntax</a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a>, and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a>) create <a href=\"/en-US/docs/Glossary/Shallow_copy\">shallow copies</a>. If you instead want a <a href=\"/en-US/docs/Glossary/Deep_copy\">deep copy</a> of an array, you can use <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> to convert the array to a JSON string, and then <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a> to convert the string back into a new array that's completely independent from the original array.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruitsDeepCopy <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You can also create deep copies using the <a href=\"/en-US/docs/Web/API/structuredClone\"><code>structuredClone()</code></a> method, which has the advantage of allowing <a href=\"/en-US/docs/Web/API/Web_Workers_API/Transferable_objects\">transferable objects</a> in the source to be <em>transferred</em> to the new copy, rather than just cloned.</p>\n<p>Finally, it's important to understand that assigning an existing array to a new variable doesn't create a copy of either the array or its elements. Instead the new variable is just a reference, or alias, to the original array; that is, the original array's name and the new variable name are just two names for the exact same object (and so will always evaluate as <a href=\"/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#strict_equality_using\">strictly equivalent</a>). Therefore, if you make any changes at all either to the value of the original array or to the value of the new variable, the other will change, too:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Strawberry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fruitsAlias <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 'fruits' and 'fruitsAlias' are the same object, strictly equivalent.</span>\nfruits <span class=\"token operator\">===</span> fruitsAlias<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// Any changes to the 'fruits' array change 'fruitsAlias' too.</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['Apple', 'Banana', 'Strawberry', 'Mango']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruitsAlias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['Apple', 'Banana', 'Strawberry', 'Mango']</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"creating_a_two-dimensional_array","title":"Creating a two-dimensional array","isH3":true,"content":"<p>The following creates a chessboard as a two-dimensional array of strings. The first move is made by copying the <code>'p'</code> in <code>board[6][4]</code> to <code>board[4][4]</code>. The old position at <code>[6][4]</code> is made blank.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> board <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"R\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"N\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"K\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"N\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"R\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"P\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"q\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"k\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Move King's Pawn forward 2</span>\nboard<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nboard<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Here is the output:</p>\n<pre class=\"brush: plain notranslate\">R,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , ,\n , , , , , , ,\n , , , , , , ,\n , , , , , , ,\np,p,p,p,p,p,p,p\nr,n,b,q,k,b,n,r\n\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , ,\n , , , , , , ,\n , , , ,p, , ,\n , , , , , , ,\np,p,p,p, ,p,p,p\nr,n,b,q,k,b,n,r\n</pre>"}},{"type":"prose","value":{"id":"using_an_array_to_tabulate_a_set_of_values","title":"Using an array to tabulate a set of values","isH3":true,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> x<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Results in</p>\n<pre class=\"brush: plain notranslate\">// The first column is the index\n0  1    0\n1  2    2\n2  4    8\n3  8    18\n4  16   32\n5  32   50\n6  64   72\n7  128  98\n8  256  128\n9  512  162\n</pre>"}},{"type":"prose","value":{"id":"creating_an_array_using_the_result_of_a_match","title":"Creating an array using the result of a match","isH3":true,"content":"<p>The result of a match between a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> and a string can create a JavaScript array that has properties and elements which provide information about the match. Such an array is returned by <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a>.</p>\n<p>For example:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Match one d followed by one or more b's followed by one d</span>\n<span class=\"token comment\">// Remember matched b's and the following d</span>\n<span class=\"token comment\">// Ignore case</span>\n\n<span class=\"token keyword\">const</span> myRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d<span class=\"token group punctuation\">(</span>b<span class=\"token quantifier number\">+</span><span class=\"token group punctuation\">)</span><span class=\"token group punctuation\">(</span>d<span class=\"token group punctuation\">)</span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> execResult <span class=\"token operator\">=</span> myRe<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cdbBdbsbz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>execResult<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'cdbBdbsbz'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>execResult<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>execResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ \"dbBd\", \"bB\", \"d\" ]</span>\n</code></pre></div>\n<p>For more information about the result of a match, see the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a> pages.</p>"}},{"type":"prose","value":{"id":"mutating_initial_array_in_iterative_methods","title":"Mutating initial array in iterative methods","isH3":true,"content":"<p><a href=\"#iterative_methods\">Iterative methods</a> do not mutate the array on which it is called, but the function provided as <code>callbackFn</code> can. The key principle to remember is that only indexes between 0 and <code>arrayLength - 1</code> are visited, where <code>arrayLength</code> is the length of the array at the time the array method was first called, but the element passed to the callback is the value at the time the index is visited. Therefore:</p>\n<ul>\n  <li><code>callbackFn</code> will not visit any elements added beyond the array's initial length when the call to the iterative method began.</li>\n  <li>Changes to already-visited indexes do not cause <code>callbackFn</code> to be invoked on them again.</li>\n  <li>If an existing, yet-unvisited element of the array is changed by <code>callbackFn</code>, its value passed to the <code>callbackFn</code> will be the value at the time that element gets visited. Removed elements are not visited.</li>\n</ul>\n<div class=\"notecard warning\" id=\"sect4\">\n  <p><strong>Warning:</strong> Concurrent modifications of the kind described above frequently lead to hard-to-understand code and are generally to be avoided (except in special cases).</p>\n</div>\n<p>The following examples use the <code>forEach</code> method as an example, but other methods that visit indexes in ascending order work in the same way. We will first define a helper function:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">testSideEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">effect</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"e1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e4\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">array: [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">], index: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, elem: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Final array: [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Modification to indexes not visited yet will be visible once the index is reached:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">testSideEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 0, elem: e1</span>\n<span class=\"token comment\">// array: [e1, e2*, e3, e4], index: 1, elem: e2*</span>\n<span class=\"token comment\">// array: [e1, e2*, e3*, e4], index: 2, elem: e3*</span>\n<span class=\"token comment\">// array: [e1, e2*, e3*, e4*], index: 3, elem: e4*</span>\n<span class=\"token comment\">// Final array: [e1, e2*, e3*, e4*]</span>\n</code></pre></div>\n<p>Modification to already visited indexes does not change iteration behavior, although the array will be different afterwards:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">testSideEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 0, elem: e1</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 1, elem: e2</span>\n<span class=\"token comment\">// array: [e1*, e2, e3, e4], index: 2, elem: e3</span>\n<span class=\"token comment\">// array: [e1*, e2*, e3, e4], index: 3, elem: e4</span>\n<span class=\"token comment\">// Final array: [e1*, e2*, e3*, e4]</span>\n</code></pre></div>\n<p>Inserting <em>n</em> elements at unvisited indexes that are less than the initial array length will make them be visited. The last <em>n</em> elements in the original array that now have index greater than the initial array length will not be visited:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">testSideEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"new\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 0, elem: e1</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 1, elem: e2</span>\n<span class=\"token comment\">// array: [e1, e2, new, e3, e4], index: 2, elem: new</span>\n<span class=\"token comment\">// array: [e1, e2, new, e3, e4], index: 3, elem: e3</span>\n<span class=\"token comment\">// Final array: [e1, e2, new, e3, e4]</span>\n<span class=\"token comment\">// e4 is not visited because it now has index 4</span>\n</code></pre></div>\n<p>Inserting <em>n</em> elements with index greater than the initial array length will not make them be visited:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">testSideEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 0, elem: e1</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4, new], index: 1, elem: e2</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4, new, new], index: 2, elem: e3</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4, new, new, new], index: 3, elem: e4</span>\n<span class=\"token comment\">// Final array: [e1, e2, e3, e4, new, new, new, new]</span>\n</code></pre></div>\n<p>Inserting <em>n</em> elements at already visited indexes will not make them be visited, but it shifts remaining elements back by <em>n</em>, so the current index and the <em>n - 1</em> elements before it are visited again:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">testSideEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"new\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 0, elem: e1</span>\n<span class=\"token comment\">// array: [new, e1, e2, e3, e4], index: 1, elem: e1</span>\n<span class=\"token comment\">// array: [new, new, e1, e2, e3, e4], index: 2, elem: e1</span>\n<span class=\"token comment\">// array: [new, new, new, e1, e2, e3, e4], index: 3, elem: e1</span>\n<span class=\"token comment\">// Final array: [new, new, new, new, e1, e2, e3, e4]</span>\n<span class=\"token comment\">// e1 keeps getting visited because it keeps getting shifted back</span>\n</code></pre></div>\n<p>Deleting <em>n</em> elements at unvisited indexes will make them not be visited anymore. Because the array has shrunk, the last <em>n</em> iterations will visit out-of-bounds indexes. If the method ignores non-existent indexes (see <a href=\"#array_methods_and_empty_slots\">array methods and empty slots</a>), the last <em>n</em> iterations will be skipped; otherwise, they will receive <code>undefined</code>:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">testSideEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 0, elem: e1</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 1, elem: e2</span>\n<span class=\"token comment\">// array: [e1, e2, e4], index: 2, elem: e4</span>\n<span class=\"token comment\">// Final array: [e1, e2, e4]</span>\n<span class=\"token comment\">// Does not visit index 3 because it's out-of-bounds</span>\n\n<span class=\"token comment\">// Compare this with find(), which treats nonexistent indexes as undefined:</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"e1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e4\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr2<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">array: [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">], index: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, elem: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 0, elem: e1</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 1, elem: e2</span>\n<span class=\"token comment\">// array: [e1, e2, e4], index: 2, elem: e4</span>\n<span class=\"token comment\">// array: [e1, e2, e4], index: 3, elem: undefined</span>\n</code></pre></div>\n<p>Deleting <em>n</em> elements at already visited indexes does not change the fact that they were visited before they get deleted. Because the array has shrunk, the next <em>n</em> elements after the current index are skipped. If the method ignores non-existent indexes, the last <em>n</em> iterations will be skipped; otherwise, they will receive <code>undefined</code>:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">testSideEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 0, elem: e1</span>\n<span class=\"token comment\">// Does not visit e2 because e2 now has index 0, which has already been visited</span>\n<span class=\"token comment\">// array: [e2, e3, e4], index: 1, elem: e3</span>\n<span class=\"token comment\">// Does not visit e4 because e4 now has index 1, which has already been visited</span>\n<span class=\"token comment\">// Final array: [e2, e4]</span>\n<span class=\"token comment\">// Index 2 is out-of-bounds, so it's not visited</span>\n\n<span class=\"token comment\">// Compare this with find(), which treats nonexistent indexes as undefined:</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"e1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e4\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr2<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">array: [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">], index: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, elem: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// array: [e1, e2, e3, e4], index: 0, elem: e1</span>\n<span class=\"token comment\">// array: [e2, e3, e4], index: 1, elem: e3</span>\n<span class=\"token comment\">// array: [e2, e4], index: 2, elem: undefined</span>\n<span class=\"token comment\">// array: [e2, e4], index: 3, elem: undefined</span>\n</code></pre></div>\n<p>For methods that iterate in descending order of index, insertion causes elements to be skipped, and deletion causes elements to be visited multiple times. Adjust the code above yourself to see the effects.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Array"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.Array"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a> guide</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a></li>\n</ul>"}}],"toc":[{"text":"Description","id":"description"},{"text":"Constructor","id":"constructor"},{"text":"Static properties","id":"static_properties"},{"text":"Static methods","id":"static_methods"},{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The Array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations.","popularity":0.6183,"modified":"2023-11-27T08:17:23.000Z","source":{"folder":"en-us/web/javascript/reference/global_objects/array","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/array/index.md","last_commit_url":"https://github.com/mdn/content/commit/57375b77984037c614982a9327bc96101824db89","filename":"index.md"},"short_title":"Array","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"Reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array","title":"Array"}],"pageTitle":"Array - JavaScript | MDN","noIndexing":false}}