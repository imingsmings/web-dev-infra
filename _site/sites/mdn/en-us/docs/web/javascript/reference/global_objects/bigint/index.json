{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"BigInt","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt","locale":"en-US","native":"English (US)","browserCompat":["javascript.builtins.BigInt"],"baseline":{"baseline":"high","baseline_low_date":"2020-09-16","support":{"chrome":"67","chrome_android":"67","edge":"79","firefox":"68","firefox_android":"68","safari":"14","safari_ios":"14"}},"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><em><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\" aria-current=\"page\"><code>BigInt</code></a></em></strong></li><li><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\"><code>BigInt() constructor</code></a></li></ol></details></li><li><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN\"><code>BigInt.asIntN()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN\"><code>BigInt.asUintN()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString\"><code>BigInt.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString\"><code>BigInt.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/valueOf\"><code>BigInt.prototype.valueOf()</code></a></li></ol></details></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><details><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function() constructor</code></a></li></ol></details></li><li><details><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function: displayName</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function: length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function: name</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function: prototype</code></a></li></ol></details></li><li><details><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance\"><code>Function.prototype[@@hasInstance]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></details></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><details><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li></ol></details></li><li><details><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></details></li></ol>","sidebarMacro":"JSRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>BigInt</code></strong> values represent numeric values which are <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">too large</a> to be represented by the <code>number</code> <a href=\"/en-US/docs/Glossary/Primitive\">primitive</a>.</p>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>A <strong>BigInt value</strong>, also sometimes just called a <strong>BigInt</strong>, is a <code>bigint</code> <a href=\"/en-US/docs/Glossary/Primitive\">primitive</a>, created by appending <code>n</code> to the end of an integer literal, or by calling the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\"><code>BigInt()</code></a> function (without the <code>new</code> operator) and giving it an integer value or string value.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> previouslyMaxSafeInteger <span class=\"token operator\">=</span> <span class=\"token number\">9007199254740991n</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> alsoHuge <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">9007199254740991</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> hugeString <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9007199254740991\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> hugeHex <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x1fffffffffffff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> hugeOctal <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0o377777777777777777\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> hugeBin <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"0b11111111111111111111111111111111111111111111111111111\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 9007199254740991n</span>\n</code></pre></div>\n<p>BigInt values are similar to Number values in some ways, but also differ in a few key matters: A BigInt value cannot be used with methods in the built-in <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a> object and cannot be mixed with a Number value in operations; they must be coerced to the same type. Be careful coercing values back and forth, however, as the precision of a BigInt value may be lost when it is coerced to a Number value.</p>"}},{"type":"prose","value":{"id":"type_information","title":"Type information","isH3":true,"content":"<p>When tested against <code>typeof</code>, a BigInt value (<code>bigint</code> primitive) will give <code>\"bigint\"</code>:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token number\">1n</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"bigint\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"bigint\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>A BigInt value can also be wrapped in an <code>Object</code>:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"operators","title":"Operators","isH3":true,"content":"<p>Most operators support BigInts, however most do not permit operands to be of mixed types — both operands must be BigInt or neither:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#arithmetic_operators\">Arithmetic operators</a>: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>**</code></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_shift_operators\">Bitwise operators</a>: <code>&gt;&gt;</code>, <code>&lt;&lt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (<code>-</code>)</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#increment_and_decrement\">Increment/decrement</a>: <code>++</code>, <code>--</code></li>\n</ul>\n<p>The boolean-returning operators allow mixing numbers and BigInts as operands:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#relational_operators\">Relational operators</a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#equality_operators\">equality operators</a>: <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>, <code>===</code>, <code>!==</code></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#binary_logical_operators\">Logical operators</a> only rely on the <a href=\"/en-US/docs/Glossary/Truthy\">truthiness</a> of operands</li>\n</ul>\n<p>A couple of operators do not support BigInt at all:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (<code>+</code>)</a> cannot be supported due to conflicting usage in asm.js, so it has been left out <a href=\"https://github.com/tc39/proposal-bigint/blob/master/ADVANCED.md#dont-break-asmjs\" class=\"external\" target=\"_blank\">in order to not break asm.js</a>.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (<code>&gt;&gt;&gt;</code>)</a> is the only bitwise operator that's unsupported, as every BigInt value is signed.</li>\n</ul>\n<p>Special cases:</p>\n<ul>\n  <li>Addition (<code>+</code>) involving a string and a BigInt returns a string.</li>\n  <li>Division (<code>/</code>) truncates fractional components towards zero, since BigInt is unable to represent fractional quantities.</li>\n</ul>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> previousMaxSafe <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9007199254740991n</span>\n<span class=\"token keyword\">const</span> maxPlusOne <span class=\"token operator\">=</span> previousMaxSafe <span class=\"token operator\">+</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9007199254740992n</span>\n<span class=\"token keyword\">const</span> theFuture <span class=\"token operator\">=</span> previousMaxSafe <span class=\"token operator\">+</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9007199254740993n, this works now!</span>\n<span class=\"token keyword\">const</span> multi <span class=\"token operator\">=</span> previousMaxSafe <span class=\"token operator\">*</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 18014398509481982n</span>\n<span class=\"token keyword\">const</span> subtr <span class=\"token operator\">=</span> multi <span class=\"token operator\">-</span> <span class=\"token number\">10n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 18014398509481972n</span>\n<span class=\"token keyword\">const</span> mod <span class=\"token operator\">=</span> multi <span class=\"token operator\">%</span> <span class=\"token number\">10n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2n</span>\n<span class=\"token keyword\">const</span> bigN <span class=\"token operator\">=</span> <span class=\"token number\">2n</span> <span class=\"token operator\">**</span> <span class=\"token number\">54n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 18014398509481984n</span>\nbigN <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -18014398509481984n</span>\n<span class=\"token keyword\">const</span> expected <span class=\"token operator\">=</span> <span class=\"token number\">4n</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2n</span>\n<span class=\"token keyword\">const</span> truncated <span class=\"token operator\">=</span> <span class=\"token number\">5n</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2n, not 2.5n</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"comparisons","title":"Comparisons","isH3":true,"content":"<p>A BigInt value is not strictly equal to a Number value, but it <em>is</em> loosely so:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token number\">0n</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">0n</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>A Number value and a BigInt value may be compared as usual:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token number\">1n</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">2n</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">2n</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">2n</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>BigInt values and Number values may be mixed in arrays and sorted:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mixed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [4n, 6, -12n, 10, 4, 0, 0n]</span>\n\nmixed<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default sorting behavior</span>\n<span class=\"token comment\">// [ -12n, 0, 0n, 10, 4n, 4, 6 ]</span>\n\nmixed<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// won't work since subtraction will not work with mixed types</span>\n<span class=\"token comment\">// TypeError: can't convert BigInt value to Number value</span>\n\n<span class=\"token comment\">// sort with an appropriate numeric comparator</span>\nmixed<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> a <span class=\"token operator\">&gt;</span> b <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ -12n, 0, 0n, 4n, 4, 6, 10 ]</span>\n</code></pre></div>\n<p>Note that comparisons with <code>Object</code>-wrapped BigInt values act as with other objects, only indicating equality when the same object instance is compared:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\no <span class=\"token operator\">===</span> o<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>Because coercing between Number values and BigInt values can lead to loss of precision, the following are recommended:</p>\n<ul>\n  <li>Only use a BigInt value when values greater than 2<sup>53</sup> are reasonably expected.</li>\n  <li>Don't coerce between BigInt values and Number values.</li>\n</ul>"}},{"type":"prose","value":{"id":"conditionals","title":"Conditionals","isH3":true,"content":"<p>A BigInt value follows the same conversion rules as Numbers when:</p>\n<ul>\n  <li>it is converted to a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>: via the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> function;</li>\n  <li>when used with <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\">logical operators</a> <code>||</code>, <code>&amp;&amp;</code>, and <code>!</code>; or</li>\n  <li>within a conditional test like an <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"><code>if</code></a> statement.</li>\n</ul>\n<p>Namely, only <code>0n</code> is <a href=\"/en-US/docs/Glossary/Falsy\">falsy</a>; everything else is <a href=\"/en-US/docs/Glossary/Truthy\">truthy</a>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from the if!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from the else!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// \"Hello from the else!\"</span>\n\n<span class=\"token number\">0n</span> <span class=\"token operator\">||</span> <span class=\"token number\">12n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12n</span>\n<span class=\"token number\">0n</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">12n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0n</span>\n<span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">12n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">!</span><span class=\"token number\">12n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">!</span><span class=\"token number\">0n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"cryptography","title":"Cryptography","isH3":true,"content":"<p>The operations supported on BigInt values are not constant-time and are thus open to <a href=\"https://en.wikipedia.org/wiki/Timing_attack\" class=\"external\" target=\"_blank\">timing attacks</a>. JavaScript BigInts therefore could be dangerous for use in cryptography without mitigating factors. As a very generic example, an attacker could measure the time difference between <code>101n ** 65537n</code> and <code>17n ** 9999n</code>, and deduce the magnitude of secrets, such as private keys, based on the time elapsed. If you still have to use BigInts, take a look at the <a href=\"https://timing.attacks.cr.yp.to/programming.html\" class=\"external\" target=\"_blank\">Timing attack FAQ</a> for general advice regarding the issue.</p>"}},{"type":"prose","value":{"id":"use_within_json","title":"Use within JSON","isH3":true,"content":"<p>Using <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> with any BigInt value will raise a <code>TypeError</code>, as BigInt values aren't serialized in JSON by default. However, <code>JSON.stringify()</code> specifically leaves a backdoor for BigInt values: it would try to call the BigInt's <code>toJSON()</code> method. (It doesn't do so for any other primitive values.) Therefore, you can implement your own <code>toJSON()</code> method (which is one of the few cases where patching built-in objects is not explicitly discouraged):</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">BigInt</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toJSON</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Instead of throwing, <code>JSON.stringify()</code> now produces a string like this:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1n</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {\"a\":\"1\"}</span>\n</code></pre></div>\n<p>If you do not wish to patch <code>BigInt.prototype</code>, you can use the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\"><code>replacer</code></a> parameter of <code>JSON.stringify</code> to serialize BigInt values:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">replacer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"bigint\"</span> <span class=\"token operator\">?</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> value<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">big</span><span class=\"token operator\">:</span> <span class=\"token number\">18014398509481982n</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stringified <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> replacer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {\"number\":1,\"big\":\"18014398509481982\"}</span>\n</code></pre></div>\n<p>If you have JSON data containing values you know will be large integers, you can use the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#using_the_reviver_parameter\"><code>reviver</code></a> parameter of <code>JSON.parse</code> to handle them:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reviver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">\"big\"</span> <span class=\"token operator\">?</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token string\">'{\"number\":1,\"big\":\"18014398509481982\"}'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> reviver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { number: 1, big: 18014398509481982n }</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> While it's possible to make the replacer of <code>JSON.stringify()</code> generic and properly serialize BigInt values for all objects, the reviver of <code>JSON.parse()</code> must be specific to the payload shape you expect, because the serialization is <em>lossy</em>: it's not possible to distinguish between a string that represents a BigInt and a normal string.</p>\n</div>"}},{"type":"prose","value":{"id":"bigint_coercion","title":"BigInt coercion","isH3":true,"content":"<p>Many built-in operations that expect BigInts first coerce their arguments to BigInts. <a href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tobigint\" class=\"external\" target=\"_blank\">The operation</a> can be summarized as follows:</p>\n<ul>\n  <li>BigInts are returned as-is.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> throw a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>.</li>\n  <li><code>true</code> turns into <code>1n</code>; <code>false</code> turns into <code>0n</code>.</li>\n  <li>Strings are converted by parsing them as if they contain an integer literal. Any parsing failure results in a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\"><code>SyntaxError</code></a>. The syntax is a subset of <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">string numeric literals</a>, where decimal points or exponent indicators are not allowed.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Numbers</a> throw a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> to prevent unintended implicit coercion causing loss of precision.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbols</a> throw a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>.</li>\n  <li>Objects are first <a href=\"/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion\">converted to a primitive</a> by calling their <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\"><code>[@@toPrimitive]()</code></a> (with <code>\"number\"</code> as hint), <code>valueOf()</code>, and <code>toString()</code> methods, in that order. The resulting primitive is then converted to a BigInt.</li>\n</ul>\n<p>The best way to achieve nearly the same effect in JavaScript is through the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\"><code>BigInt()</code></a> function: <code>BigInt(x)</code> uses the same algorithm to convert <code>x</code>, except that <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Numbers</a> don't throw a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>, but are converted to BigInts if they are integers.</p>\n<p>Note that built-in operations expecting BigInts often truncate the BigInt to a fixed width after coercion. This includes <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN\"><code>BigInt.asIntN()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN\"><code>BigInt.asUintN()</code></a>, and methods of <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>.</p>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"bigint\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\"><code>BigInt()</code></a></dt>\n  <dd>\n    <p>Creates a new BigInt value.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_methods","title":"Static methods","isH3":false,"content":"<dl>\n  <dt id=\"bigint.asintn\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN\"><code>BigInt.asIntN()</code></a></dt>\n  <dd>\n    <p>Clamps a BigInt value to a signed integer value, and returns that value.</p>\n  </dd>\n  <dt id=\"bigint.asuintn\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN\"><code>BigInt.asUintN()</code></a></dt>\n  <dd>\n    <p>Clamps a BigInt value to an unsigned integer value, and returns that value.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<p>These properties are defined on <code>BigInt.prototype</code> and shared by all <code>BigInt</code> instances.</p>\n<dl>\n  <dt id=\"bigint.prototype.constructor\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>BigInt.prototype.constructor</code></a></dt>\n  <dd>\n    <p>The constructor function that created the instance object. For <code>BigInt</code> instances, the initial value is the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\"><code>BigInt</code></a> constructor.</p>\n  </dd>\n  <dt id=\"bigint.prototypetostringtag\"><a href=\"#bigint.prototypetostringtag\"><code>BigInt.prototype[@@toStringTag]</code></a></dt>\n  <dd>\n    <p>The initial value of the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\"><code>@@toStringTag</code></a> property is the string <code>\"BigInt\"</code>. This property is used in <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a>. However, because <code>BigInt</code> also has its own <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString\"><code>toString()</code></a> method, this property is not used unless you call <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Object.prototype.toString.call()</code></a> with a BigInt as <code>thisArg</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"bigint.prototype.tolocalestring\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString\"><code>BigInt.prototype.toLocaleString()</code></a></dt>\n  <dd>\n    <p>Returns a string with a language-sensitive representation of this BigInt value. Overrides the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a> method.</p>\n  </dd>\n  <dt id=\"bigint.prototype.tostring\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString\"><code>BigInt.prototype.toString()</code></a></dt>\n  <dd>\n    <p>Returns a string representing this BigInt value in the specified radix (base). Overrides the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> method.</p>\n  </dd>\n  <dt id=\"bigint.prototype.valueof\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/valueOf\"><code>BigInt.prototype.valueOf()</code></a></dt>\n  <dd>\n    <p>Returns this BigInt value. Overrides the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a> method.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"calculating_primes","title":"Calculating Primes","isH3":true,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Returns true if the passed BigInt value is a prime number</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">%</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Takes a BigInt value as an argument, returns nth prime number as a BigInt value</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">nthPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nth</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> maybePrime <span class=\"token operator\">=</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> prime <span class=\"token operator\">=</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nth <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span>maybePrime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nth<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      prime <span class=\"token operator\">=</span> maybePrime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    maybePrime<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> prime<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">nthPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">20n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 73n</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.BigInt"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.BigInt"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a></li>\n</ul>"}}],"toc":[{"text":"Description","id":"description"},{"text":"Constructor","id":"constructor"},{"text":"Static methods","id":"static_methods"},{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"BigInt values represent numeric values which are too large to be represented by the number primitive.","popularity":0.0836,"modified":"2023-09-28T17:18:11.000Z","source":{"folder":"en-us/web/javascript/reference/global_objects/bigint","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/bigint/index.md","last_commit_url":"https://github.com/mdn/content/commit/9825932796e2e18be58a1eb93fcd266a57900c9e","filename":"index.md"},"short_title":"BigInt","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"Reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt","title":"BigInt"}],"pageTitle":"BigInt - JavaScript | MDN","noIndexing":false}}