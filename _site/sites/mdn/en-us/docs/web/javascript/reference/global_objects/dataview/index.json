{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"DataView","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView","locale":"en-US","native":"English (US)","browserCompat":["javascript.builtins.DataView"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><em><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" aria-current=\"page\"><code>DataView</code></a></em></strong></li><li><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/DataView\"><code>DataView() constructor</code></a></li></ol></details></li><li><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer\"><code>DataView.prototype.buffer</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength\"><code>DataView.prototype.byteLength</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset\"><code>DataView.prototype.byteOffset</code></a></li></ol></details></li><li><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigInt64\"><code>DataView.prototype.getBigInt64()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigUint64\"><code>DataView.prototype.getBigUint64()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32\"><code>DataView.prototype.getFloat32()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64\"><code>DataView.prototype.getFloat64()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16\"><code>DataView.prototype.getInt16()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32\"><code>DataView.prototype.getInt32()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8\"><code>DataView.prototype.getInt8()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16\"><code>DataView.prototype.getUint16()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32\"><code>DataView.prototype.getUint32()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8\"><code>DataView.prototype.getUint8()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigInt64\"><code>DataView.prototype.setBigInt64()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64\"><code>DataView.prototype.setBigUint64()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32\"><code>DataView.prototype.setFloat32()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64\"><code>DataView.prototype.setFloat64()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16\"><code>DataView.prototype.setInt16()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32\"><code>DataView.prototype.setInt32()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8\"><code>DataView.prototype.setInt8()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16\"><code>DataView.prototype.setUint16()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32\"><code>DataView.prototype.setUint32()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8\"><code>DataView.prototype.setUint8()</code></a></li></ol></details></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><details><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function() constructor</code></a></li></ol></details></li><li><details><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function: displayName</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function: length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function: name</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function: prototype</code></a></li></ol></details></li><li><details><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance\"><code>Function.prototype[@@hasInstance]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></details></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><details><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li></ol></details></li><li><details><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></details></li></ol>","sidebarMacro":"JSRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>DataView</code></strong> view provides a low-level interface for reading and writing multiple number types in a binary <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, without having to care about the platform's <a href=\"/en-US/docs/Glossary/Endianness\">endianness</a>.</p>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":""}},{"type":"prose","value":{"id":"endianness","title":"Endianness","isH3":true,"content":"<p>Multi-byte number formats are represented in memory differently depending on machine architecture — see <a href=\"/en-US/docs/Glossary/Endianness\">Endianness</a> for an explanation. <code>DataView</code> accessors provide explicit control of how data is accessed, regardless of the executing computer's endianness.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> littleEndian <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataView</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setInt16</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* littleEndian */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Int16Array uses the platform's endianness.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Int16Array</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>littleEndian<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true or false</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"64-bit_integer_values","title":"64-bit Integer Values","isH3":true,"content":"<p>Some browsers don't have support for <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigInt64\"><code>DataView.prototype.setBigInt64()</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64\"><code>DataView.prototype.setBigUint64()</code></a>. So to enable 64-bit operations in your code that will work across browsers, you could implement your own <code>getUint64()</code> function, to obtain values with precision up to <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> — which could suffice for certain cases.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getUint64</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataview<span class=\"token punctuation\">,</span> byteOffset<span class=\"token punctuation\">,</span> littleEndian</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// split 64-bit number into two 32-bit (4-byte) parts</span>\n  <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> dataview<span class=\"token punctuation\">.</span><span class=\"token function\">getUint32</span><span class=\"token punctuation\">(</span>byteOffset<span class=\"token punctuation\">,</span> littleEndian<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> dataview<span class=\"token punctuation\">.</span><span class=\"token function\">getUint32</span><span class=\"token punctuation\">(</span>byteOffset <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> littleEndian<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// combine the two 32-bit values</span>\n  <span class=\"token keyword\">const</span> combined <span class=\"token operator\">=</span> littleEndian\n    <span class=\"token operator\">?</span> left <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">32</span> <span class=\"token operator\">*</span> right\n    <span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">32</span> <span class=\"token operator\">*</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span>combined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>combined<span class=\"token punctuation\">,</span> <span class=\"token string\">\"exceeds MAX_SAFE_INTEGER. Precision may be lost\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> combined<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Alternatively, if you need full 64-bit range, you can create a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>. Further, although native BigInts are much faster than user-land library equivalents, BigInts will always be much slower than 32-bit integers in JavaScript due to the nature of their variable size.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> BigInt <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>BigInt<span class=\"token punctuation\">,</span>\n  bigThirtyTwo <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  bigZero <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUint64BigInt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataview<span class=\"token punctuation\">,</span> byteOffset<span class=\"token punctuation\">,</span> littleEndian</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// split 64-bit number into two 32-bit (4-byte) parts</span>\n  <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>dataview<span class=\"token punctuation\">.</span><span class=\"token function\">getUint32</span><span class=\"token punctuation\">(</span>byteOffset <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>littleEndian<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>\n    dataview<span class=\"token punctuation\">.</span><span class=\"token function\">getUint32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byteOffset <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>littleEndian<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// combine the two 32-bit values and return</span>\n  <span class=\"token keyword\">return</span> littleEndian\n    <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;&lt;</span> bigThirtyTwo<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> left\n    <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;&lt;</span> bigThirtyTwo<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"dataview\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/DataView\"><code>DataView()</code></a></dt>\n  <dd>\n    <p>Creates a new <code>DataView</code> object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<p>These properties are defined on <code>DataView.prototype</code> and shared by all <code>DataView</code> instances.</p>\n<dl>\n  <dt id=\"dataview.prototype.buffer\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer\"><code>DataView.prototype.buffer</code></a></dt>\n  <dd>\n    <p>The <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> referenced by this view. Fixed at construction time and thus <strong>read only.</strong></p>\n  </dd>\n  <dt id=\"dataview.prototype.bytelength\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength\"><code>DataView.prototype.byteLength</code></a></dt>\n  <dd>\n    <p>The length (in bytes) of this view. Fixed at construction time and thus <strong>read only.</strong></p>\n  </dd>\n  <dt id=\"dataview.prototype.byteoffset\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset\"><code>DataView.prototype.byteOffset</code></a></dt>\n  <dd>\n    <p>The offset (in bytes) of this view from the start of its <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>. Fixed at construction time and thus <strong>read only.</strong></p>\n  </dd>\n  <dt id=\"dataview.prototype.constructor\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>DataView.prototype.constructor</code></a></dt>\n  <dd>\n    <p>The constructor function that created the instance object. For <code>DataView</code> instances, the initial value is the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/DataView\"><code>DataView</code></a> constructor.</p>\n  </dd>\n  <dt id=\"dataview.prototypetostringtag\"><a href=\"#dataview.prototypetostringtag\"><code>DataView.prototype[@@toStringTag]</code></a></dt>\n  <dd>\n    <p>The initial value of the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\"><code>@@toStringTag</code></a> property is the string <code>\"DataView\"</code>. This property is used in <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"dataview.prototype.getbigint64\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigInt64\"><code>DataView.prototype.getBigInt64()</code></a></dt>\n  <dd>\n    <p>Reads 8 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 64-bit signed integer.</p>\n  </dd>\n  <dt id=\"dataview.prototype.getbiguint64\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigUint64\"><code>DataView.prototype.getBigUint64()</code></a></dt>\n  <dd>\n    <p>Reads 8 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 64-bit unsigned integer.</p>\n  </dd>\n  <dt id=\"dataview.prototype.getfloat32\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32\"><code>DataView.prototype.getFloat32()</code></a></dt>\n  <dd>\n    <p>Reads 4 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 32-bit floating point number.</p>\n  </dd>\n  <dt id=\"dataview.prototype.getfloat64\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64\"><code>DataView.prototype.getFloat64()</code></a></dt>\n  <dd>\n    <p>Reads 8 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 64-bit floating point number.</p>\n  </dd>\n  <dt id=\"dataview.prototype.getint16\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16\"><code>DataView.prototype.getInt16()</code></a></dt>\n  <dd>\n    <p>Reads 2 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 16-bit signed integer.</p>\n  </dd>\n  <dt id=\"dataview.prototype.getint32\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32\"><code>DataView.prototype.getInt32()</code></a></dt>\n  <dd>\n    <p>Reads 4 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 32-bit signed integer.</p>\n  </dd>\n  <dt id=\"dataview.prototype.getint8\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8\"><code>DataView.prototype.getInt8()</code></a></dt>\n  <dd>\n    <p>Reads 1 byte at the specified byte offset of this <code>DataView</code> and interprets it as an 8-bit signed integer.</p>\n  </dd>\n  <dt id=\"dataview.prototype.getuint16\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16\"><code>DataView.prototype.getUint16()</code></a></dt>\n  <dd>\n    <p>Reads 2 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 16-bit unsigned integer.</p>\n  </dd>\n  <dt id=\"dataview.prototype.getuint32\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32\"><code>DataView.prototype.getUint32()</code></a></dt>\n  <dd>\n    <p>Reads 4 bytes starting at the specified byte offset of this <code>DataView</code> and interprets them as a 32-bit unsigned integer.</p>\n  </dd>\n  <dt id=\"dataview.prototype.getuint8\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8\"><code>DataView.prototype.getUint8()</code></a></dt>\n  <dd>\n    <p>Reads 1 byte at the specified byte offset of this <code>DataView</code> and interprets it as an 8-bit unsigned integer.</p>\n  </dd>\n  <dt id=\"dataview.prototype.setbigint64\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigInt64\"><code>DataView.prototype.setBigInt64()</code></a></dt>\n  <dd>\n    <p>Takes a BigInt and stores it as a 64-bit signed integer in the 8 bytes starting at the specified byte offset of this <code>DataView</code>.</p>\n  </dd>\n  <dt id=\"dataview.prototype.setbiguint64\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64\"><code>DataView.prototype.setBigUint64()</code></a></dt>\n  <dd>\n    <p>Takes a BigInt and stores it as a 64-bit unsigned integer in the 8 bytes starting at the specified byte offset of this <code>DataView</code>.</p>\n  </dd>\n  <dt id=\"dataview.prototype.setfloat32\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32\"><code>DataView.prototype.setFloat32()</code></a></dt>\n  <dd>\n    <p>Takes a number and stores it as a 32-bit float in the 4 bytes starting at the specified byte offset of this <code>DataView</code>.</p>\n  </dd>\n  <dt id=\"dataview.prototype.setfloat64\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64\"><code>DataView.prototype.setFloat64()</code></a></dt>\n  <dd>\n    <p>Takes a number and stores it as a 64-bit float in the 8 bytes starting at the specified byte offset of this <code>DataView</code>.</p>\n  </dd>\n  <dt id=\"dataview.prototype.setint16\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16\"><code>DataView.prototype.setInt16()</code></a></dt>\n  <dd>\n    <p>Takes a number and stores it as a 16-bit signed integer in the 2 bytes at the specified byte offset of this <code>DataView</code>.</p>\n  </dd>\n  <dt id=\"dataview.prototype.setint32\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32\"><code>DataView.prototype.setInt32()</code></a></dt>\n  <dd>\n    <p>Takes a number and stores it as a 32-bit signed integer in the 4 bytes at the specified byte offset of this <code>DataView</code>.</p>\n  </dd>\n  <dt id=\"dataview.prototype.setint8\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8\"><code>DataView.prototype.setInt8()</code></a></dt>\n  <dd>\n    <p>Takes a number and stores it as an 8-bit signed integer in the byte at the specified byte offset of this <code>DataView</code>.</p>\n  </dd>\n  <dt id=\"dataview.prototype.setuint16\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16\"><code>DataView.prototype.setUint16()</code></a></dt>\n  <dd>\n    <p>Takes a number and stores it as a 16-bit unsigned integer in the 2 bytes at the specified byte offset of this <code>DataView</code>.</p>\n  </dd>\n  <dt id=\"dataview.prototype.setuint32\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32\"><code>DataView.prototype.setUint32()</code></a></dt>\n  <dd>\n    <p>Takes a number and stores it as a 32-bit unsigned integer in the 4 bytes at the specified byte offset of this <code>DataView</code>.</p>\n  </dd>\n  <dt id=\"dataview.prototype.setuint8\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8\"><code>DataView.prototype.setUint8()</code></a></dt>\n  <dd>\n    <p>Takes a number and stores it as an 8-bit unsigned integer in the byte at the specified byte offset of this <code>DataView</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"using_dataview","title":"Using DataView","isH3":true,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataView</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setInt16</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">getInt16</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.DataView"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.DataView"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js#ecmascript-typed-arrays\" class=\"external\" target=\"_blank\">Polyfill of <code>DataView</code> in <code>core-js</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a></li>\n</ul>"}}],"toc":[{"text":"Description","id":"description"},{"text":"Constructor","id":"constructor"},{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform's endianness.","popularity":0.0246,"modified":"2023-08-21T07:19:52.000Z","source":{"folder":"en-us/web/javascript/reference/global_objects/dataview","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/dataview/index.md","last_commit_url":"https://github.com/mdn/content/commit/70f09675ddcfc75a3bb66d2dce4cf82738948a37","filename":"index.md"},"short_title":"DataView","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"Reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView","title":"DataView"}],"pageTitle":"DataView - JavaScript | MDN","noIndexing":false}}