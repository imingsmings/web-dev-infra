{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"String","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String","locale":"en-US","native":"English (US)","browserCompat":["javascript.builtins.String"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><em><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\" aria-current=\"page\"><code>String</code></a></em></strong></li><li><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\"><code>String() constructor</code></a></li></ol></details></li><li><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\"><code>String: length</code></a></li></ol></details></li><li><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator\"><code>String.prototype[@@iterator]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor\"><code>String.prototype.anchor()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at\"><code>String.prototype.at()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big\"><code>String.prototype.big()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink\"><code>String.prototype.blink()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold\"><code>String.prototype.bold()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\"><code>String.prototype.charAt()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\"><code>String.prototype.charCodeAt()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\"><code>String.prototype.codePointAt()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat\"><code>String.prototype.concat()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\"><code>String.prototype.endsWith()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fixed\"><code>String.prototype.fixed()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor\"><code>String.prototype.fontcolor()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\"><code>String.prototype.fontsize()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\"><code>String.fromCharCode()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\"><code>String.fromCodePoint()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\"><code>String.prototype.includes()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>String.prototype.indexOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed\"><code>String.prototype.isWellFormed()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics\"><code>String.prototype.italics()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\"><code>String.prototype.lastIndexOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link\"><code>String.prototype.link()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"><code>String.prototype.localeCompare()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\"><code>String.prototype.normalize()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\"><code>String.prototype.padEnd()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\"><code>String.prototype.padStart()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\"><code>String.prototype.repeat()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>String.prototype.replaceAll()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\"><code>String.prototype.slice()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small\"><code>String.prototype.small()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\"><code>String.prototype.startsWith()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike\"><code>String.prototype.strike()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub\"><code>String.prototype.sub()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr\"><code>String.prototype.substr()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\"><code>String.prototype.substring()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup\"><code>String.prototype.sup()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\"><code>String.prototype.toLocaleLowerCase()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\"><code>String.prototype.toLocaleUpperCase()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"><code>String.prototype.toLowerCase()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString\"><code>String.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"><code>String.prototype.toUpperCase()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed\"><code>String.prototype.toWellFormed()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\"><code>String.prototype.trim()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd\"><code>String.prototype.trimEnd()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart\"><code>String.prototype.trimStart()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\"><code>String.prototype.valueOf()</code></a></li></ol></details></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><details><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function() constructor</code></a></li></ol></details></li><li><details><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function: displayName</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function: length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function: name</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function: prototype</code></a></li></ol></details></li><li><details><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance\"><code>Function.prototype[@@hasInstance]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></details></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><details><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li></ol></details></li><li><details><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></details></li></ol>","sidebarMacro":"JSRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>String</code></strong> object is used to represent and manipulate a\n  sequence of characters.\n</p>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>\n  Strings are useful for holding data that can be represented in text form. Some of the\n  most-used operations on strings are to check their <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\"><code>length</code></a>, to build and concatenate them using the\n  <a href=\"/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#string_operators\"><code>+</code> and <code>+=</code> string operators</a>,\n  checking for the existence or location of substrings with the\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>indexOf()</code></a> method, or extracting substrings\n  with the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\"><code>substring()</code></a> method.\n</p>"}},{"type":"prose","value":{"id":"creating_strings","title":"Creating strings","isH3":true,"content":"<p>\n  Strings can be created as primitives, from string literals, or as objects, using the\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\"><code>String()</code></a> constructor:\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"A string primitive\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> string2 <span class=\"token operator\">=</span> <span class=\"token string\">'Also a string primitive'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> string3 <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Yet another string primitive</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> string4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A String object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  String primitives and string objects share many behaviors, but have other important differences and caveats.\n  See \"<a href=\"#string_primitives_and_string_objects\">String primitives and String objects</a>\" below.\n</p>\n<p>\n  String literals can be specified using single or double quotes, which are treated\n  identically, or using the backtick character <kbd>`</kbd>. This last form specifies a <a href=\"/en-US/docs/Web/JavaScript/Reference/Template_literals\">template literal</a>:\n  with this form you can interpolate expressions. For more information on the syntax of string literals, see <a href=\"/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals\">lexical grammar</a>.\n</p>"}},{"type":"prose","value":{"id":"character_access","title":"Character access","isH3":true,"content":"<p>\n  There are two ways to access an individual character in a string. The first is the\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\"><code>charAt()</code></a> method:\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// gives value \"a\"</span>\n</code></pre></div>\n<p>The other way is to treat the string as an array-like object, where individual characters correspond to a numerical index:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// gives value \"a\"</span>\n</code></pre></div>\n<p>\n  When using bracket notation for character access, attempting to delete or assign a\n  value to these properties will not succeed. The properties involved are neither writable\n  nor configurable. (See <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> for more information.)\n</p>"}},{"type":"prose","value":{"id":"comparing_strings","title":"Comparing strings","isH3":true,"content":"<p>Use the <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\">less-than and greater-than operators</a> to compare strings:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// true</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is less than </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is greater than </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> are equal.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Note that all comparison operators, including <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\"><code>===</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Equality\"><code>==</code></a>, compare strings case-sensitively. A common way to compare strings case-insensitively is to convert both to the same case (upper or lower) before comparing them.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">areEqualCaseInsensitive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str1<span class=\"token punctuation\">,</span> str2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The choice of whether to transform by <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"><code>toUpperCase()</code></a> or <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"><code>toLowerCase()</code></a> is mostly arbitrary, and neither one is fully robust when extending beyond the Latin alphabet. For example, the German lowercase letter <code>ß</code> and <code>ss</code> are both transformed to <code>SS</code> by <code>toUpperCase()</code>, while the Turkish letter <code>ı</code> would be falsely reported as unequal to <code>I</code> by <code>toLowerCase()</code> unless specifically using <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\"><code>toLocaleLowerCase(\"tr\")</code></a>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">areEqualInUpperCase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str1<span class=\"token punctuation\">,</span> str2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  str1<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">areEqualInLowerCase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str1<span class=\"token punctuation\">,</span> str2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  str1<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">areEqualInUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ß\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true; should be false</span>\n<span class=\"token function\">areEqualInLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ı\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false; should be true</span>\n</code></pre></div>\n<p>A locale-aware and robust solution for testing case-insensitive equality is to use the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator\"><code>Intl.Collator</code></a> API or the string's <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"><code>localeCompare()</code></a> method — they share the same interface — with the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#sensitivity\"><code>sensitivity</code></a> option set to <code>\"accent\"</code> or <code>\"base\"</code>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> areEqual <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> locale <span class=\"token operator\">=</span> <span class=\"token string\">\"en-US\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  str1<span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> locale<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">sensitivity</span><span class=\"token operator\">:</span> <span class=\"token string\">\"accent\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">areEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ß\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ss\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"de\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">areEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ı\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>The <code>localeCompare()</code> method enables string comparison in a similar fashion as <code>strcmp()</code> — it allows sorting strings in a locale-aware manner.</p>"}},{"type":"prose","value":{"id":"string_primitives_and_string_objects","title":"String primitives and String objects","isH3":true,"content":"<p>\n  Note that JavaScript distinguishes between <code>String</code> objects and\n  <a href=\"/en-US/docs/Glossary/Primitive\">primitive string</a> values. (The same is true of\n  <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Numbers</code></a>.)\n</p>\n<p>\n  String literals (denoted by double or single quotes) and strings returned from\n  <code>String</code> calls in a non-constructor context (that is, called without using\n  the <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> keyword) are primitive strings. In contexts where a\n  method is to be invoked on a primitive string or a property lookup occurs, JavaScript\n  will automatically wrap the string primitive and call the method or perform the property\n  lookup on the wrapper object instead.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> strPrim <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A literal is a string primitive</span>\n<span class=\"token keyword\">const</span> strPrim2 <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Coerced into the string primitive \"1\"</span>\n<span class=\"token keyword\">const</span> strPrim3 <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Coerced into the string primitive \"true\"</span>\n<span class=\"token keyword\">const</span> strObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>strPrim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// String with new returns a string wrapper object.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> strPrim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> strPrim2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> strPrim3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> strObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"</span>\n</code></pre></div>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>Warning:</strong> You should rarely find yourself using <code>String</code> as a constructor.</p>\n</div>\n<p>\n  String primitives and <code>String</code> objects also give different results when\n  using <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a>. Primitives passed to\n  <code>eval</code> are treated as source code; <code>String</code> objects are treated as\n  all other objects are, by returning the object. For example:\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"2 + 2\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// creates a string primitive</span>\n<span class=\"token keyword\">const</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2 + 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// creates a String object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns the number 4</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns the string \"2 + 2\"</span>\n</code></pre></div>\n<p>\n  For these reasons, the code may break when it encounters <code>String</code> objects\n  when it expects a primitive string instead, although generally, authors need not worry\n  about the distinction.\n</p>\n<p>\n  A <code>String</code> object can always be converted to its primitive counterpart with\n  the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\"><code>valueOf()</code></a> method.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns the number 4</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"string_coercion","title":"String coercion","isH3":true,"content":"<p>Many built-in operations that expect strings first coerce their arguments to strings (which is largely why <code>String</code> objects behave similarly to string primitives). <a href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tostring\" class=\"external\" target=\"_blank\">The operation</a> can be summarized as follows:</p>\n<ul>\n  <li>Strings are returned as-is.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> turns into <code>\"undefined\"</code>.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> turns into <code>\"null\"</code>.</li>\n  <li><code>true</code> turns into <code>\"true\"</code>; <code>false</code> turns into <code>\"false\"</code>.</li>\n  <li>Numbers are converted with the same algorithm as <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\"><code>toString(10)</code></a>.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInts</a> are converted with the same algorithm as <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString\"><code>toString(10)</code></a>.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbols</a> throw a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>.</li>\n  <li>Objects are first <a href=\"/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion\">converted to a primitive</a> by calling its <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\"><code>[@@toPrimitive]()</code></a> (with <code>\"string\"</code> as hint), <code>toString()</code>, and <code>valueOf()</code> methods, in that order. The resulting primitive is then converted to a string.</li>\n</ul>\n<p>There are several ways to achieve nearly the same effect in JavaScript.</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Template_literals\">Template literal</a>: <code>`${x}`</code> does exactly the string coercion steps explained above for the embedded expression.</li>\n  <li>The <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\"><code>String()</code></a> function: <code>String(x)</code> uses the same algorithm to convert <code>x</code>, except that <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbols</a> don't throw a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>, but return <code>\"Symbol(description)\"</code>, where <code>description</code> is the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description\">description</a> of the Symbol.</li>\n  <li>Using the <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Addition\"><code>+</code> operator</a>: <code>\"\" + x</code> coerces its operand to a <em>primitive</em> instead of a <em>string</em>, and, for some objects, has entirely different behaviors from normal string coercion. See its <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Addition\">reference page</a> for more details.</li>\n</ul>\n<p>Depending on your use case, you may want to use <code>`${x}`</code> (to mimic built-in behavior) or <code>String(x)</code> (to handle symbol values without throwing an error), but you should not use <code>\"\" + x</code>.</p>"}},{"type":"prose","value":{"id":"utf-16_characters_unicode_code_points_and_grapheme_clusters","title":"UTF-16 characters, Unicode code points, and grapheme clusters","isH3":true,"content":"<p>Strings are represented fundamentally as sequences of <a href=\"https://en.wikipedia.org/wiki/UTF-16\" class=\"external\" target=\"_blank\">UTF-16 code units</a>. In UTF-16 encoding, every code unit is exact 16 bits long. This means there are a maximum of 2<sup>16</sup>, or 65536 possible characters representable as single UTF-16 code units. This character set is called the <a href=\"https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane\" class=\"external\" target=\"_blank\">basic multilingual plane (BMP)</a>, and includes the most common characters like the Latin, Greek, Cyrillic alphabets, as well as many East Asian characters. Each code unit can be written in a string with <code>\\u</code> followed by exactly four hex digits.</p>\n<p>However, the entire Unicode character set is much, much bigger than 65536. The extra characters are stored in UTF-16 as <em>surrogate pairs</em>, which are pairs of 16-bit code units that represent a single character. To avoid ambiguity, the two parts of the pair must be between <code>0xD800</code> and <code>0xDFFF</code>, and these code units are not used to encode single-code-unit characters. (More precisely, leading surrogates, also called high-surrogate code units, have values between <code>0xD800</code> and <code>0xDBFF</code>, inclusive, while trailing surrogates, also called low-surrogate code units, have values between <code>0xDC00</code> and <code>0xDFFF</code>, inclusive.) Each Unicode character, comprised of one or two UTF-16 code units, is also called a <em>Unicode code point</em>. Each Unicode code point can be written in a string with <code>\\u{xxxxxx}</code> where <code>xxxxxx</code> represents 1–6 hex digits.</p>\n<p>A \"lone surrogate\" is a 16-bit code unit satisfying one of the descriptions below:</p>\n<ul>\n  <li>It is in the range <code>0xD800</code>–<code>0xDBFF</code>, inclusive (i.e. is a leading surrogate), but it is the last code unit in the string, or the next code unit is not a trailing surrogate.</li>\n  <li>It is in the range <code>0xDC00</code>–<code>0xDFFF</code>, inclusive (i.e. is a trailing surrogate), but it is the first code unit in the string, or the previous code unit is not a leading surrogate.</li>\n</ul>\n<p>Lone surrogates do not represent any Unicode character. Although most JavaScript built-in methods handle them correctly because they all work based on UTF-16 code units, lone surrogates are often not valid values when interacting with other systems — for example, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a> will throw a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\"><code>URIError</code></a> for lone surrogates, because URI encoding uses UTF-8 encoding, which does not have any encoding for lone surrogates. Strings not containing any lone surrogates are called <em>well-formed</em> strings, and are safe to be used with functions that do not deal with UTF-16 (such as <code>encodeURI()</code> or <a href=\"/en-US/docs/Web/API/TextEncoder\"><code>TextEncoder</code></a>). You can check if a string is well-formed with the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed\"><code>isWellFormed()</code></a> method, or sanitize lone surrogates with the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed\"><code>toWellFormed()</code></a> method.</p>\n<p>On top of Unicode characters, there are certain sequences of Unicode characters that should be treated as one visual unit, known as a <em>grapheme cluster</em>. The most common case is emojis: many emojis that have a range of variations are actually formed by multiple emojis, usually joined by the &lt;ZWJ&gt; (<code>U+200D</code>) character.</p>\n<p>You must be careful which level of characters you are iterating on. For example, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>split(\"\")</code></a> will split by UTF-16 code units and will separate surrogate pairs. String indexes also refer to the index of each UTF-16 code unit. On the other hand, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator\"><code>@@iterator()</code></a> iterates by Unicode code points. Iterating through grapheme clusters will require some custom code.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"😄\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['\\ud83d', '\\ude04']; splits into two lone surrogates</span>\n\n<span class=\"token comment\">// \"Backhand Index Pointing Right: Dark Skin Tone\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token string\">\"👉🏿\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['👉', '🏿']</span>\n<span class=\"token comment\">// splits into the basic \"Backhand Index Pointing Right\" emoji and</span>\n<span class=\"token comment\">// the \"Dark skin tone\" emoji</span>\n\n<span class=\"token comment\">// \"Family: Man, Boy\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token string\">\"👨‍👦\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ '👨', '‍', '👦' ]</span>\n<span class=\"token comment\">// splits into the \"Man\" and \"Boy\" emoji, joined by a ZWJ</span>\n\n<span class=\"token comment\">// The United Nations flag</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token string\">\"🇺🇳\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ '🇺', '🇳' ]</span>\n<span class=\"token comment\">// splits into two \"region indicator\" letters \"U\" and \"N\".</span>\n<span class=\"token comment\">// All flag emojis are formed by joining two region indicator letters</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"string\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\"><code>String()</code></a></dt>\n  <dd>\n    <p>\n      Creates a new <code>String</code> object. It performs type conversion when called as\n      a function, rather than as a constructor, which is usually more useful.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_methods","title":"Static methods","isH3":false,"content":"<dl>\n  <dt id=\"string.fromcharcode\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\"><code>String.fromCharCode()</code></a></dt>\n  <dd>\n    <p>Returns a string created by using the specified sequence of Unicode values.</p>\n  </dd>\n  <dt id=\"string.fromcodepoint\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\"><code>String.fromCodePoint()</code></a></dt>\n  <dd>\n    <p>Returns a string created by using the specified sequence of code points.</p>\n  </dd>\n  <dt id=\"string.raw\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw()</code></a></dt>\n  <dd>\n    <p>Returns a string created from a raw template string.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<p>These properties are defined on <code>String.prototype</code> and shared by all <code>String</code> instances.</p>\n<dl>\n  <dt id=\"string.prototype.constructor\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>String.prototype.constructor</code></a></dt>\n  <dd>\n    <p>The constructor function that created the instance object. For <code>String</code> instances, the initial value is the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\"><code>String</code></a> constructor.</p>\n  </dd>\n</dl>\n<p>These properties are own properties of each <code>String</code> instance.</p>\n<dl>\n  <dt id=\"length\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\"><code>length</code></a></dt>\n  <dd>\n    <p>Reflects the <code>length</code> of the string. Read-only.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"string.prototype.at\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at\"><code>String.prototype.at()</code></a></dt>\n  <dd>\n    <p>Returns the character (exactly one UTF-16 code unit) at the specified <code>index</code>. Accepts negative integers, which count back from the last string character.</p>\n  </dd>\n  <dt id=\"string.prototype.charat\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\"><code>String.prototype.charAt()</code></a></dt>\n  <dd>\n    <p>\n      Returns the character (exactly one UTF-16 code unit) at the specified\n      <code>index</code>.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.charcodeat\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\"><code>String.prototype.charCodeAt()</code></a></dt>\n  <dd>\n    <p>\n      Returns a number that is the UTF-16 code unit value at the given\n      <code>index</code>.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.codepointat\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\"><code>String.prototype.codePointAt()</code></a></dt>\n  <dd>\n    <p>\n      Returns a nonnegative integer Number that is the code point value of the UTF-16\n      encoded code point starting at the specified <code>pos</code>.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.concat\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat\"><code>String.prototype.concat()</code></a></dt>\n  <dd>\n    <p>Combines the text of two (or more) strings and returns a new string.</p>\n  </dd>\n  <dt id=\"string.prototype.endswith\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\"><code>String.prototype.endsWith()</code></a></dt>\n  <dd>\n    <p>\n      Determines whether a string ends with the characters of the string\n      <code>searchString</code>.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.includes\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\"><code>String.prototype.includes()</code></a></dt>\n  <dd>\n    <p>Determines whether the calling string contains <code>searchString</code>.</p>\n  </dd>\n  <dt id=\"string.prototype.indexof\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>String.prototype.indexOf()</code></a></dt>\n  <dd>\n    <p>\n      Returns the index within the calling <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\" aria-current=\"page\"><code>String</code></a> object of the first\n      occurrence of <code>searchValue</code>, or <code>-1</code> if not found.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.iswellformed\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed\"><code>String.prototype.isWellFormed()</code></a></dt>\n  <dd>\n    <p>Returns a boolean indicating whether this string contains any <a href=\"#utf-16_characters_unicode_code_points_and_grapheme_clusters\">lone surrogates</a>.</p>\n  </dd>\n  <dt id=\"string.prototype.lastindexof\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\"><code>String.prototype.lastIndexOf()</code></a></dt>\n  <dd>\n    <p>\n      Returns the index within the calling <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\" aria-current=\"page\"><code>String</code></a> object of the last\n      occurrence of <code>searchValue</code>, or <code>-1</code> if not found.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.localecompare\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"><code>String.prototype.localeCompare()</code></a></dt>\n  <dd>\n    <p>\n      Returns a number indicating whether the reference string\n      <code>compareString</code> comes before, after, or is equivalent to the\n      given string in sort order.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.match\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a></dt>\n  <dd>\n    <p>Used to match regular expression <code>regexp</code> against a string.</p>\n  </dd>\n  <dt id=\"string.prototype.matchall\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a></dt>\n  <dd>\n    <p>Returns an iterator of all <code>regexp</code>'s matches.</p>\n  </dd>\n  <dt id=\"string.prototype.normalize\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\"><code>String.prototype.normalize()</code></a></dt>\n  <dd>\n    <p>Returns the Unicode Normalization Form of the calling string value.</p>\n  </dd>\n  <dt id=\"string.prototype.padend\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\"><code>String.prototype.padEnd()</code></a></dt>\n  <dd>\n    <p>\n      Pads the current string from the end with a given string and returns a new string of\n      the length <code>targetLength</code>.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.padstart\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\"><code>String.prototype.padStart()</code></a></dt>\n  <dd>\n    <p>\n      Pads the current string from the start with a given string and returns a new string\n      of the length <code>targetLength</code>.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.repeat\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\"><code>String.prototype.repeat()</code></a></dt>\n  <dd>\n    <p>\n      Returns a string consisting of the elements of the object repeated\n      <code>count</code> times.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.replace\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a></dt>\n  <dd>\n    <p>\n      Used to replace occurrences of <code>searchFor</code> using\n      <code>replaceWith</code>. <code>searchFor</code> may be a string\n      or Regular Expression, and <code>replaceWith</code> may be a string or\n      function.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.replaceall\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>String.prototype.replaceAll()</code></a></dt>\n  <dd>\n    <p>\n      Used to replace all occurrences of <code>searchFor</code> using\n      <code>replaceWith</code>. <code>searchFor</code> may be a string\n      or Regular Expression, and <code>replaceWith</code> may be a string or\n      function.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.search\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a></dt>\n  <dd>\n    <p>\n      Search for a match between a regular expression <code>regexp</code> and\n      the calling string.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.slice\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\"><code>String.prototype.slice()</code></a></dt>\n  <dd>\n    <p>Extracts a section of a string and returns a new string.</p>\n  </dd>\n  <dt id=\"string.prototype.split\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a></dt>\n  <dd>\n    <p>\n      Returns an array of strings populated by splitting the calling string at occurrences\n      of the substring <code>sep</code>.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.startswith\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\"><code>String.prototype.startsWith()</code></a></dt>\n  <dd>\n    <p>\n      Determines whether the calling string begins with the characters of string\n      <code>searchString</code>.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.substr\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr\"><code>String.prototype.substr()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd>\n    <p>Returns a portion of the string, starting at the specified index and extending for a given number of characters afterwards.</p>\n  </dd>\n  <dt id=\"string.prototype.substring\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\"><code>String.prototype.substring()</code></a></dt>\n  <dd>\n    <p>\n      Returns a new string containing characters of the calling string from (or between)\n      the specified index (or indices).\n    </p>\n  </dd>\n  <dt id=\"string.prototype.tolocalelowercase\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\"><code>String.prototype.toLocaleLowerCase()</code></a></dt>\n  <dd>\n    <p>\n      The characters within a string are converted to lowercase while respecting the\n      current locale.\n    </p>\n    <p>\n      For most languages, this will return the same as\n      <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"><code>toLowerCase()</code></a>.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.tolocaleuppercase\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\"><code>String.prototype.toLocaleUpperCase()</code></a></dt>\n  <dd>\n    <p>\n      The characters within a string are converted to uppercase while respecting the\n      current locale.\n    </p>\n    <p>\n      For most languages, this will return the same as\n      <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"><code>toUpperCase()</code></a>.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.tolowercase\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"><code>String.prototype.toLowerCase()</code></a></dt>\n  <dd>\n    <p>Returns the calling string value converted to lowercase.</p>\n  </dd>\n  <dt id=\"string.prototype.tostring\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString\"><code>String.prototype.toString()</code></a></dt>\n  <dd>\n    <p>\n      Returns a string representing the specified object. Overrides the\n      <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> method.\n    </p>\n  </dd>\n  <dt id=\"string.prototype.touppercase\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"><code>String.prototype.toUpperCase()</code></a></dt>\n  <dd>\n    <p>Returns the calling string value converted to uppercase.</p>\n  </dd>\n  <dt id=\"string.prototype.towellformed\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed\"><code>String.prototype.toWellFormed()</code></a></dt>\n  <dd>\n    <p>Returns a string where all <a href=\"#utf-16_characters_unicode_code_points_and_grapheme_clusters\">lone surrogates</a> of this string are replaced with the Unicode replacement character U+FFFD.</p>\n  </dd>\n  <dt id=\"string.prototype.trim\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\"><code>String.prototype.trim()</code></a></dt>\n  <dd>\n    <p>Trims whitespace from the beginning and end of the string.</p>\n  </dd>\n  <dt id=\"string.prototype.trimend\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd\"><code>String.prototype.trimEnd()</code></a></dt>\n  <dd>\n    <p>Trims whitespace from the end of the string.</p>\n  </dd>\n  <dt id=\"string.prototype.trimstart\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart\"><code>String.prototype.trimStart()</code></a></dt>\n  <dd>\n    <p>Trims whitespace from the beginning of the string.</p>\n  </dd>\n  <dt id=\"string.prototype.valueof\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\"><code>String.prototype.valueOf()</code></a></dt>\n  <dd>\n    <p>\n      Returns the primitive value of the specified object. Overrides the\n      <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a> method.\n    </p>\n  </dd>\n  <dt id=\"string.prototypeiterator\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator\"><code>String.prototype[@@iterator]()</code></a></dt>\n  <dd>\n    <p>\n      Returns a new iterator object that iterates over the code points of a String value,\n      returning each code point as a String value.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"html_wrapper_methods","title":"HTML wrapper methods","isH3":true,"content":"<div class=\"notecard warning\" id=\"sect2\">\n  <p><strong>Warning:</strong> Deprecated. Avoid these methods.</p>\n  <p>They are of limited use, as they are based on a very old HTML standard and provide only a subset of the currently available HTML tags and attributes. Many of them create deprecated or non-standard markup today. In addition, they do simple string concatenation without any validation or sanitation, which makes them a potential security threat when directly inserted using <a href=\"/en-US/docs/Web/API/Element/innerHTML\"><code>innerHTML</code></a>. Use <a href=\"/en-US/docs/Web/API/Document_Object_Model\">DOM APIs</a> such as <a href=\"/en-US/docs/Web/API/Document/createElement\"><code>document.createElement()</code></a> instead.</p>\n</div>\n<dl>\n  <dt id=\"string.prototype.anchor\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor\"><code>String.prototype.anchor()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd>\n    <p><a href=\"/en-US/docs/Web/HTML/Element/a#name\"><code>&lt;a name=\"name\"&gt;</code></a> (hypertext target)</p>\n  </dd>\n  <dt id=\"string.prototype.big\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big\"><code>String.prototype.big()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd><a href=\"/en-US/docs/Web/HTML/Element/big\"><code>&lt;big&gt;</code></a></dd>\n  <dt id=\"string.prototype.blink\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink\"><code>String.prototype.blink()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd>\n    <p><code>&lt;blink&gt;</code></p>\n  </dd>\n  <dt id=\"string.prototype.bold\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold\"><code>String.prototype.bold()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd><a href=\"/en-US/docs/Web/HTML/Element/b\"><code>&lt;b&gt;</code></a></dd>\n  <dt id=\"string.prototype.fixed\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fixed\"><code>String.prototype.fixed()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd><a href=\"/en-US/docs/Web/HTML/Element/tt\"><code>&lt;tt&gt;</code></a></dd>\n  <dt id=\"string.prototype.fontcolor\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor\"><code>String.prototype.fontcolor()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd>\n    <p><a href=\"/en-US/docs/Web/HTML/Element/font#color\"><code>&lt;font color=\"color\"&gt;</code></a></p>\n  </dd>\n  <dt id=\"string.prototype.fontsize\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\"><code>String.prototype.fontsize()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd>\n    <p><a href=\"/en-US/docs/Web/HTML/Element/font#size\"><code>&lt;font size=\"size\"&gt;</code></a></p>\n  </dd>\n  <dt id=\"string.prototype.italics\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics\"><code>String.prototype.italics()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd><a href=\"/en-US/docs/Web/HTML/Element/i\"><code>&lt;i&gt;</code></a></dd>\n  <dt id=\"string.prototype.link\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link\"><code>String.prototype.link()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd>\n    <p><a href=\"/en-US/docs/Web/HTML/Element/a#href\"><code>&lt;a href=\"url\"&gt;</code></a> (link to URL)</p>\n  </dd>\n  <dt id=\"string.prototype.small\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small\"><code>String.prototype.small()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd><a href=\"/en-US/docs/Web/HTML/Element/small\"><code>&lt;small&gt;</code></a></dd>\n  <dt id=\"string.prototype.strike\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike\"><code>String.prototype.strike()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd><a href=\"/en-US/docs/Web/HTML/Element/strike\"><code>&lt;strike&gt;</code></a></dd>\n  <dt id=\"string.prototype.sub\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub\"><code>String.prototype.sub()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd><a href=\"/en-US/docs/Web/HTML/Element/sub\"><code>&lt;sub&gt;</code></a></dd>\n  <dt id=\"string.prototype.sup\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup\"><code>String.prototype.sup()</code></a> <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></dt>\n  <dd><a href=\"/en-US/docs/Web/HTML/Element/sup\"><code>&lt;sup&gt;</code></a></dd>\n</dl>\n<p>Note that these methods do not check if the string itself contains HTML tags, so it's possible to create invalid HTML:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"&lt;/b&gt;\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">bold</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;b&gt;&lt;/b&gt;&lt;/b&gt;</span>\n</code></pre></div>\n<p>The only escaping they do is to replace <code>\"</code> in the attribute value (for <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor\"><code>anchor()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor\"><code>fontcolor()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\"><code>fontsize()</code></a>, and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link\"><code>link()</code></a>) with <code>&amp;quot;</code>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">anchor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\"Hello\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;a name=\"&amp;quot;Hello&amp;quot;\"&gt;foo&lt;/a&gt;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"string_conversion","title":"String conversion","isH3":true,"content":"<p>The <code>String()</code> function is a more reliable way of converting values to strings than calling the <code>toString()</code> method of the value, as the former works when used on <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>. For example:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// You cannot access properties on null or undefined</span>\n\n<span class=\"token keyword\">const</span> nullVar <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nnullVar<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: Cannot read properties of null</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span>nullVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"null\"</span>\n\n<span class=\"token keyword\">const</span> undefinedVar <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\nundefinedVar<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: Cannot read properties of undefined</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span>undefinedVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/text-processing.html#sec-string-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.String"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.String"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a> guide</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a></li>\n</ul>"}}],"toc":[{"text":"Description","id":"description"},{"text":"Constructor","id":"constructor"},{"text":"Static methods","id":"static_methods"},{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The String object is used to represent and manipulate a\n  sequence of characters.","popularity":0.3098,"modified":"2023-09-26T00:02:48.000Z","source":{"folder":"en-us/web/javascript/reference/global_objects/string","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/string/index.md","last_commit_url":"https://github.com/mdn/content/commit/2a9ae3e089b643363bd0bcde803f14e43d7984ff","filename":"index.md"},"short_title":"String","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"Reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String","title":"String"}],"pageTitle":"String - JavaScript | MDN","noIndexing":false}}