{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"String.prototype.split()","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split","locale":"en-US","native":"English (US)","browserCompat":["javascript.builtins.String.split"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a></strong></li><li><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\"><code>String() constructor</code></a></li></ol></details></li><li><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\"><code>String: length</code></a></li></ol></details></li><li><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator\"><code>String.prototype[@@iterator]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor\"><code>String.prototype.anchor()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at\"><code>String.prototype.at()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big\"><code>String.prototype.big()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink\"><code>String.prototype.blink()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold\"><code>String.prototype.bold()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\"><code>String.prototype.charAt()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\"><code>String.prototype.charCodeAt()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\"><code>String.prototype.codePointAt()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat\"><code>String.prototype.concat()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\"><code>String.prototype.endsWith()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fixed\"><code>String.prototype.fixed()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor\"><code>String.prototype.fontcolor()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\"><code>String.prototype.fontsize()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\"><code>String.fromCharCode()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\"><code>String.fromCodePoint()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\"><code>String.prototype.includes()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>String.prototype.indexOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed\"><code>String.prototype.isWellFormed()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics\"><code>String.prototype.italics()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\"><code>String.prototype.lastIndexOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link\"><code>String.prototype.link()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"><code>String.prototype.localeCompare()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\"><code>String.prototype.normalize()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\"><code>String.prototype.padEnd()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\"><code>String.prototype.padStart()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\"><code>String.prototype.repeat()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"><code>String.prototype.replaceAll()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\"><code>String.prototype.slice()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small\"><code>String.prototype.small()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><em><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" aria-current=\"page\"><code>String.prototype.split()</code></a></em></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\"><code>String.prototype.startsWith()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike\"><code>String.prototype.strike()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub\"><code>String.prototype.sub()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr\"><code>String.prototype.substr()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\"><code>String.prototype.substring()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup\"><code>String.prototype.sup()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\"><code>String.prototype.toLocaleLowerCase()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\"><code>String.prototype.toLocaleUpperCase()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"><code>String.prototype.toLowerCase()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString\"><code>String.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"><code>String.prototype.toUpperCase()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed\"><code>String.prototype.toWellFormed()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\"><code>String.prototype.trim()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd\"><code>String.prototype.trimEnd()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart\"><code>String.prototype.trimStart()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\"><code>String.prototype.valueOf()</code></a></li></ol></details></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><details><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function() constructor</code></a></li></ol></details></li><li><details><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function: displayName</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function: length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function: name</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function: prototype</code></a></li></ol></details></li><li><details><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance\"><code>Function.prototype[@@hasInstance]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></details></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><details><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li></ol></details></li><li><details><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></details></li></ol>","sidebarMacro":"JSRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>split()</code></strong> method of <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> values takes a pattern and divides this string into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.</p>"}},{"type":"prose","value":{"id":"try_it","title":"Try it","isH3":false,"content":"<iframe class=\"interactive is-taller-height\" height=\"200\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/string-split.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span>\n<span class=\"token function\">split</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"separator\"><a href=\"#separator\"><code>separator</code></a></dt>\n  <dd>\n    <p>The pattern describing where each split should occur. Can be <code>undefined</code>, a string, or an object with a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split\"><code>Symbol.split</code></a> method — the typical example being a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">regular expression</a>. Omitting <code>separator</code> or passing <code>undefined</code> causes <code>split()</code> to return an array with the calling string as a single element. All values that are not <code>undefined</code> or objects with a <code>@@split</code> method are <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion\">coerced to strings</a>.</p>\n  </dd>\n  <dt id=\"limit\"><a href=\"#limit\"><code>limit</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>A non-negative integer specifying a limit on the number of substrings to be included in the array. If provided, splits the string at each occurrence of the specified <code>separator</code>, but stops when <code>limit</code> entries have been placed in the array. Any leftover text is not included in the array at all.</p>\n    <ul>\n      <li>The array may contain fewer entries than <code>limit</code> if the end of the string is reached before the limit is reached.</li>\n      <li>If <code>limit</code> is <code>0</code>, <code>[]</code> is returned.</li>\n    </ul>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>An <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of strings, split at each point where the <code>separator</code> occurs in the given string.</p>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>If <code>separator</code> is a non-empty string, the target string is split by all matches of the <code>separator</code> without including <code>separator</code> in the results. For example, a string containing tab separated values (TSV) could be parsed by passing a tab character as the separator, like <code>myString.split(\"\\t\")</code>. If <code>separator</code> contains multiple characters, that entire character sequence must be found in order to split. If <code>separator</code> appears at the beginning (or end) of the string, it still has the effect of splitting, resulting in an empty (i.e. zero length) string appearing at the first (or last) position of the returned array. If <code>separator</code> does not occur in <code>str</code>, the returned array contains one element consisting of the entire string.</p>\n<p>If <code>separator</code> is an empty string (<code>\"\"</code>), <code>str</code> is converted to an array of each of its UTF-16 \"characters\", without empty strings on either ends of the resulting string.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <code>\"\".split(\"\")</code> is therefore the only way to produce an empty array when a string is passed as <code>separator</code> and <code>limit</code> is not <code>0</code>.</p>\n</div>\n<div class=\"notecard warning\" id=\"sect2\">\n  <p><strong>Warning:</strong> When the empty string (<code>\"\"</code>) is used as a separator, the string is <strong>not</strong> split by <em>user-perceived characters</em> (<a href=\"https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries\" class=\"external\" target=\"_blank\">grapheme clusters</a>) or unicode characters (code points), but by UTF-16 code units. This destroys <a href=\"https://unicode.org/faq/utf_bom.html#utf16-2\" class=\"external\" target=\"_blank\">surrogate pairs</a>. See <a href=\"https://stackoverflow.com/questions/4547609/how-to-get-character-array-from-a-string/34717402#34717402\" class=\"external\" target=\"_blank\">\"How do you get a string to a character array in JavaScript?\" on StackOverflow</a>.</p>\n</div>\n<p>If <code>separator</code> is a regexp that matches empty strings, whether the match is split by UTF-16 code units or Unicode code points depends on if the regex is <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode\">Unicode-aware</a>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"😄😄\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token group punctuation\">(?:</span><span class=\"token group punctuation\">)</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ \"\\ud83d\", \"\\ude04\", \"\\ud83d\", \"\\ude04\" ]</span>\n<span class=\"token string\">\"😄😄\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token group punctuation\">(?:</span><span class=\"token group punctuation\">)</span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">u</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ \"😄\", \"😄\" ]</span>\n</code></pre></div>\n<p>If <code>separator</code> is a regular expression with capturing groups, then each time <code>separator</code> matches, the captured groups (including any <code>undefined</code> results) are spliced into the output array. This behavior is specified by the regexp's <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split\"><code>Symbol.split</code></a> method.</p>\n<p>If <code>separator</code> is an object with a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split\"><code>Symbol.split</code></a> method, that method is called with the target string and <code>limit</code> as arguments, and <code>this</code> set to the object. Its return value becomes the return value of <code>split</code>.</p>\n<p>Any other value will be coerced to a string before being used as separator.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"using_split","title":"Using split()","isH3":true,"content":"<p>When the string is empty and a non-empty separator is specified, <code>split()</code> returns <code>[\"\"]</code>. If the string and separator are both empty strings, an empty array is returned.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> emptyString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// string is empty and separator is non-empty</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>emptyString<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"\"]</span>\n\n<span class=\"token comment\">// string and separator are both empty strings</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>emptyString<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>emptyString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// []</span>\n</code></pre></div>\n<p>\n  The following example defines a function that splits a string into an array of strings\n  using <code>separator</code>. After splitting the string, the function logs\n  messages indicating the original string (before the split), the separator used, the\n  number of elements in the array, and the individual array elements.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">splitString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stringToSplit<span class=\"token punctuation\">,</span> separator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arrayOfStrings <span class=\"token operator\">=</span> stringToSplit<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The original string is:\"</span><span class=\"token punctuation\">,</span> stringToSplit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The separator is:\"</span><span class=\"token punctuation\">,</span> separator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"The array has\"</span><span class=\"token punctuation\">,</span>\n    arrayOfStrings<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"elements:\"</span><span class=\"token punctuation\">,</span>\n    arrayOfStrings<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" / \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> tempestString <span class=\"token operator\">=</span> <span class=\"token string\">\"Oh brave new world that has such people in it.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> monthString <span class=\"token operator\">=</span> <span class=\"token string\">\"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> space <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> comma <span class=\"token operator\">=</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">splitString</span><span class=\"token punctuation\">(</span>tempestString<span class=\"token punctuation\">,</span> space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">splitString</span><span class=\"token punctuation\">(</span>tempestString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">splitString</span><span class=\"token punctuation\">(</span>monthString<span class=\"token punctuation\">,</span> comma<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This example produces the following output:</p>\n<pre class=\"brush: plain notranslate\">The original string is: \"Oh brave new world that has such people in it.\"\nThe separator is: \" \"\nThe array has 10 elements: Oh / brave / new / world / that / has / such / people / in / it.\n\nThe original string is: \"Oh brave new world that has such people in it.\"\nThe separator is: \"undefined\"\nThe array has 1 elements: Oh brave new world that has such people in it.\n\nThe original string is: \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\"\nThe separator is: \",\"\nThe array has 12 elements: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec\n</pre>"}},{"type":"prose","value":{"id":"removing_spaces_from_a_string","title":"Removing spaces from a string","isH3":true,"content":"<p>\n  In the following example, <code>split()</code> looks for zero or more spaces, followed\n  by a semicolon, followed by zero or more spaces—and, when found, removes the spaces and\n  the semicolon from the string. <code>nameList</code> is the array returned as a result\n  of <code>split()</code>.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token string\">\"Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand \"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token char-set class-name\">\\s</span><span class=\"token quantifier number\">*</span><span class=\"token group punctuation\">(?:</span>;<span class=\"token alternation keyword\">|</span><span class=\"token anchor function\">$</span><span class=\"token group punctuation\">)</span><span class=\"token char-set class-name\">\\s</span><span class=\"token quantifier number\">*</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nameList <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nameList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  This logs two lines; the first line logs the original string, and the second line logs\n  the resulting array.\n</p>\n<pre class=\"brush: plain notranslate\">Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand\n[ \"Harry Trump\", \"Fred Barney\", \"Helen Rigby\", \"Bill Abel\", \"Chris Hand\", \"\" ]\n</pre>"}},{"type":"prose","value":{"id":"returning_a_limited_number_of_splits","title":"Returning a limited number of splits","isH3":true,"content":"<p>\n  In the following example, <code>split()</code> looks for spaces in a string and returns\n  the first 3 splits that it finds.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World. How are you doing?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> splits <span class=\"token operator\">=</span> myString<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>splits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ \"Hello\", \"World.\", \"How\" ]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"splitting_with_a_regexp_to_include_parts_of_the_separator_in_the_result","title":"Splitting with a <code>RegExp</code> to include parts of the separator in the result","isH3":true,"content":"<p>\n  If <code>separator</code> is a regular expression that contains capturing\n  parentheses <code>( )</code>, matched results are included in the array.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello 1 word. Sentence number 2.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> splits <span class=\"token operator\">=</span> myString<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token group punctuation\">(</span><span class=\"token char-set class-name\">\\d</span><span class=\"token group punctuation\">)</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>splits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ \"Hello \", \"1\", \" word. Sentence number \", \"2\", \".\" ]</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> <code>\\d</code> matches the <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\">character class</a> for digits between 0 and 9.</p>\n</div>","titleAsText":"Splitting with a RegExp to include parts of the separator in the result"}},{"type":"prose","value":{"id":"using_a_custom_splitter","title":"Using a custom splitter","isH3":true,"content":"<p>An object with a <code>Symbol.split</code> method can be used as a splitter with custom behavior.</p>\n<p>The following example splits a string using an internal state consisting of an incrementing number:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> splitByNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> matchPos <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matchPos <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> matchPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      pos <span class=\"token operator\">=</span> matchPos <span class=\"token operator\">+</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n      num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"a1bc2c5d3e4f\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>splitByNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ \"a\", \"bc\", \"c5d\", \"e\", \"f\" ]</span>\n</code></pre></div>\n<p>The following example uses an internal state to enforce certain behavior, and to ensure a \"valid\" result is produced.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token constant\">DELIMITER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Split the commands, but remove any invalid or unnecessary values.</span>\n<span class=\"token keyword\">const</span> splitCommands <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> lim</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">on</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">brightness</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">current</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> matchPos <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DELIMITER</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>matchPos <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> subString <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> matchPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"light on\"</span><span class=\"token operator\">:</span>\n          <span class=\"token comment\">// If the `on` state is already true, do nothing.</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            state<span class=\"token punctuation\">.</span>on <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"light off\"</span><span class=\"token operator\">:</span>\n          <span class=\"token comment\">// If the `on` state is already false, do nothing.</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            state<span class=\"token punctuation\">.</span>on <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"brightness up\"</span><span class=\"token operator\">:</span>\n          <span class=\"token comment\">// Enforce a brightness maximum.</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>brightness<span class=\"token punctuation\">.</span>current <span class=\"token operator\">&lt;</span> state<span class=\"token punctuation\">.</span>brightness<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            state<span class=\"token punctuation\">.</span>brightness<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"brightness down\"</span><span class=\"token operator\">:</span>\n          <span class=\"token comment\">// Enforce a brightness minimum.</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>brightness<span class=\"token punctuation\">.</span>current <span class=\"token operator\">&gt;</span> state<span class=\"token punctuation\">.</span>brightness<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            state<span class=\"token punctuation\">.</span>brightness<span class=\"token punctuation\">.</span>current <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> lim<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      pos <span class=\"token operator\">=</span> matchPos <span class=\"token operator\">+</span> <span class=\"token constant\">DELIMITER</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n      matchPos <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DELIMITER</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// If we broke early due to reaching the split `lim`, don't add the remaining commands.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> lim<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> commands <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"light on; brightness up; brightness up; brightness up; light on; brightness down; brightness down; light off\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>commands<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>splitCommands<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"light on\", \"brightness up\", \"brightness down\"]</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.split","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.String.split"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.String.split"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js#ecmascript-string-and-regexp\" class=\"external\" target=\"_blank\">Polyfill of <code>String.prototype.split</code> in <code>core-js</code> with fixes and implementation of modern behavior like <code>Symbol.split</code> support</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\"><code>String.prototype.charAt()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>String.prototype.indexOf()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\"><code>String.prototype.lastIndexOf()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>Array.prototype.join()</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions\">Regular expressions</a> guide</li>\n</ul>"}}],"toc":[{"text":"Try it","id":"try_it"},{"text":"Syntax","id":"syntax"},{"text":"Description","id":"description"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The split() method of String values takes a pattern and divides this string into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.","popularity":0.3286,"modified":"2023-11-08T14:24:30.000Z","source":{"folder":"en-us/web/javascript/reference/global_objects/string/split","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/string/split/index.md","last_commit_url":"https://github.com/mdn/content/commit/7e08b8cbd98a54c7acb8682a8873a6fecf674e1b","filename":"index.md"},"short_title":"String.prototype.split()","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"Reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String","title":"String"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split","title":"String.prototype.split()"}],"pageTitle":"String.prototype.split() - JavaScript | MDN","noIndexing":false}}