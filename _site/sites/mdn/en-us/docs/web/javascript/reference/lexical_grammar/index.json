{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Lexical grammar","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Lexical_grammar","locale":"en-US","native":"English (US)","browserCompat":["javascript.grammar"],"sidebarHTML":"\n <ol>\n  <li><a href=\"/en-US/docs/Web/JavaScript\"><strong>JavaScript</strong></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Tutorials\"><strong>Tutorials</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/en-US/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/en-US/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/en-US/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Grammar_and_types\">Grammar and types</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators\">Expressions and operators</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions\">Regular expressions</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Working_with_objects\">Working with objects</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Using_classes\">Using classes</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Typed_arrays\">JavaScript typed arrays</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/en-US/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Language_overview\">Language overview</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Memory_management\">Memory Management</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Event_loop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference\">References</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator\">AsyncIterator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator\">Iterator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator\">Comma operator (,)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator\">Conditional (ternary) operator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/delete\">delete</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/import\">import()</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/in\">in</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/new\">new</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment\">Nullish coalescing assignment (??=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing\">Nullish coalescing operator (??)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence\">Operator precedence</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors\">Property accessors</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/block\">Block statement</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/Empty\">Empty statement</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement\">Expression statement</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function\">function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/label\">Labeled statement</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/with\">with</a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/get\">get</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/set\">set</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties\">Private properties</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/static\">static</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks\">Static initialization blocks</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Regular expressions</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference\">Backreference: \\1, \\2</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group\">Capturing group: (...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\">Character class escape: \\d, \\D, \\w, \\W, \\s, \\S</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class\">Character class: [...], [^...]</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape\">Character escape: \\n, \\u{...}</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction\">Disjunction: |</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion\">Input boundary assertion: ^, $</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character\">Literal character: a, b</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion\">Lookahead assertion: (?=...), (?!...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion\">Lookbehind assertion: (?&lt;=...), (?&lt;!...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference\">Named backreference: \\k&lt;name&gt;</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\">Named capturing group: (?&lt;name&gt;...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group\">Non-capturing group: (?:...)</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier\">Quantifier: *, +, ?, {n}, {n,}, {n,m}</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape\">Unicode character class escape: \\p{...}, \\P{...}</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Wildcard\">Wildcard: .</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion\">Word boundary assertion: \\b, \\B</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors\">Overview</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_valid_code_point\">RangeError: argument is not a valid code point</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Strict_non_simple_params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_await\">SyntaxError: await is only valid in async functions, async generators and modules</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_continue\">SyntaxError: continue must be inside loop</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Either_be_both_static_or_non-static\">SyntaxError: getter and setter for private name #x should either be both static or non-static</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Label_not_found\">SyntaxError: label not found</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return\">SyntaxError: return not in function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Bad_break\">SyntaxError: unlabeled break must be inside loop or switch</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><em><a href=\"/en-US/docs/Web/JavaScript/Reference/Lexical_grammar\" aria-current=\"page\">Lexical grammar</a></em></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Trailing_commas\">Trailing commas</a></li>\n        <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","sidebarMacro":"JsSidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be <em>parsed</em> to a more structured representation. The initial step of parsing is called <a href=\"https://en.wikipedia.org/wiki/Lexical_analysis\" class=\"external\" target=\"_blank\">lexical analysis</a>, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include <a href=\"#white_space\">white space</a> and <a href=\"#comments\">comments</a>. The others, including <a href=\"#identifiers\">identifiers</a>, <a href=\"#keywords\">keywords</a>, <a href=\"#literals\">literals</a>, and punctuators (mostly <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\">operators</a>), will be used for further syntax analysis. <a href=\"#line_terminators\">Line terminators</a> and multiline comments are also syntactically insignificant, but they guide the process for <a href=\"#automatic_semicolon_insertion\">automatic semicolons insertion</a> to make certain invalid token sequences become valid.</p>"}},{"type":"prose","value":{"id":"format-control_characters","title":"Format-control characters","isH3":false,"content":"<p>Format-control characters have no visual representation but are used to control the interpretation of the text.</p>\n<figure class=\"table-container\"><table>\n  <thead>\n    <tr>\n      <th>Code point</th>\n      <th>Name</th>\n      <th>Abbreviation</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>U+200C</td>\n      <td>Zero width non-joiner</td>\n      <td>&lt;ZWNJ&gt;</td>\n      <td>Placed between characters to prevent being connected into ligatures in certain languages (<a href=\"https://en.wikipedia.org/wiki/Zero-width_non-joiner\" class=\"external\" target=\"_blank\">Wikipedia</a>).</td>\n    </tr>\n    <tr>\n      <td>U+200D</td>\n      <td>Zero width joiner</td>\n      <td>&lt;ZWJ&gt;</td>\n      <td>Placed between characters that would not normally be connected in order to cause the characters to be rendered using their connected form in certain languages (<a href=\"https://en.wikipedia.org/wiki/Zero-width_joiner\" class=\"external\" target=\"_blank\">Wikipedia</a>).</td>\n    </tr>\n    <tr>\n      <td>U+FEFF</td>\n      <td>Byte order mark</td>\n      <td>&lt;BOM&gt;</td>\n      <td>Used at the start of the script to mark it as Unicode and the text's byte order (<a href=\"https://en.wikipedia.org/wiki/Byte_order_mark\" class=\"external\" target=\"_blank\">Wikipedia</a>).</td>\n    </tr>\n  </tbody>\n</table></figure>\n<p>In JavaScript source text, &lt;ZWNJ&gt; and &lt;ZWJ&gt; are treated as <a href=\"#identifiers\">identifier</a> parts, while &lt;BOM&gt; (also called a zero-width no-break space &lt;ZWNBSP&gt; when not at the start of text) is treated as <a href=\"#white_space\">white space</a>.</p>"}},{"type":"prose","value":{"id":"white_space","title":"White space","isH3":false,"content":"<p><a href=\"/en-US/docs/Glossary/Whitespace\">White space</a> characters improve the readability of source text and separate tokens from each other. These characters are usually unnecessary for the functionality of the code. <a href=\"https://en.wikipedia.org/wiki/Minification_%28programming%29\" class=\"external\" target=\"_blank\">Minification tools</a> are often used to remove whitespace in order to reduce the amount of data that needs to be transferred.</p>\n<figure class=\"table-container\"><table>\n  <thead>\n    <tr>\n      <th>Code point</th>\n      <th>Name</th>\n      <th>Abbreviation</th>\n      <th>Description</th>\n      <th>Escape sequence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>U+0009</td>\n      <td>Character tabulation</td>\n      <td>&lt;TAB&gt;</td>\n      <td>Horizontal tabulation</td>\n      <td>\\t</td>\n    </tr>\n    <tr>\n      <td>U+000B</td>\n      <td>Line tabulation</td>\n      <td>&lt;VT&gt;</td>\n      <td>Vertical tabulation</td>\n      <td>\\v</td>\n    </tr>\n    <tr>\n      <td>U+000C</td>\n      <td>Form feed</td>\n      <td>&lt;FF&gt;</td>\n      <td>Page breaking control character (<a href=\"https://en.wikipedia.org/wiki/Page_break#Form_feed\" class=\"external\" target=\"_blank\">Wikipedia</a>).</td>\n      <td>\\f</td>\n    </tr>\n    <tr>\n      <td>U+0020</td>\n      <td>Space</td>\n      <td>&lt;SP&gt;</td>\n      <td>Normal space</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>U+00A0</td>\n      <td>No-break space</td>\n      <td>&lt;NBSP&gt;</td>\n      <td>Normal space, but no point at which a line may break</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>U+FEFF</td>\n      <td>Zero-width no-break space</td>\n      <td>&lt;ZWNBSP&gt;</td>\n      <td>When not at the start of a script, the BOM marker is a normal whitespace character.</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Others</td>\n      <td>Other Unicode space characters</td>\n      <td>&lt;USP&gt;</td>\n      <td><a href=\"https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGeneral_Category%3DSpace_Separator%7D\" class=\"external\" target=\"_blank\">Characters in the \"Space_Separator\" general category</a></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table></figure>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Of those <a href=\"https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BWhite_Space%7D%26%5CP%7BGeneral_Category%3DSpace_Separator%7D\" class=\"external\" target=\"_blank\">characters with the \"White_Space\" property but are not in the \"Space_Separator\" general category</a>, U+0009, U+000B, and U+000C are still treated as white space in JavaScript; U+0085 NEXT LINE has no special role; others become the set of <a href=\"#line_terminators\">line terminators</a>.</p>\n</div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> Changes to the Unicode standard used by the JavaScript engine may affect programs' behavior. For example, ES2016 upgraded the reference Unicode standard from 5.1 to 8.0.0, which caused U+180E MONGOLIAN VOWEL SEPARATOR to be moved from the \"Space_Separator\" category to the \"Format (Cf)\" category, and made it a non-whitespace. Subsequently, the result of <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\"><code>\"\\u180E\".trim().length</code></a> changed from <code>0</code> to <code>1</code>.</p>\n</div>"}},{"type":"prose","value":{"id":"line_terminators","title":"Line terminators","isH3":false,"content":"<p>In addition to <a href=\"#white_space\">white space</a> characters, line terminator characters are used to improve the readability of the source text. However, in some cases, line terminators can influence the execution of JavaScript code as there are a few places where they are forbidden. Line terminators also affect the process of <a href=\"#automatic_semicolon_insertion\">automatic semicolon insertion</a>.</p>\n<p>Outside the context of lexical grammar, white space and line terminators are often conflated. For example, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\"><code>String.prototype.trim()</code></a> removes all white space and line terminators from the beginning and end of a string. The <code>\\s</code> <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\">character class escape</a> in regular expressions matches all white space and line terminators.</p>\n<p>Only the following Unicode code points are treated as line terminators in ECMAScript, other line breaking characters are treated as white space (for example, Next Line, NEL, U+0085 is considered as white space).</p>\n<figure class=\"table-container\"><table>\n  <thead>\n    <tr>\n      <th>Code point</th>\n      <th>Name</th>\n      <th>Abbreviation</th>\n      <th>Description</th>\n      <th>Escape sequence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>U+000A</td>\n      <td>Line Feed</td>\n      <td>&lt;LF&gt;</td>\n      <td>New line character in UNIX systems.</td>\n      <td>\\n</td>\n    </tr>\n    <tr>\n      <td>U+000D</td>\n      <td>Carriage Return</td>\n      <td>&lt;CR&gt;</td>\n      <td>New line character in Commodore and early Mac systems.</td>\n      <td>\\r</td>\n    </tr>\n    <tr>\n      <td>U+2028</td>\n      <td>Line Separator</td>\n      <td>&lt;LS&gt;</td>\n      <td><a href=\"https://en.wikipedia.org/wiki/Newline\" class=\"external\" target=\"_blank\">Wikipedia</a></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>U+2029</td>\n      <td>Paragraph Separator</td>\n      <td>&lt;PS&gt;</td>\n      <td><a href=\"https://en.wikipedia.org/wiki/Newline\" class=\"external\" target=\"_blank\">Wikipedia</a></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table></figure>"}},{"type":"prose","value":{"id":"comments","title":"Comments","isH3":false,"content":"<p>Comments are used to add hints, notes, suggestions, or warnings to JavaScript code. This can make it easier to read and understand. They can also be used to disable code to prevent it from being executed; this can be a valuable debugging tool.</p>\n<p>JavaScript has two long-standing ways to add comments to code: line comments and block comments. In addition, there's a special hashbang comment syntax.</p>"}},{"type":"prose","value":{"id":"line_comments","title":"Line comments","isH3":true,"content":"<p>The first way is the <code>//</code> comment; this makes all text following it on the same line into a comment. For example:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// This is a one line JavaScript comment</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"block_comments","title":"Block comments","isH3":true,"content":"<p>The second way is the <code>/* */</code> style, which is much more flexible.</p>\n<p>For example, you can use it on a single line:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* This is a one line JavaScript comment */</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You can also make multiple-line comments, like this:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* This comment spans multiple lines. Notice\n     that we don't need to end the comment until we're done. */</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You can also use it in the middle of a line, if you wish, although this can make your code harder to read so it should be used with caution:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> x <span class=\"token comment\">/* insert the value of x */</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" !\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In addition, you can use it to disable code to prevent it from running, by wrapping code in a comment, like this:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* console.log(\"Hello world!\"); */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In this case, the <code>console.log()</code> call is never issued, since it's inside a comment. Any number of lines of code can be disabled this way.</p>\n<p>Block comments that contain at least one line terminator behave like <a href=\"#line_terminators\">line terminators</a> in <a href=\"#automatic_semicolon_insertion\">automatic semicolon insertion</a>.</p>"}},{"type":"prose","value":{"id":"hashbang_comments","title":"Hashbang comments","isH3":true,"content":"<p>There's a special third comment syntax, the <strong>hashbang comment</strong>. A hashbang comment behaves exactly like a single line-only (<code>//</code>) comment, except that it begins with <code>#!</code> and <strong>is only valid at the absolute start of a script or module</strong>. Note also that no whitespace of any kind is permitted before the <code>#!</code>. The comment consists of all the characters after <code>#!</code> up to the end of the first line; only one such comment is permitted.</p>\n<p>Hashbang comments in JavaScript resemble <a href=\"https://en.wikipedia.org/wiki/Shebang_(Unix)\" class=\"external\" target=\"_blank\">shebangs in Unix</a> which provide the path to a specific JavaScript interpreter that you want to use to execute the script. Before the hashbang comment became standardized, it had already been de-facto implemented in non-browser hosts like Node.js, where it was stripped from the source text before being passed to the engine. An example is as follows:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token hashbang comment\">#!/usr/bin/env node</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The JavaScript interpreter will treat it as a normal comment — it only has semantic meaning to the shell if the script is directly run in a shell.</p>\n<div class=\"notecard warning\" id=\"sect3\">\n  <p><strong>Warning:</strong> If you want scripts to be runnable directly in a shell environment, encode them in UTF-8 without a <a href=\"https://en.wikipedia.org/wiki/Byte_order_mark\" class=\"external\" target=\"_blank\">BOM</a>. Although a BOM will not cause any problems for code running in a browser — because it's stripped during UTF-8 decoding, before the source text is analyzed — a Unix/Linux shell will not recognize the hashbang if it's preceded by a BOM character.</p>\n</div>\n<p>You must only use the <code>#!</code> comment style to specify a JavaScript interpreter. In all other cases just use a <code>//</code> comment (or multiline comment).</p>"}},{"type":"prose","value":{"id":"identifiers","title":"Identifiers","isH3":false,"content":"<p>An <em>identifier</em> is used to link a value with a name. Identifiers can be used in various places:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> decl <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Variable declaration (may also be `let` or `var`)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Function declaration</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object keys</span>\n<span class=\"token comment\">// Class declaration</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n  #priv <span class=\"token operator\">=</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Private property</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">lbl</span><span class=\"token operator\">:</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Label</span>\n</code></pre></div>\n<p>In JavaScript, identifiers are commonly made of alphanumeric characters, underscores (<code>_</code>), and dollar signs (<code>$</code>). Identifiers are not allowed to start with numbers. However, JavaScript identifiers are not only limited to <a href=\"/en-US/docs/Glossary/ASCII\">ASCII</a> — many Unicode code points are allowed as well. Namely, any character in the <a href=\"https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BID_Start%7D\" class=\"external\" target=\"_blank\">ID_Start</a> category can start an identifier, while any character in the <a href=\"https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BID_Continue%7D\" class=\"external\" target=\"_blank\">ID_Continue</a> category can appear after the first character.</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Note:</strong> If, for some reason, you need to parse some JavaScript source yourself, do not assume all identifiers follow the pattern <code>/[A-Za-z_$][\\w$]*/</code> (i.e. ASCII-only)! The range of identifiers can be described by the regex <code>/[$_\\p{ID_Start}][$\\u200c\\u200d\\p{ID_Continue}]*/u</code> (excluding unicode escape sequences).</p>\n</div>\n<p>In addition, JavaScript allows using <a href=\"#unicode_escape_sequences\">Unicode escape sequences</a> in the form of <code>\\u0000</code> or <code>\\u{000000}</code> in identifiers, which encode the same string value as the actual Unicode characters. For example, <code>你好</code> and <code>\\u4f60\\u597d</code> are the same identifiers:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> 你好 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\\u4f60\\u597d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello</span>\n</code></pre></div>\n<p>Not all places accept the full range of identifiers. Certain syntaxes, such as function declarations, function expressions, and variable declarations require using identifiers names that are not <a href=\"#reserved_words\">reserved words</a>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Illegal: import is a reserved word.</span>\n</code></pre></div>\n<p>Most notably, private properties and object properties allow reserved words.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">import</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Legal despite `import` being reserved</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n  #<span class=\"token keyword\">import</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"keywords","title":"Keywords","isH3":false,"content":"<p><em>Keywords</em> are tokens that look like identifiers but have special meanings in JavaScript. For example, the keyword <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"><code>async</code></a> before a function declaration indicates that the function is asynchronous.</p>\n<p>Some keywords are <em>reserved</em>, meaning that they cannot be used as an identifier for variable declarations, function declarations, etc. They are often called <em>reserved words</em>. <a href=\"#reserved_words\">A list of these reserved words</a> is provided below. Not all keywords are reserved — for example, <code>async</code> can be used as an identifier anywhere. Some keywords are only <em>contextually reserved</em> — for example, <code>await</code> is only reserved within the body of an async function, and <code>let</code> is only reserved in strict mode code, or <code>const</code> and <code>let</code> declarations.</p>\n<p>Identifiers are always compared by <em>string value</em>, so escape sequences are interpreted. For example, this is still a syntax error:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> els\\u<span class=\"token punctuation\">{</span><span class=\"token number\">65</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// `els\\u{65}` encodes the same identifier as `else`</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"reserved_words","title":"Reserved words","isH3":true,"content":"<p>These keywords cannot be used as identifiers for variables, functions, classes, etc. anywhere in JavaScript source.</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/break\"><code>break</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/switch\"><code>case</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>catch</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/class\"><code>class</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/continue\"><code>continue</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/debugger\"><code>debugger</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/switch\"><code>default</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/do...while\"><code>do</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"><code>else</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/export\"><code>export</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/extends\"><code>extends</code></a></li>\n  <li><a href=\"#boolean_literal\"><code>false</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>finally</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for\"><code>for</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function\"><code>function</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"><code>if</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/import\"><code>import</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/in\"><code>in</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/return\"><code>return</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/super\"><code>super</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/switch\"><code>switch</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/throw\"><code>throw</code></a></li>\n  <li><a href=\"#boolean_literal\"><code>true</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/typeof\"><code>typeof</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/void\"><code>void</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/while\"><code>while</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/with\"><code>with</code></a></li>\n</ul>\n<p>The following are only reserved when they are found in strict mode code:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a> (also reserved in <code>const</code>, <code>let</code>, and class declarations)</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/static\"><code>static</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/yield\"><code>yield</code></a> (also reserved in generator function bodies)</li>\n</ul>\n<p>The following are only reserved when they are found in module code or async function bodies:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/await\"><code>await</code></a></li>\n</ul>"}},{"type":"prose","value":{"id":"future_reserved_words","title":"Future reserved words","isH3":true,"content":"<p>The following are reserved as future keywords by the ECMAScript specification. They have no special functionality at present, but they might at some future time, so they cannot be used as identifiers.</p>\n<p>These are always reserved:</p>\n<ul>\n  <li><code>enum</code></li>\n</ul>\n<p>The following are only reserved when they are found in strict mode code:</p>\n<ul>\n  <li><code>implements</code></li>\n  <li><code>interface</code></li>\n  <li><code>package</code></li>\n  <li><code>private</code></li>\n  <li><code>protected</code></li>\n  <li><code>public</code></li>\n</ul>\n<h4 id=\"future_reserved_words_in_older_standards\">Future reserved words in older standards</h4>\n<p>The following are reserved as future keywords by older ECMAScript specifications (ECMAScript 1 till 3).</p>\n<ul>\n  <li><code>abstract</code></li>\n  <li><code>boolean</code></li>\n  <li><code>byte</code></li>\n  <li><code>char</code></li>\n  <li><code>double</code></li>\n  <li><code>final</code></li>\n  <li><code>float</code></li>\n  <li><code>goto</code></li>\n  <li><code>int</code></li>\n  <li><code>long</code></li>\n  <li><code>native</code></li>\n  <li><code>short</code></li>\n  <li><code>synchronized</code></li>\n  <li><code>throws</code></li>\n  <li><code>transient</code></li>\n  <li><code>volatile</code></li>\n</ul>"}},{"type":"prose","value":{"id":"identifiers_with_special_meanings","title":"Identifiers with special meanings","isH3":true,"content":"<p>A few identifiers have a special meaning in some contexts without being reserved words of any kind. They include:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> (not a keyword, but cannot be declared as identifier in strict mode)</li>\n  <li><code>as</code> (<a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/import#namespace_import\"><code>import * as ns from \"mod\"</code></a>)</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"><code>async</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval</code></a> (not a keyword, but cannot be declared as identifier in strict mode)</li>\n  <li><code>from</code> (<a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/import\"><code>import x from \"mod\"</code></a>)</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/get\"><code>get</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"><code>of</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/set\"><code>set</code></a></li>\n</ul>"}},{"type":"prose","value":{"id":"literals","title":"Literals","isH3":false,"content":"<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Note:</strong> This section discusses literals that are atomic tokens. <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object literals</a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array#array_literal_notation\">array literals</a> are <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\">expressions</a> that consist of a series of tokens.</p>\n</div>"}},{"type":"prose","value":{"id":"null_literal","title":"Null literal","isH3":true,"content":"<p>See also <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> for more information.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">null</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"boolean_literal","title":"Boolean literal","isH3":true,"content":"<p>See also <a href=\"/en-US/docs/Web/JavaScript/Data_structures#boolean_type\">boolean type</a> for more information.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token boolean\">true</span>\n<span class=\"token boolean\">false</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"numeric_literals","title":"Numeric literals","isH3":true,"content":"<p>The <a href=\"/en-US/docs/Web/JavaScript/Data_structures#number_type\">Number</a> and <a href=\"/en-US/docs/Web/JavaScript/Data_structures#bigint_type\">BigInt</a> types use numeric literals.</p>\n<h4 id=\"decimal\">Decimal</h4>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token number\">1234567890</span>\n<span class=\"token number\">42</span>\n</code></pre></div>\n<p>Decimal literals can start with a zero (<code>0</code>) followed by another decimal digit, but if all digits after the leading <code>0</code> are smaller than 8, the number is interpreted as an octal number. This is considered a legacy syntax, and number literals prefixed with <code>0</code>, whether interpreted as octal or decimal, cause a syntax error in <a href=\"/en-US/docs/Web/JavaScript/Reference/Strict_mode#legacy_octal_literals\">strict mode</a> — so, use the <code>0o</code> prefix instead.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token number\">0888</span> <span class=\"token comment\">// 888 parsed as decimal</span>\n<span class=\"token number\">0777</span> <span class=\"token comment\">// parsed as octal, 511 in decimal</span>\n</code></pre></div>\n<h5 id=\"exponential\">Exponential</h5>\n<p>The decimal exponential literal is specified by the following format: <code>beN</code>; where <code>b</code> is a base number (integer or floating), followed by an <code>E</code> or <code>e</code> character (which serves as separator or <em>exponent indicator</em>) and <code>N</code>, which is <em>exponent</em> or <em>power</em> number – a signed integer.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token number\">0e-5</span>   <span class=\"token comment\">// 0</span>\n<span class=\"token number\">0e+5</span>   <span class=\"token comment\">// 0</span>\n<span class=\"token number\">5e1</span>    <span class=\"token comment\">// 50</span>\n<span class=\"token number\">175e-2</span> <span class=\"token comment\">// 1.75</span>\n<span class=\"token number\">1e3</span>    <span class=\"token comment\">// 1000</span>\n<span class=\"token number\">1e-3</span>   <span class=\"token comment\">// 0.001</span>\n<span class=\"token number\">1E3</span>    <span class=\"token comment\">// 1000</span>\n</code></pre></div>\n<h4 id=\"binary\">Binary</h4>\n<p>Binary number syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"B\" (<code>0b</code> or <code>0B</code>). Any character after the <code>0b</code> that is not 0 or 1 will terminate the literal sequence.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token number\">0b10000000000000000000000000000000</span> <span class=\"token comment\">// 2147483648</span>\n<span class=\"token number\">0b01111111100000000000000000000000</span> <span class=\"token comment\">// 2139095040</span>\n<span class=\"token number\">0B00000000011111111111111111111111</span> <span class=\"token comment\">// 8388607</span>\n</code></pre></div>\n<h4 id=\"octal\">Octal</h4>\n<p>Octal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"O\" (<code>0o</code> or <code>0O)</code>. Any character after the <code>0o</code> that is outside the range (01234567) will terminate the literal sequence.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token number\">0O755</span> <span class=\"token comment\">// 493</span>\n<span class=\"token number\">0o644</span> <span class=\"token comment\">// 420</span>\n</code></pre></div>\n<h4 id=\"hexadecimal\">Hexadecimal</h4>\n<p>Hexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"X\" (<code>0x</code> or <code>0X</code>). Any character after the <code>0x</code> that is outside the range (0123456789ABCDEF) will terminate the literal sequence.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token number\">0xFFFFFFFFFFFFFFFFF</span> <span class=\"token comment\">// 295147905179352830000</span>\n<span class=\"token number\">0x123456789ABCDEF</span>   <span class=\"token comment\">// 81985529216486900</span>\n<span class=\"token number\">0XA</span>                 <span class=\"token comment\">// 10</span>\n</code></pre></div>\n<h4 id=\"bigint_literal\">BigInt literal</h4>\n<p>The <a href=\"/en-US/docs/Web/JavaScript/Data_structures#bigint_type\">BigInt</a> type is a numeric primitive in JavaScript that can represent integers with arbitrary precision. BigInt literals are created by appending <code>n</code> to the end of an integer.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token number\">123456789123456789n</span>     <span class=\"token comment\">// 123456789123456789</span>\n<span class=\"token number\">0o777777777777n</span>         <span class=\"token comment\">// 68719476735</span>\n<span class=\"token number\">0x123456789ABCDEFn</span>      <span class=\"token comment\">// 81985529216486895</span>\n<span class=\"token number\">0b11101001010101010101n</span> <span class=\"token comment\">// 955733</span>\n</code></pre></div>\n<p>BigInt literals cannot start with <code>0</code> to avoid confusion with legacy octal literals.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token number\">0755n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError: invalid BigInt syntax</span>\n</code></pre></div>\n<p>For octal <code>BigInt</code> numbers, always use zero followed by the letter \"o\" (uppercase or lowercase):</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-good notranslate\"><code><span class=\"token number\">0o755n</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>For more information about <code>BigInt</code>, see also <a href=\"/en-US/docs/Web/JavaScript/Data_structures#bigint_type\">JavaScript data structures</a>.</p>\n<h4 id=\"numeric_separators\">Numeric separators</h4>\n<p>To improve readability for numeric literals, underscores (<code>_</code>, <code>U+005F</code>) can be used as separators:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token number\">1_000_000_000_000</span>\n<span class=\"token number\">1_050.95</span>\n<span class=\"token number\">0b1010_0001_1000_0101</span>\n<span class=\"token number\">0o2_2_5_6</span>\n<span class=\"token number\">0xA0_B0_C0</span>\n<span class=\"token number\">1_000_000_000_000_000_000_000n</span>\n</code></pre></div>\n<p>Note these limitations:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token comment\">// More than one underscore in a row is not allowed</span>\n100__000<span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError</span>\n\n<span class=\"token comment\">// Not allowed at the end of numeric literals</span>\n100_<span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError</span>\n\n<span class=\"token comment\">// Can not be used after leading 0</span>\n<span class=\"token number\">0_1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"string_literals","title":"String literals","isH3":true,"content":"<p>A <a href=\"/en-US/docs/Web/JavaScript/Data_structures#string_type\">string</a> literal is zero or more Unicode code points enclosed in single or double quotes. Unicode code points may also be represented by an escape sequence. All code points may appear literally in a string literal except for these code points:</p>\n<ul>\n  <li>U+005C \\ (backslash)</li>\n  <li>U+000D &lt;CR&gt;</li>\n  <li>U+000A &lt;LF&gt;</li>\n  <li>The same kind of quote that begins the string literal</li>\n</ul>\n<p>Any code points may appear in the form of an escape sequence. String literals evaluate to ECMAScript String values. When generating these String values Unicode code points are UTF-16 encoded.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'foo'</span>\n<span class=\"token string\">\"bar\"</span>\n</code></pre></div>\n<p>The following subsections describe various escape sequences (<code>\\</code> followed by one or more characters) available in string literals. Any escape sequence not listed below becomes an \"identity escape\" that becomes the code point itself. For example, <code>\\z</code> is the same as <code>z</code>. There's a deprecated octal escape sequence syntax described in the <a href=\"/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#escape_sequences\">Deprecated and obsolete features</a> page. Many of these escape sequences are also valid in regular expressions — see <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape\">Character escape</a>.</p>\n<h4 id=\"escape_sequences\">Escape sequences</h4>\n<p>Special characters can be encoded using escape sequences:</p>\n<figure class=\"table-container\"><table>\n  <thead>\n    <tr>\n      <th>Escape sequence</th>\n      <th>Unicode code point</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>\\0</code></td>\n      <td>null character (U+0000 NULL)</td>\n    </tr>\n    <tr>\n      <td><code>\\'</code></td>\n      <td>single quote (U+0027 APOSTROPHE)</td>\n    </tr>\n    <tr>\n      <td><code>\\\"</code></td>\n      <td>double quote (U+0022 QUOTATION MARK)</td>\n    </tr>\n    <tr>\n      <td><code>\\\\</code></td>\n      <td>backslash (U+005C REVERSE SOLIDUS)</td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>newline (U+000A LINE FEED; LF)</td>\n    </tr>\n    <tr>\n      <td><code>\\r</code></td>\n      <td>carriage return (U+000D CARRIAGE RETURN; CR)</td>\n    </tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>vertical tab (U+000B LINE TABULATION)</td>\n    </tr>\n    <tr>\n      <td><code>\\t</code></td>\n      <td>tab (U+0009 CHARACTER TABULATION)</td>\n    </tr>\n    <tr>\n      <td><code>\\b</code></td>\n      <td>backspace (U+0008 BACKSPACE)</td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>form feed (U+000C FORM FEED)</td>\n    </tr>\n    <tr>\n      <td><code>\\</code> followed by a <a href=\"#line_terminators\">line terminator</a></td>\n      <td>empty string</td>\n    </tr>\n  </tbody>\n</table></figure>\n<p>The last escape sequence, <code>\\</code> followed by a line terminator, is useful for splitting a string literal across multiple lines without changing its meaning.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> longString <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"This is a very long string which needs \\\nto wrap across multiple lines because \\\notherwise my code is unreadable.\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Make sure there is no space or any other character after the backslash (except for a line break), otherwise it will not work. If the next line is indented, the extra spaces will also be present in the string's value.</p>\n<p>You can also use the <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Addition\"><code>+</code></a> operator to append multiple strings together, like this:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> longString <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"This is a very long string which needs \"</span> <span class=\"token operator\">+</span>\n  <span class=\"token string\">\"to wrap across multiple lines because \"</span> <span class=\"token operator\">+</span>\n  <span class=\"token string\">\"otherwise my code is unreadable.\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Both of the above methods result in identical strings.</p>\n<h4 id=\"hexadecimal_escape_sequences\">Hexadecimal escape sequences</h4>\n<p>Hexadecimal escape sequences consist of <code>\\x</code> followed by exactly two hexadecimal digits representing a code unit or code point in the range 0x0000 to 0x00FF.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"\\xA9\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"©\"</span>\n</code></pre></div>\n<h4 id=\"unicode_escape_sequences\">Unicode escape sequences</h4>\n<p>A Unicode escape sequence consists of exactly four hexadecimal digits following <code>\\u</code>. It represents a code unit in the UTF-16 encoding. For code points U+0000 to U+FFFF, the code unit is equal to the code point. Code points U+10000 to U+10FFFF require two escape sequences representing the two code units (a surrogate pair) used to encode the character; the surrogate pair is distinct from the code point.</p>\n<p>See also <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\"><code>String.fromCharCode()</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\"><code>String.prototype.charCodeAt()</code></a>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"\\u00A9\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"©\" (U+A9)</span>\n</code></pre></div>\n<h4 id=\"unicode_code_point_escapes\">Unicode code point escapes</h4>\n<p>A Unicode code point escape consists of <code>\\u{</code>, followed by a code point in hexadecimal base, followed by <code>}</code>. The value of the hexadecimal digits must be in the range 0 and 0x10FFFF inclusive. Code points in the range U+10000 to U+10FFFF do not need to be represented as a surrogate pair.</p>\n<p>See also <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\"><code>String.fromCodePoint()</code></a> and <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\"><code>String.prototype.codePointAt()</code></a>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"\\u{2F804}\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CJK COMPATIBILITY IDEOGRAPH-2F804 (U+2F804)</span>\n\n<span class=\"token comment\">// the same character represented as a surrogate pair</span>\n<span class=\"token string\">\"\\uD87E\\uDC04\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"regular_expression_literals","title":"Regular expression literals","isH3":true,"content":"<p>Regular expression literals are enclosed by two forward slashes (<code>/</code>). The lexer consumes all characters up to the next unescaped forward slash or the end of the line, unless the forward slash appears within a character class (<code>[]</code>). Some characters (namely, those that are <a href=\"#identifiers\">identifier parts</a>) can appear after the closing slash, denoting flags.</p>\n<p>The lexical grammar is very lenient: not all regular expression literals that get identified as one token are valid regular expressions.</p>\n<p>See also <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> for more information.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab<span class=\"token quantifier number\">+</span>c</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">]</span><span class=\"token regex-delimiter\">/</span></span>\n</code></pre></div>\n<p>A regular expression literal cannot start with two forward slashes (<code>//</code>), because that would be a line comment. To specify an empty regular expression, use <code>/(?:)/</code>.</p>"}},{"type":"prose","value":{"id":"template_literals","title":"Template literals","isH3":true,"content":"<p>One template literal consists of several tokens: <code>`xxx${</code> (template head), <code>}xxx${</code> (template middle), and <code>}xxx` </code>(template tail) are individual tokens, while any expression may come between them.</p>\n<p>See also <a href=\"/en-US/docs/Web/JavaScript/Reference/Template_literals\">template literals</a> for more information.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string text</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string text line 1\n string text line 2</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string text </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>expression<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> string text</span><span class=\"token template-punctuation string\">`</span></span>\n\ntag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string text </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>expression<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> string text</span><span class=\"token template-punctuation string\">`</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"automatic_semicolon_insertion","title":"Automatic semicolon insertion","isH3":false,"content":"<p>Some <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements\">JavaScript statements</a>' syntax definitions require semicolons (<code>;</code>) at the end. They include:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement\">Expression statements</a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/do...while\"><code>do...while</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/continue\"><code>continue</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/break\"><code>break</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/return\"><code>return</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/throw\"><code>throw</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/debugger\"><code>debugger</code></a></li>\n  <li>Class field declarations (<a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">public</a> or <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties\">private</a>)</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/import\"><code>import</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/export\"><code>export</code></a></li>\n</ul>\n<p>However, to make the language more approachable and convenient, JavaScript is able to automatically insert semicolons when consuming the token stream, so that some invalid token sequences can be \"fixed\" to valid syntax. This step happens after the program text has been parsed to tokens according to the lexical grammar. There are three cases when semicolons are automatically inserted:</p>\n<p>1. When a token not allowed by the grammar is encountered, and it's separated from the previous token by at least one <a href=\"#line_terminators\">line terminator</a> (including a block comment that includes at least one line terminator), or the token is \"}\", then a semicolon is inserted before the token.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span>\n<span class=\"token number\">2</span> <span class=\"token punctuation\">}</span> <span class=\"token number\">3</span>\n\n<span class=\"token comment\">// is transformed by ASI into:</span>\n\n<span class=\"token punctuation\">{</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">;</span><span class=\"token number\">2</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Which is valid grammar encoding three statements,</span>\n<span class=\"token comment\">// each consisting of a number literal</span>\n</code></pre></div>\n<p>The ending \")\" of <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/do...while\"><code>do...while</code></a> is taken care of as a special case by this rule as well.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token comment\">/* ; */</span> <span class=\"token comment\">// ASI here</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n</code></pre></div>\n<p>However, semicolons are not inserted if the semicolon would then become the separator in the <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for\"><code>for</code></a> statement's head.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// No ASI here</span>\n  a <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token comment\">// No ASI here</span>\n  a<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Semicolons are also never inserted as <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/Empty\">empty statements</a>. For example, in the code below, if a semicolon is inserted after \")\", then the code would be valid, with an empty statement as the <code>if</code> body and the <code>const</code> declaration being a separate statement. However, because automatically inserted semicolons cannot become empty statements, this causes a <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements#difference_between_statements_and_declarations\">declaration</a> to become the body of the <code>if</code> statement, which is not valid.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// SyntaxError: Unexpected token 'const'</span>\n</code></pre></div>\n<p>2. When the end of the input stream of tokens is reached, and the parser is unable to parse the single input stream as a complete program, a semicolon is inserted at the end.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">/* ; */</span> <span class=\"token comment\">// ASI here</span>\n</code></pre></div>\n<p>This rule is a complement to the previous rule, specifically for the case where there's no \"offending token\" but the end of input stream.</p>\n<p>3. When the grammar forbids line terminators in some place but a line terminator is found, a semicolon is inserted. These places include:</p>\n<ul>\n  <li><code>expr &lt;here&gt; ++</code>, <code>expr &lt;here&gt; --</code></li>\n  <li><code>continue &lt;here&gt; lbl</code></li>\n  <li><code>break &lt;here&gt; lbl</code></li>\n  <li><code>return &lt;here&gt; expr</code></li>\n  <li><code>throw &lt;here&gt; expr</code></li>\n  <li><code>yield &lt;here&gt; expr</code></li>\n  <li><code>yield &lt;here&gt; * expr</code></li>\n  <li><code>(param) &lt;here&gt; =&gt; {}</code></li>\n  <li><code>async &lt;here&gt; function</code>, <code>async &lt;here&gt; prop()</code>, <code>async &lt;here&gt; function*</code>, <code>async &lt;here&gt; *prop()</code>, <code>async &lt;here&gt; (param) &lt;here&gt; =&gt; {}</code></li>\n</ul>\n<p>Here <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Increment\"><code>++</code></a> is not treated as a postfix operator applying to variable <code>b</code>, because a line terminator occurs between <code>b</code> and <code>++</code>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>a <span class=\"token operator\">=</span> b\n<span class=\"token operator\">++</span>c\n\n<span class=\"token comment\">// is transformed by ASI into</span>\n\na <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">++</span>c<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Here, the <code>return</code> statement returns <code>undefined</code>, and the <code>a + b</code> becomes an unreachable statement.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">return</span>\na <span class=\"token operator\">+</span> b\n\n<span class=\"token comment\">// is transformed by ASI into</span>\n\n<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Note that ASI would only be triggered if a line break separates tokens that would otherwise produce invalid syntax. If the next token can be parsed as part of a valid structure, semicolons would not be inserted. For example:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Because <code>()</code> can be seen as a function call, it would usually not trigger ASI. Similarly, <code>[]</code> may be a member access. The code above is equivalent to:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This happens to be valid syntax. <code>1[1, 2, 3]</code> is a <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors\">property accessor</a> with a <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator\">comma</a>-joined expression. Therefore, you would get errors like \"1 is not a function\" and \"Cannot read properties of undefined (reading 'forEach')\" when running the code.</p>\n<p>Within classes, class fields and generator methods can be a pitfall as well.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token operator\">*</span><span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>It is seen as:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>And therefore will be a syntax error around <code>{</code>.</p>\n<p>There are the following rules-of-thumb for dealing with ASI, if you want to enforce semicolon-less style:</p>\n<ul>\n  <li>Write postfix <code>++</code> and <code>--</code> on the same line as their operands.\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> b\n<span class=\"token operator\">++</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ReferenceError: Invalid left-hand side expression in prefix operation</span>\n</code></pre></div>\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> b<span class=\"token operator\">++</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n</code></pre></div>\n  </li>\n  <li>The expressions after <code>return</code>, <code>throw</code>, or <code>yield</code> should be on the same line as the keyword.\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">// Returns undefined; 1 + 1 is ignored</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>Similarly, the label identifier after <code>break</code> or <code>continue</code> should be on the same line as the keyword.\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token literal-property property\">outerBlock</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">innerBlock</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">break</span>\n      outerBlock <span class=\"token comment\">// SyntaxError: Illegal break statement</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-good notranslate\"><code><span class=\"token literal-property property\">outerBlock</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">innerBlock</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">break</span> outerBlock\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>The <code>=&gt;</code> of an arrow function should be on the same line as the end of its parameters.\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">+</span> b\n</code></pre></div>\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  a <span class=\"token operator\">+</span> b\n</code></pre></div>\n  </li>\n  <li>The <code>async</code> of async functions, methods, etc. cannot be directly followed by a line terminator.\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">async</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>If a line starts with one of <code>(</code>, <code>[</code>, <code>`</code>, <code>+</code>, <code>-</code>, <code>/</code> (as in regex literals), prefix it with a semicolon, or end the previous line with a semicolon.\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token comment\">// The () may be merged with the previous line as a function call</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// The [ may be merged with the previous line as a property access</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// The ` may be merged with the previous line as a tagged template literal</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string text </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// The + may be merged with the previous line as a binary + expression</span>\n<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// The - may be merged with the previous line as a binary - expression</span>\n<span class=\"token operator\">-</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// The / may be merged with the previous line as a division expression</span>\n<span class=\"token operator\">/</span>pattern<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n</code></pre></div>\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-good notranslate\"><code><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string text </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">pattern</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n</code></pre></div>\n  </li>\n  <li>Class fields should preferably always be ended with semicolons — in addition to the previous rule (which includes a field declaration followed by a <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names\">computed property</a>, since the latter starts with <code>[</code>), semicolons are also required between a field declaration and a generator method.\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  <span class=\"token operator\">*</span><span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Seen as a = 1[b] = 2 * gen() {}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/ecmascript-language-lexical-grammar.html","title":"ECMAScript Language Specification"}],"query":"javascript.grammar"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.grammar"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Guide/Grammar_and_types\">Grammar and types</a> guide</li>\n  <li><a href=\"https://whereswalden.com/2013/08/12/micro-feature-from-es6-now-in-firefox-aurora-and-nightly-binary-and-octal-numbers/\" class=\"external\" target=\"_blank\">Micro-feature from ES6, now in Firefox Aurora and Nightly: binary and octal numbers</a> by Jeff Walden (2013)</li>\n  <li><a href=\"https://mathiasbynens.be/notes/javascript-escapes\" class=\"external\" target=\"_blank\">JavaScript character escape sequences</a> by Mathias Bynens (2011)</li>\n</ul>"}}],"toc":[{"text":"Format-control characters","id":"format-control_characters"},{"text":"White space","id":"white_space"},{"text":"Line terminators","id":"line_terminators"},{"text":"Comments","id":"comments"},{"text":"Identifiers","id":"identifiers"},{"text":"Keywords","id":"keywords"},{"text":"Literals","id":"literals"},{"text":"Automatic semicolon insertion","id":"automatic_semicolon_insertion"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.","popularity":0.0721,"modified":"2023-11-08T04:45:53.000Z","source":{"folder":"en-us/web/javascript/reference/lexical_grammar","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/lexical_grammar/index.md","last_commit_url":"https://github.com/mdn/content/commit/41cddfdaeed4a73fb8234c332150df8e54df31e9","filename":"index.md"},"short_title":"Lexical grammar","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"Reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Lexical_grammar","title":"Lexical grammar"}],"pageTitle":"Lexical grammar - JavaScript | MDN","noIndexing":false}}