{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"RegExp: lastIndex","mdn_url":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex","locale":"en-US","native":"English (US)","browserCompat":["javascript.builtins.RegExp.lastIndex"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a></strong></li><li><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp\"><code>RegExp() constructor</code></a></li></ol></details></li><li><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species\"><code>RegExp[@@species]</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>RegExp.prototype.dotAll</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>RegExp.prototype.flags</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>RegExp.prototype.global</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>RegExp.prototype.hasIndices</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\"><code>RegExp.prototype.ignoreCase</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input\"><code>RegExp.input ($_)</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><em><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\" aria-current=\"page\"><code>RegExp: lastIndex</code></a></em></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\"><code>RegExp.lastMatch ($&amp;)</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen\"><code>RegExp.lastParen ($+)</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext\"><code>RegExp.leftContext ($`)</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>RegExp.prototype.multiline</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n\"><code>RegExp.$1, â€¦, RegExp.$9</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext\"><code>RegExp.rightContext ($')</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\"><code>RegExp.prototype.source</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>RegExp.prototype.sticky</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\"><code>RegExp.prototype.unicode</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets\"><code>RegExp.prototype.unicodeSets</code></a></li></ol></details></li><li><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match\"><code>RegExp.prototype[@@match]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll\"><code>RegExp.prototype[@@matchAll]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\"><code>RegExp.prototype[@@replace]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search\"><code>RegExp.prototype[@@search]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split\"><code>RegExp.prototype[@@split]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile\"><code>RegExp.prototype.compile()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>RegExp.prototype.test()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString\"><code>RegExp.prototype.toString()</code></a></li></ol></details></li><li><strong>Inheritance:</strong></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><details><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code>Function() constructor</code></a></li></ol></details></li><li><details><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function: displayName</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function: length</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function: name</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function: prototype</code></a></li></ol></details></li><li><details><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance\"><code>Function.prototype[@@hasInstance]()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></details></li><li><strong><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><details><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li></ol></details></li><li><details><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></details></li></ol>","sidebarMacro":"JSRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>lastIndex</code></strong> data property of a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> instance specifies the index at which to start the next match.</p>"}},{"type":"prose","value":{"id":"try_it","title":"Try it","isH3":false,"content":"<iframe class=\"interactive is-js-height\" height=\"200\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/regexp-lastindex.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"value","title":"Value","isH3":false,"content":"<p>A non-negative integer.</p><figure class=\"table-container\"><table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp: lastIndex</code></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Writable</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <td>Enumerable</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <td>Configurable</td>\n      <td>no</td>\n    </tr>\n  </tbody>\n</table></figure>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>This property is set only if the regular expression instance used the <code>g</code> flag to indicate a global search, or the <code>y</code> flag to indicate a sticky search. The following rules apply when <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>exec()</code></a> is called on a given input:</p>\n<ul>\n  <li>If <code>lastIndex</code> is greater than the length of the input, <code>exec()</code> will not find a match, and <code>lastIndex</code> will be set to 0.</li>\n  <li>If <code>lastIndex</code> is equal to or less than the length of the input, <code>exec()</code> will attempt to match the input starting from <code>lastIndex</code>.\n    <ul>\n      <li>If <code>exec()</code> finds a match, then <code>lastIndex</code> will be set to the position of the end of the matched string in the input.</li>\n      <li>If <code>exec()</code> does not find a match, then <code>lastIndex</code> will be set to 0.</li>\n    </ul>\n  </li>\n</ul>\n<p>Other regex-related methods, such as <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>RegExp.prototype.test()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a>, etc., call <code>exec()</code> under the hood, so they have different effects on <code>lastIndex</code>. See their respective pages for details.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"using_lastindex","title":"Using lastIndex","isH3":true,"content":"<p>Consider the following sequence of statements:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token group punctuation\">(</span>hi<span class=\"token group punctuation\">)</span><span class=\"token quantifier number\">?</span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Matches the empty string.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Returns <code>[\"hi\", \"hi\"]</code> with <code>lastIndex</code> equal to 2.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Returns <code>[\"\", undefined]</code>, an empty array whose zeroth element is the match string. In this case, the empty string because <code>lastIndex</code> was 2 (and still is 2) and <code>hi</code> has length 2.</p>"}},{"type":"prose","value":{"id":"using_lastindex_with_sticky_regexes","title":"Using lastIndex with sticky regexes","isH3":true,"content":"<p>The <code>lastIndex</code> property is writable. You can set it to make the regex start its next search at a given index.</p>\n<p>The <code>y</code> flag almost always requires setting <code>lastIndex</code>. It always matches strictly at <code>lastIndex</code> and does not attempt any later positions. This is usually useful for writing parsers, when you want to match tokens only at the current position.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> stringPattern <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\"<span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token char-class-negation operator\">^</span>\"<span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token quantifier number\">*</span>\"</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">y</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">const message = \"Hello world\";</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\nstringPattern<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringPattern<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n\nstringPattern<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringPattern<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['\"Hello world\"']</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"rewinding_lastindex","title":"Rewinding lastIndex","isH3":true,"content":"<p>The <code>g</code> flag also benefits from setting <code>lastIndex</code>. One common use case is when the string is modified in the middle of a global search. In this case, we may miss a particular match if the string is shortened. We can avoid this by rewinding <code>lastIndex</code>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mdLinkPattern <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\[</span><span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token char-class-negation operator\">^</span><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token special-escape escape\">\\]</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token quantifier number\">+</span><span class=\"token special-escape escape\">\\]</span><span class=\"token special-escape escape\">\\(</span><span class=\"token group punctuation\">(?&lt;<span class=\"token group-name variable\">link</span>&gt;</span><span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token char-class-negation operator\">^</span>()<span class=\"token char-set class-name\">\\s</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token quantifier number\">+</span><span class=\"token group punctuation\">)</span><span class=\"token special-escape escape\">\\)</span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">dg</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">resolveMDLink</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> match<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> modifiedLine <span class=\"token operator\">=</span> line<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>match <span class=\"token operator\">=</span> mdLinkPattern<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>modifiedLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> originalLink <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> resolvedLink <span class=\"token operator\">=</span> originalLink<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token anchor function\">^</span>files<span class=\"token alternation keyword\">|</span><span class=\"token escape\">\\/</span>index<span class=\"token special-escape escape\">\\.</span>md<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    modifiedLine <span class=\"token operator\">=</span>\n      modifiedLine<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n      resolvedLink <span class=\"token operator\">+</span>\n      modifiedLine<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Rewind the pattern to the end of the resolved link</span>\n    mdLinkPattern<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">+=</span> resolvedLink<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> originalLink<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> modifiedLine<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">resolveMDLink</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"[`lastIndex`](files/en-us/web/javascript/reference/global_objects/regexp/lastindex/index.md)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [`lastIndex`](/en-us/web/javascript/reference/global_objects/regexp/lastindex)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">resolveMDLink</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"[`ServiceWorker`](files/en-us/web/api/serviceworker/index.md) and [`SharedWorker`](files/en-us/web/api/sharedworker/index.md)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [`ServiceWorker`](/en-us/web/api/serviceworker) and [`SharedWorker`](/en-us/web/api/sharedworker)</span>\n</code></pre></div>\n<p>Try deleting the <code>mdLinkPattern.lastIndex += resolvedLink.length - originalLink.length</code> line and running the second example. You will find that the second link is not replaced correctly, because the <code>lastIndex</code> is already past the link's index after the string is shortened.</p>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>Warning:</strong> This example is for demonstration only. To deal with Markdown, you should probably use a parsing library instead of regex.</p>\n</div>"}},{"type":"prose","value":{"id":"optimizing_searching","title":"Optimizing searching","isH3":true,"content":"<p>You can optimize searching by setting <code>lastIndex</code> to a point where previous possible occurrences can be ignored. For example, instead of this:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> stringPattern <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\"<span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token char-class-negation operator\">^</span>\"<span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token quantifier number\">*</span>\"</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">const message = \"Hello \" + \"world\";</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Pretend we've already dealt with the previous parts of the string</span>\n<span class=\"token keyword\">let</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> remainingInput <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nextString <span class=\"token operator\">=</span> stringPattern<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>remainingInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nextString<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"world\"</span>\noffset <span class=\"token operator\">+=</span> nextString<span class=\"token punctuation\">.</span>index <span class=\"token operator\">+</span> nextString<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Consider this:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>stringPattern<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nextString <span class=\"token operator\">=</span> stringPattern<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>remainingInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nextString<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"world\"</span>\noffset <span class=\"token operator\">=</span> stringPattern<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This is potentially more performant because we avoid string slicing.</p>"}},{"type":"prose","value":{"id":"avoiding_side_effects","title":"Avoiding side effects","isH3":true,"content":"<p>The side effects caused by <code>exec()</code> can be confusing, especially if the input is different for each <code>exec()</code>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">foo</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo baz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false, because lastIndex is non-zero</span>\n</code></pre></div>\n<p>This is even more confusing when you are hand-modifying <code>lastIndex</code>. To contain the side effects, remember to reset <code>lastIndex</code> after each input is completely processed.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">foo</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo baz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>With some abstraction, you can require <code>lastIndex</code> to be set to a particular value before each <code>exec()</code> call.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">createMatcher</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pattern</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create a copy, so that the original regex is never updated</span>\n  <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> offset</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    regex<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> matchFoo <span class=\"token operator\">=</span> <span class=\"token function\">createMatcher</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">foo</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">matchFoo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo bar\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"foo\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">matchFoo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo baz\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"foo\"</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/text-processing.html#sec-properties-of-regexp-instances","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.RegExp.lastIndex"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"javascript.builtins.RegExp.lastIndex"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>RegExp.prototype.dotAll</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>RegExp.prototype.global</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>RegExp.prototype.hasIndices</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\"><code>RegExp.prototype.ignoreCase</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>RegExp.prototype.multiline</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\"><code>RegExp.prototype.source</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>RegExp.prototype.sticky</code></a></li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\"><code>RegExp.prototype.unicode</code></a></li>\n</ul>"}}],"toc":[{"text":"Try it","id":"try_it"},{"text":"Value","id":"value"},{"text":"Description","id":"description"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The lastIndex data property of a RegExp instance specifies the index at which to start the next match.","popularity":0.0047,"modified":"2023-09-25T07:33:31.000Z","source":{"folder":"en-us/web/javascript/reference/global_objects/regexp/lastindex","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/global_objects/regexp/lastindex/index.md","last_commit_url":"https://github.com/mdn/content/commit/fb85334ffa4a2c88d209b1074909bee0e0abd57a","filename":"index.md"},"short_title":"RegExp: lastIndex","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/en-US/docs/Web/JavaScript/Reference","title":"Reference"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects","title":"Standard built-in objects"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp","title":"RegExp"},{"uri":"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex","title":"RegExp: lastIndex"}],"pageTitle":"RegExp: lastIndex - JavaScript | MDN","noIndexing":false}}