{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Making PWAs work offline with Service workers","mdn_url":"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/Offline_Service_workers","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><a href=\"/en-US/docs/Web/Progressive_web_apps\"><strong>Progressive web apps</strong></a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Guides\"><strong>Guides</strong></a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Guides/What_is_a_progressive_web_app\">What is a progressive web app?</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Guides/Installing\">Installing and uninstalling web apps</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Guides/Making_PWAs_installable\">Making PWAs installable</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Guides/Offline_and_background_operation\">Offline and background operation</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Guides/Caching\">Caching</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Guides/Best_practices\">Best practices for PWAs</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials\"><strong>Tutorials</strong></a></li><li><ol><li><details><summary>CycleTracker</summary><ol><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/CycleTracker\">CycleTracker</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/CycleTracker/HTML_and_CSS\">Base HTML and CSS</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/CycleTracker/Secure_connection\">Secure connection</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/CycleTracker/JavaScript_functionality\">JavaScript functionality</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/CycleTracker/Manifest_file\">Manifest and iconography</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/CycleTracker/Service_workers\">Service workers</a></li></ol></details></li></ol></li><li><ol><li><details open=\"\"><summary>js13kGames</summary><ol><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames\">js13kGames</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/App_structure\">Progressive web app structure</a></li><li><em><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/Offline_Service_workers\" aria-current=\"page\">Making PWAs work offline with Service workers</a></em></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/Installable_PWAs\">How to make PWAs installable</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/Re-engageable_Notifications_Push\">How to make PWAs re-engageable using Notifications and Push</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/Loading\">Progressive loading</a></li></ol></details></li></ol></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/How_to\"><strong>How to</strong></a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/How_to/Trigger_install_prompt\">Trigger installation from your PWA</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/How_to/Define_app_icons\">Define your app icons</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/How_to/Create_a_standalone_app\">Create a standalone app</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/How_to/Customize_your_app_colors\">Customize your app's theme and background colors</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/How_to/Display_badge_on_app_icon\">Display a badge on the app icon</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/How_to/Expose_common_actions_as_shortcuts\">Expose common app actions as shortcuts</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/How_to/Share_data_between_apps\">Share data between apps</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/How_to/Associate_files_with_your_PWA\">Associate files with your PWA</a></li><li><a href=\"/en-US/docs/Web/Progressive_web_apps/Reference\"><strong>Reference</strong></a></li></ol>","sidebarMacro":"PWASidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/App_structure\"><span class=\"button-wrap\"> Previous </span></a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames\"><span class=\"button-wrap\"> Overview: js13kGames</span></a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/Installable_PWAs\"><span class=\"button-wrap\"> Next  </span></a></li>\n</ul>\n\n<p>Now that we've seen what the structure of js13kPWA looks like and have seen the basic shell up and running, let's look at how the offline capabilities using Service Worker are implemented. In this article, we look at how it is used in our <a href=\"https://mdn.github.io/pwa-examples/js13kpwa/\" class=\"external\" target=\"_blank\">js13kPWA example</a> (<a href=\"https://github.com/mdn/pwa-examples/tree/main/js13kpwa\" class=\"external\" target=\"_blank\">see the source code also</a>). We examine how to add offline functionality.</p>"}},{"type":"prose","value":{"id":"service_workers_explained","title":"Service workers explained","isH3":false,"content":"<p>Service Workers are a virtual proxy between the browser and the network. They make it possible to properly cache the assets of a website and make them available when the user's device is offline.</p>\n<p>They run on a separate thread from the main JavaScript code of our page, and don't have any access to the DOM structure. This introduces a different approach from traditional web programming — the API is non-blocking, and can send and receive communication between different contexts. You are able to give a Service Worker something to work on, and receive the result whenever it is ready using a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>-based approach.</p>\n<p>Service workers can do more than offering offline capabilities, including handling notifications or performing heavy calculations. Service workers are quite powerful as they can take control over network requests, modify them, serve custom responses retrieved from the cache, or synthesize responses completely.</p>\n<p>To learn more about service workers, see <a href=\"/en-US/docs/Web/Progressive_web_apps/Guides/Offline_and_background_operation\">Offline and background operation</a>.</p>"}},{"type":"prose","value":{"id":"service_workers_in_the_js13kpwa_app","title":"Service workers in the js13kPWA app","isH3":false,"content":"<p>Let's see how the js13kPWA app uses Service Workers to provide offline capabilities.</p>"}},{"type":"prose","value":{"id":"registering_the_service_worker","title":"Registering the Service Worker","isH3":true,"content":"<p>We'll start by looking at the code that registers a new Service Worker, in the app.js file:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"serviceWorker\"</span> <span class=\"token keyword\">in</span> navigator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./pwa-examples/js13kpwa/sw.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>If the service worker API is supported in the browser, it is registered against the site using the <a href=\"/en-US/docs/Web/API/ServiceWorkerContainer/register\"><code>ServiceWorkerContainer.register()</code></a> method. Its contents reside in the sw.js file, and can be executed after the registration is successful. It's the only piece of Service Worker code that sits inside the app.js file; everything else that is Service Worker-specific is written in the sw.js file itself.</p>"}},{"type":"prose","value":{"id":"lifecycle_of_a_service_worker","title":"Lifecycle of a Service Worker","isH3":true,"content":"<p>When registration is complete, the sw.js file is automatically downloaded, then installed, and finally activated.</p>\n<h4 id=\"installation\">Installation</h4>\n<p>The API allows us to add event listeners for key events we are interested in — the first one is the <code>install</code> event:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"install\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[Service Worker] Install\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In the <code>install</code> listener, we can initialize the cache and add files to it for offline use. Our js13kPWA app does exactly that.</p>\n<p>First, a variable for storing the cache name is created, and the app shell files are listed in one array.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> cacheName <span class=\"token operator\">=</span> <span class=\"token string\">\"js13kPWA-v1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> appShellFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/index.html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/app.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/style.css\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/fonts/graduate.eot\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/fonts/graduate.ttf\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/fonts/graduate.woff\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/favicon.ico\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/img/js13kgames.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/img/bg.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/icons/icon-32.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/icons/icon-64.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/icons/icon-96.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/icons/icon-128.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/icons/icon-168.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/icons/icon-192.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/icons/icon-256.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/pwa-examples/js13kpwa/icons/icon-512.png\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Next, the links to images to be loaded along with the content from the data/games.js file are generated in the second array. After that, both arrays are merged using the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a> function.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> gamesImages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> games<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gamesImages<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">data/img/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>games<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.jpg</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> contentToCache <span class=\"token operator\">=</span> appShellFiles<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>gamesImages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Then we can manage the <code>install</code> event itself:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"install\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[Service Worker] Install\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[Service Worker] Caching all: app shell and content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>contentToCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>There are two things that need an explanation here: what <a href=\"/en-US/docs/Web/API/ExtendableEvent/waitUntil\"><code>ExtendableEvent.waitUntil</code></a> does, and what the <a href=\"/en-US/docs/Web/API/Cache\" title=\"caches\"><code>caches</code></a> object is.</p>\n<p>The service worker does not install until the code inside <code>waitUntil</code> is executed. It returns a promise — this approach is needed because installing may take some time, so we have to wait for it to finish.</p>\n<p><code>caches</code> is a special <a href=\"/en-US/docs/Web/API/CacheStorage\"><code>CacheStorage</code></a> object available in the scope of the given Service Worker to enable saving data — saving to <a href=\"/en-US/docs/Web/API/Web_Storage_API\">web storage</a> won't work, because web storage is synchronous. With Service Workers, we use the Cache API instead.</p>\n<p>Here, we open a cache with a given name, then add all the files our app uses to the cache, so they are available next time it loads. Resources are identified by their request URL, which is relative to the worker's <a href=\"/en-US/docs/Web/API/WorkerGlobalScope/location\" title=\"location\">location</a>.</p>\n<p>You may notice we haven't cached <code>game.js</code>. This is the file that contains the data we use when displaying our games. In reality this data would most likely come from an API endpoint or database and caching the data would mean updating it periodically when there was network connectivity. We won't go into that here, but the <a href=\"/en-US/docs/Web/API/Web_Periodic_Background_Synchronization_API\" title=\"Periodic Background Sync API\"><code>Periodic Background Sync API</code></a> is good further reading on this topic.</p>\n<h4 id=\"activation\">Activation</h4>\n<p>There is also an <code>activate</code> event, which is used in the same way as <code>install</code>. This event is usually used to delete any files that are no longer necessary and clean up after the app in general. We don't need to do that in our app, so we'll skip it.</p>"}},{"type":"prose","value":{"id":"responding_to_fetches","title":"Responding to fetches","isH3":true,"content":"<p>We also have a <code>fetch</code> event at our disposal, which fires every time an HTTP request is fired off from our app. This is very useful, as it allows us to intercept requests and respond to them with custom responses. Here is a simple usage example:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[Service Worker] Fetched resource </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The response can be anything we want: the requested file, its cached copy, or a piece of JavaScript code that will do something specific — the possibilities are endless.</p>\n<p>In our example app, we serve content from the cache instead of the network as long as the resource is actually in the cache. We do this whether the app is online or offline. If the file is not in the cache, the app adds it there first before then serving it:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[Service Worker] Fetching resource: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[Service Worker] Caching new resource: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Here, we respond to the fetch event with a function that tries to find the resource in the cache and return the response if it's there. If not, we use another fetch request to fetch it from the network, then store the response in the cache so it will be available there next time it is requested.</p>\n<p>The <a href=\"/en-US/docs/Web/API/FetchEvent/respondWith\"><code>FetchEvent.respondWith</code></a> method takes over control — this is the part that functions as a proxy server between the app and the network. This allows us to respond to every single request with any response we want: prepared by the Service Worker, taken from cache, modified if needed.</p>\n<p>That's it! Our app is caching its resources on install and serving them with fetch from the cache, so it works even if the user is offline. It also caches new content whenever it is added.</p>"}},{"type":"prose","value":{"id":"updates","title":"Updates","isH3":false,"content":"<p>There is still one point to cover: how do you upgrade a Service Worker when a new version of the app containing new assets is available? The version number in the cache name is key to this:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> cacheName <span class=\"token operator\">=</span> <span class=\"token string\">\"js13kPWA-v1\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>When this updates to v2, we can then add all of our files (including our new files) to a new cache:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>contentToCache<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pwa-examples/js13kpwa/icons/icon-32.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"install\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>contentToCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>A new service worker is installed in the background, and the previous one (v1) works correctly up until there are no pages using it — the new Service Worker is then activated and takes over management of the page from the old one.</p>"}},{"type":"prose","value":{"id":"clearing_the_cache","title":"Clearing the cache","isH3":false,"content":"<p>Remember the <code>activate</code> event we skipped? It can be used to clear out the old cache we don't need anymore:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"activate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n        keyList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> cacheName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This ensures we have only the files we need in the cache, so we don't leave any garbage behind; the <a href=\"/en-US/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria\">available cache space in the browser is limited</a>, so it is a good idea to clean up after ourselves.</p>"}},{"type":"prose","value":{"id":"other_use_cases","title":"Other use cases","isH3":false,"content":"<p>Serving files from cache is not the only feature Service Worker offers. If you have heavy calculations to do, you can offload them from the main thread and do them in the worker, and receive results as soon as they are available. Performance-wise, you can prefetch resources that are not needed right now, but might be in the near future, so the app will be faster when you actually need those resources.</p>"}},{"type":"prose","value":{"id":"summary","title":"Summary","isH3":false,"content":"<p>In this article we took a simple look at how you can make your PWA work offline with service workers. Be sure to check out our further documentation if you want to learn more about the concepts behind the <a href=\"/en-US/docs/Web/API/Service_Worker_API\">Service Worker API</a> and how to use it in more detail.</p>\n<p>Service Workers are also used when dealing with <a href=\"/en-US/docs/Web/API/Push_API\">push notifications</a> — this will be explained in a subsequent article.</p><ul class=\"prev-next\">\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/App_structure\"><span class=\"button-wrap\"> Previous </span></a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames\"><span class=\"button-wrap\"> Overview: js13kGames</span></a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/Installable_PWAs\"><span class=\"button-wrap\"> Next  </span></a></li>\n</ul>"}}],"toc":[{"text":"Service workers explained","id":"service_workers_explained"},{"text":"Service workers in the js13kPWA app","id":"service_workers_in_the_js13kpwa_app"},{"text":"Updates","id":"updates"},{"text":"Clearing the cache","id":"clearing_the_cache"},{"text":"Other use cases","id":"other_use_cases"},{"text":"Summary","id":"summary"}],"summary":"In this article we took a simple look at how you can make your PWA work offline with service workers. Be sure to check out our further documentation if you want to learn more about the concepts behind the Service Worker API and how to use it in more detail.","popularity":0.0152,"modified":"2023-11-29T09:09:55.000Z","source":{"folder":"en-us/web/progressive_web_apps/tutorials/js13kgames/offline_service_workers","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/progressive_web_apps/tutorials/js13kgames/offline_service_workers/index.md","last_commit_url":"https://github.com/mdn/content/commit/10b342385644e822d123694ad3bc8c2ca9abb2dc","filename":"index.md"},"short_title":"Making PWAs work offline with Service workers","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/Progressive_web_apps","title":"Progressive web apps"},{"uri":"/en-US/docs/Web/Progressive_web_apps/Tutorials","title":"Tutorials"},{"uri":"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames","title":"js13kGames"},{"uri":"/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/Offline_Service_workers","title":"Making PWAs work offline with Service workers"}],"pageTitle":"Making PWAs work offline with Service workers - Progressive web apps | MDN","noIndexing":false}}