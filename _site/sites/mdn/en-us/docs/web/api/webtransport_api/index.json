{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"WebTransport API","mdn_url":"/en-US/docs/Web/API/WebTransport_API","locale":"en-US","native":"English (US)","browserCompat":["api.WebTransport"],"baseline":{"baseline":false,"support":{}},"sidebarHTML":"<ol><li><strong><em><a href=\"/en-US/docs/Web/API/WebTransport_API\" aria-current=\"page\">WebTransport API</a></em></strong></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/WebTransport\"><code>WebTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/WebTransportBidirectionalStream\"><code>WebTransportBidirectionalStream</code></a></li><li><a href=\"/en-US/docs/Web/API/WebTransportDatagramDuplexStream\"><code>WebTransportDatagramDuplexStream</code></a></li><li><a href=\"/en-US/docs/Web/API/WebTransportReceiveStream\"><code>WebTransportReceiveStream</code></a></li><li><a href=\"/en-US/docs/Web/API/WebTransportSendStream\"><code>WebTransportSendStream</code></a></li><li><a href=\"/en-US/docs/Web/API/WebTransportError\"><code>WebTransportError</code></a></li></ol></details></li></ol>","sidebarMacro":"DefaultAPISidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>The <strong>WebTransport API</strong> provides a modern update to <a href=\"/en-US/docs/Web/API/WebSockets_API\" title=\"WebSockets\">WebSockets</a>, transmitting data between client and server using <a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/\" class=\"external\" target=\"_blank\">HTTP/3 Transport</a>. WebTransport provides support for multiple streams, unidirectional streams, and out-of-order delivery. It enables reliable transport via <a href=\"/en-US/docs/Web/API/Streams_API\" title=\"streams\">streams</a> and unreliable transport via UDP-like datagrams.</p><div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a></p>\n</div>"}},{"type":"prose","value":{"id":"concepts_and_usage","title":"Concepts and usage","isH3":false,"content":"<p><a href=\"https://en.wikipedia.org/wiki/HTTP/3\" class=\"external\" target=\"_blank\">HTTP/3</a> has been in progress since 2018. It is based on Google's QUIC protocol (which is itself based on UDP), and fixes several issues around the classic TCP protocol, on which HTTP and WebSockets are based.</p>\n<p>These include:</p>\n<dl>\n  <dt id=\"head-of-line_blocking\"><a href=\"#head-of-line_blocking\"><strong>Head-of-line blocking</strong></a></dt>\n  <dd>\n    <p>HTTP/2 allows multiplexing, so a single connection can stream multiple resources simultaneously. However, if a single resource fails, all other resources on that connection are held up until any missing packets are retransmitted. With QUIC, only the failing resource is affected.</p>\n  </dd>\n  <dt id=\"faster_performance\"><a href=\"#faster_performance\"><strong>Faster performance</strong></a></dt>\n  <dd>\n    <p>QUIC is more performant than TCP in many ways. QUIC can handle security features by itself, rather than handing responsibility off to other protocols like TLS — meaning fewer round trips. And streams provide better transport efficiency than the older packet mechanism. That can make a significant difference, especially on high-latency networks.</p>\n  </dd>\n  <dt id=\"better_network_transitions\"><a href=\"#better_network_transitions\"><strong>Better network transitions</strong></a></dt>\n  <dd>\n    <p>QUIC uses a unique connection ID to handle the source and destination of each request — to ensure that packets are delivered correctly. This ID can persist between different networks, meaning that, for example, a download can continue interrupted if you switch from Wifi to a mobile network. HTTP/2, on the other hand, uses IP addresses as identifiers, so network transitions can be problematic.</p>\n  </dd>\n  <dt id=\"unreliable_transport\"><a href=\"#unreliable_transport\"><strong>Unreliable transport</strong></a></dt>\n  <dd>\n    <p>HTTP/3 supports unreliable data transmission via datagrams.</p>\n  </dd>\n</dl>\n<p>The WebTransport API provides low-level access to two-way communication via HTTP/3, taking advantage of the above benefits, and supporting both reliable and unreliable data transmission.</p>"}},{"type":"prose","value":{"id":"initial_connection","title":"Initial connection","isH3":true,"content":"<p>To open a connection to an HTTP/3 server, you pass its URL to the <a href=\"/en-US/docs/Web/API/WebTransport/WebTransport\" title=\"WebTransport()\"><code>WebTransport()</code></a> constructor. Note that the scheme needs to be HTTPS, and the port number needs to be explicitly specified. Once the <a href=\"/en-US/docs/Web/API/WebTransport/ready\"><code>WebTransport.ready</code></a> promise fulfills, you can start using the connection.</p>\n<p>Also note that you can respond to the connection closing by waiting for the <a href=\"/en-US/docs/Web/API/WebTransport/closed\"><code>WebTransport.closed</code></a> promise to fulfill. Errors returned by WebTransport operations are of type <a href=\"/en-US/docs/Web/API/WebTransportError\"><code>WebTransportError</code></a>, and contain additional data on top of the standard <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a> set.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://example.com:4999/wt\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initTransport</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Initialize transport connection</span>\n  <span class=\"token keyword\">const</span> transport <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebTransport</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// The connection can be used once ready fulfills</span>\n  <span class=\"token keyword\">await</span> transport<span class=\"token punctuation\">.</span>ready<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">closeTransport</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">transport</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Respond to connection closing</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> transport<span class=\"token punctuation\">.</span>closed<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The HTTP/3 connection to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> closed gracefully.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The HTTP/3 connection to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> closed due to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"unreliable_transmission_via_datagrams","title":"Unreliable transmission via datagrams","isH3":true,"content":"<p>\"Unreliable\" means that transmission of data is not guaranteed, nor is arrival in a specific order. This is fine in some situations and provides very fast delivery. For example, you might want to transmit regular game state updates where each message supersedes the last one that arrives, and order is not important.</p>\n<p>Unreliable data transmission is handled via the <a href=\"/en-US/docs/Web/API/WebTransport/datagrams\"><code>WebTransport.datagrams</code></a> property — this returns a <a href=\"/en-US/docs/Web/API/WebTransportDatagramDuplexStream\"><code>WebTransportDatagramDuplexStream</code></a> object containing everything you need to send datagrams to the server, and receive them back.</p>\n<p>The <a href=\"/en-US/docs/Web/API/WebTransportDatagramDuplexStream/writable\"><code>WebTransportDatagramDuplexStream.writable</code></a> property returns a <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a> object that you can write data to using a writer, for transmission to the server:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> writer <span class=\"token operator\">=</span> transport<span class=\"token punctuation\">.</span>datagrams<span class=\"token punctuation\">.</span>writable<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">69</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The <a href=\"/en-US/docs/Web/API/WebTransportDatagramDuplexStream/readable\"><code>WebTransportDatagramDuplexStream.readable</code></a> property returns a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> object that you can use to receive data from the server:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> transport<span class=\"token punctuation\">.</span>datagrams<span class=\"token punctuation\">.</span>readable<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// value is a Uint8Array.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"reliable_transmission_via_streams","title":"Reliable transmission via streams","isH3":true,"content":"<p>\"Reliable\" means that transmission and order of data are guaranteed. That provides slower delivery (albeit faster than with WebSockets), and is needed in situations where reliability and ordering are important (such as chat applications, for example).</p>\n<p>When using reliable transmission via streams you can also set the relative priority of different streams over the same transport.</p>"}},{"type":"prose","value":{"id":"unidirectional_transmission","title":"Unidirectional transmission","isH3":true,"content":"<p>To open a unidirectional stream from a user agent, you use the <a href=\"/en-US/docs/Web/API/WebTransport/createUnidirectionalStream\"><code>WebTransport.createUnidirectionalStream()</code></a> method to get a reference to a <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a>. From this you can <a href=\"/en-US/docs/Web/API/WritableStream/getWriter\" title=\"get a writer\"><code>get a writer</code></a> to allow data to be written to the stream and sent to the server.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">writeData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> transport<span class=\"token punctuation\">.</span><span class=\"token function\">createUnidirectionalStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> writer <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span>writable<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">69</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> writer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"All data has been sent.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">An error occurred: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Note also the use of the <a href=\"/en-US/docs/Web/API/WritableStreamDefaultWriter/close\"><code>WritableStreamDefaultWriter.close()</code></a> method to close the associated HTTP/3 connection once all data has been sent.</p>\n<p>If the server opens a unidirectional stream to transmit data to the client, this can be accessed on the client via the <a href=\"/en-US/docs/Web/API/WebTransport/incomingUnidirectionalStreams\"><code>WebTransport.incomingUnidirectionalStreams</code></a> property, which returns a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> of <a href=\"/en-US/docs/Web/API/WebTransportReceiveStream\"><code>WebTransportReceiveStream</code></a> objects. These can be used to read <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> instances sent by the server.</p>\n<p>In this case, the first thing to do is set up a function to read a <code>WebTransportReceiveStream</code>. These objects inherit from the <code>ReadableStream</code> class, so can be used in just the same way:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">receiveStream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> receiveStream<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// value is a Uint8Array</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Next, call <a href=\"/en-US/docs/Web/API/WebTransport/incomingUnidirectionalStreams\"><code>WebTransport.incomingUnidirectionalStreams</code></a> and get a reference to the reader available on the <code>ReadableStream</code> it returns, and then use the reader to read the data from the server. Each chunk is a <code>WebTransportReceiveStream</code>, and we use the <code>readFrom()</code> set up earlier to read them:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">receiveUnidirectional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> uds <span class=\"token operator\">=</span> transport<span class=\"token punctuation\">.</span>incomingUnidirectionalStreams<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> uds<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// value is an instance of WebTransportReceiveStream</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"bidirectional_transmission\">Bidirectional transmission</h4>\n<p>\n  To open a bidirectional stream from a user agent, you use the <a href=\"/en-US/docs/Web/API/WebTransport/createBidirectionalStream\"><code>WebTransport.createBidirectionalStream()</code></a> method to get a reference to a <a href=\"/en-US/docs/Web/API/WebTransportBidirectionalStream\"><code>WebTransportBidirectionalStream</code></a>.\n  This contains <code>readable</code> and <code>writable</code> properties returning references to <code>WebTransportReceiveStream</code> and <code>WebTransportSendStream</code> instances that can be used to read from and write to the server.\n</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> <code>WebTransportBidirectionalStream</code> is similar to <a href=\"/en-US/docs/Web/API/WebTransportDatagramDuplexStream\"><code>WebTransportDatagramDuplexStream</code></a>, except that in that interface the <code>readable</code> and <code>writable</code> properties are <code>ReadableStream</code> and <code>WritableStream</code> respectively.</p>\n</div>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setUpBidirectional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> transport<span class=\"token punctuation\">.</span><span class=\"token function\">createBidirectionalStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// stream is a WebTransportBidirectionalStream</span>\n  <span class=\"token comment\">// stream.readable is a WebTransportReceiveStream</span>\n  <span class=\"token keyword\">const</span> readable <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span>readable<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// stream.writable is a WebTransportSendStream</span>\n  <span class=\"token keyword\">const</span> writable <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span>writable<span class=\"token punctuation\">;</span>\n\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Reading from the <code>WebTransportReceiveStream</code> can then be done as follows:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">readable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> readable<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// value is a Uint8Array.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>And writing to the <code>WebTransportSendStream</code> can be done like this:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">writeData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">writable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> writer <span class=\"token operator\">=</span> writable<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">69</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>If the server opens a bidirectional stream to transmit data to and receive it from the client, this can be accessed via the <a href=\"/en-US/docs/Web/API/WebTransport/incomingBidirectionalStreams\"><code>WebTransport.incomingBidirectionalStreams</code></a> property, which returns a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> of <code>WebTransportBidirectionalStream</code> objects. Each one can be used to read and write <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> instances as shown above. However, as with the unidirectional example, you need an initial function to read the bidirectional stream in the first place:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">receiveBidirectional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> bds <span class=\"token operator\">=</span> transport<span class=\"token punctuation\">.</span>incomingBidirectionalStreams<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> bds<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// value is an instance of WebTransportBidirectionalStream</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>readable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">writeData</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>writable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"interfaces","title":"Interfaces","isH3":false,"content":"<dl>\n  <dt id=\"webtransport\"><a href=\"/en-US/docs/Web/API/WebTransport\"><code>WebTransport</code></a></dt>\n  <dd>\n    <p>Provides functionality to enable a user agent to connect to an HTTP/3 server, initiate reliable and unreliable transport in either or both directions, and close the connection once it is no longer needed.</p>\n  </dd>\n  <dt id=\"webtransportbidirectionalstream\"><a href=\"/en-US/docs/Web/API/WebTransportBidirectionalStream\"><code>WebTransportBidirectionalStream</code></a></dt>\n  <dd>\n    <p>Represents a bidirectional stream created by a server or a client that can be used for reliable transport. Provides access to a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> for reading incoming data, and a <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a> for writing outgoing data.</p>\n  </dd>\n  <dt id=\"webtransportdatagramduplexstream\"><a href=\"/en-US/docs/Web/API/WebTransportDatagramDuplexStream\"><code>WebTransportDatagramDuplexStream</code></a></dt>\n  <dd>\n    <p>Represents a duplex stream that can be used for unreliable transport of datagrams between client and server. Provides access to a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> for reading incoming datagrams, a <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a> for writing outgoing datagrams, and various settings and statistics related to the stream.</p>\n  </dd>\n  <dt id=\"webtransporterror\"><a href=\"/en-US/docs/Web/API/WebTransportError\"><code>WebTransportError</code></a></dt>\n  <dd>\n    <p>Represents an error related to the WebTransport API, which can arise from server errors, network connection problems, or client-initiated abort operations (for example, arising from a <a href=\"/en-US/docs/Web/API/WritableStream/abort\"><code>WritableStream.abort()</code></a> call).</p>\n  </dd>\n  <dt id=\"webtransportreceivestream\"><a href=\"/en-US/docs/Web/API/WebTransportReceiveStream\"><code>WebTransportReceiveStream</code></a></dt>\n  <dd>\n    <p>Provides streaming features for an incoming WebTransport unidirectional or bidirectional <a href=\"/en-US/docs/Web/API/WebTransport\"><code>WebTransport</code></a> stream.</p>\n  </dd>\n  <dt id=\"webtransportsendstream\"><a href=\"/en-US/docs/Web/API/WebTransportSendStream\"><code>WebTransportSendStream</code></a></dt>\n  <dd>\n    <p>Provides streaming features for an outgoing WebTransport unidirectional or bidirectional <a href=\"/en-US/docs/Web/API/WebTransport\"><code>WebTransport</code></a> stream.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>For complete examples, see:</p>\n<ul>\n  <li><a href=\"https://webtransport.day/\" class=\"external\" target=\"_blank\">WebTransport over HTTP/3 client</a></li>\n  <li><a href=\"https://webrtc.internaut.com/wc/wtSender4/\" class=\"external\" target=\"_blank\">WebTransport (BYOB) Echo with WebCodecs in Worker</a></li>\n</ul>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webtransport/#web-transport","title":"WebTransport"}],"query":"api.WebTransport"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.WebTransport"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://developer.chrome.com/articles/webtransport/\" class=\"external\" target=\"_blank\">Using WebTransport</a></li>\n  <li><a href=\"/en-US/docs/Web/API/WebSockets_API\" title=\"WebSockets API\">WebSockets API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Streams_API\" title=\"Streams API\">Streams API</a></li>\n  <li><a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/\" class=\"external\" target=\"_blank\">WebTransport over HTTP/3</a></li>\n</ul>"}}],"toc":[{"text":"Concepts and usage","id":"concepts_and_usage"},{"text":"Interfaces","id":"interfaces"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The WebTransport API provides a modern update to WebSockets, transmitting data between client and server using HTTP/3 Transport. WebTransport provides support for multiple streams, unidirectional streams, and out-of-order delivery. It enables reliable transport via streams and unreliable transport via UDP-like datagrams.","popularity":0.0103,"modified":"2023-12-07T22:31:41.000Z","source":{"folder":"en-us/web/api/webtransport_api","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/webtransport_api/index.md","last_commit_url":"https://github.com/mdn/content/commit/e47698f3649a14011e8a41fc681dfe965d1c58c5","filename":"index.md"},"short_title":"WebTransport API","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/WebTransport_API","title":"WebTransport API"}],"pageTitle":"WebTransport API - Web APIs | MDN","noIndexing":false}}