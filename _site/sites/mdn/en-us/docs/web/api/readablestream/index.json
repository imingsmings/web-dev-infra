{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"ReadableStream","mdn_url":"/en-US/docs/Web/API/ReadableStream","locale":"en-US","native":"English (US)","browserCompat":["api.ReadableStream"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><em><a href=\"/en-US/docs/Web/API/ReadableStream\" aria-current=\"page\"><code>ReadableStream</code></a></em></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/ReadableStream\"><code>ReadableStream()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/locked\"><code>locked</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Static methods</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/from_static\"><code>from()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/cancel\"><code>cancel()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/getReader\"><code>getReader()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/pipeThrough\"><code>pipeThrough()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/pipeTo\"><code>pipeTo()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/tee\"><code>tee()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Streams</summary><ol><li><a href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/en-US/docs/Web/API/TransformStream\"><code>TransformStream</code></a></li><li><a href=\"/en-US/docs/Web/API/TransformStreamDefaultController\"><code>TransformStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <code>ReadableStream</code> interface of the <a href=\"/en-US/docs/Web/API/Streams_API\">Streams API</a> represents a readable stream of byte data. The <a href=\"/en-US/docs/Web/API/Fetch_API\">Fetch API</a> offers a concrete instance of a <code>ReadableStream</code> through the <a href=\"/en-US/docs/Web/API/Response/body\" title=\"body\"><code>body</code></a> property of a <a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a> object.</p>\n<p><code>ReadableStream</code> is a <a href=\"/en-US/docs/Web/API/Web_Workers_API/Transferable_objects\">transferable object</a>.</p>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"readablestream\"><a href=\"/en-US/docs/Web/API/ReadableStream/ReadableStream\" title=\"ReadableStream()\"><code>ReadableStream()</code></a></dt>\n  <dd>\n    <p>Creates and returns a readable stream object from the given handlers.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<dl>\n  <dt id=\"readablestream.locked\"><a href=\"/en-US/docs/Web/API/ReadableStream/locked\"><code>ReadableStream.locked</code></a> <span title=\"This value may not be changed.\" class=\"badge inline readonly\">Read only </span></dt>\n  <dd>\n    <p>Returns a boolean indicating whether or not the readable stream is locked to a reader.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"static_methods","title":"Static methods","isH3":false,"content":"<dl>\n  <dt id=\"readablestream.from\"><a href=\"/en-US/docs/Web/API/ReadableStream/from_static\" title=\"ReadableStream.from()\"><code>ReadableStream.from()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Returns <code>ReadableStream</code> from a provided iterable or async iterable object, such as an array, a set, an async generator, and so on.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"readablestream.cancel\"><a href=\"/en-US/docs/Web/API/ReadableStream/cancel\"><code>ReadableStream.cancel()</code></a></dt>\n  <dd>\n    <p>Returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves when the stream is canceled. Calling this method signals a loss of interest in the stream by a consumer. The supplied <code>reason</code> argument will be given to the underlying source, which may or may not use it.</p>\n  </dd>\n  <dt id=\"readablestream.getreader\"><a href=\"/en-US/docs/Web/API/ReadableStream/getReader\"><code>ReadableStream.getReader()</code></a></dt>\n  <dd>\n    <p>Creates a reader and locks the stream to it. While the stream is locked, no other reader can be acquired until this one is released.</p>\n  </dd>\n  <dt id=\"readablestream.pipethrough\"><a href=\"/en-US/docs/Web/API/ReadableStream/pipeThrough\"><code>ReadableStream.pipeThrough()</code></a></dt>\n  <dd>\n    <p>Provides a chainable way of piping the current stream through a transform stream or any other writable/readable pair.</p>\n  </dd>\n  <dt id=\"readablestream.pipeto\"><a href=\"/en-US/docs/Web/API/ReadableStream/pipeTo\"><code>ReadableStream.pipeTo()</code></a></dt>\n  <dd>\n    <p>Pipes the current ReadableStream to a given <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a> and returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that fulfills when the piping process completes successfully, or rejects if any errors were encountered.</p>\n  </dd>\n  <dt id=\"readablestream.tee\"><a href=\"/en-US/docs/Web/API/ReadableStream/tee\"><code>ReadableStream.tee()</code></a></dt>\n  <dd>\n    <p>The <code>tee</code> method <a href=\"https://streams.spec.whatwg.org/#tee-a-readable-stream\" class=\"external\" target=\"_blank\">tees</a> this readable stream, returning a two-element array containing the two resulting branches as new <a href=\"/en-US/docs/Web/API/ReadableStream\" aria-current=\"page\"><code>ReadableStream</code></a> instances. Each of those streams receives the same incoming data.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"async_iteration","title":"Async iteration","isH3":false,"content":"<p>\n  <code>ReadableStream</code> implements the <a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterable protocol</a>.\n  This enables asynchronous iteration over the chunks in a stream using the <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\"><code>for await...of</code></a> syntax:\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSomeSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunk <span class=\"token keyword\">of</span> stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something with each 'chunk'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  The async iterator consumes the stream until it runs out of data or otherwise terminates.\n  The loop can also exit early due to a <code>break</code>, <code>throw</code>, or <code>return</code> statement.\n</p>\n<p>\n  While iterating, the stream is locked to prevent other consumers from acquiring a reader (attempting to iterate over a stream that is already locked will throw a <code>TypeError</code>).\n  This lock is released when the loop exits.\n</p>\n<p>\n  By default, exiting the loop will also cancel the stream, so that it can no longer be used.\n  To continue to use a stream after exiting the loop, pass <code>{ preventCancel: true }</code> to the stream's <code>values()</code> method:\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunk <span class=\"token keyword\">of</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">preventCancel</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something with 'chunk'</span>\n  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Acquire a reader for the stream and continue reading ...</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"fetch_stream","title":"Fetch stream","isH3":true,"content":"<p>In the following example, an artificial <a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a> is created to stream HTML fragments fetched from another resource to the browser.</p>\n<p>It demonstrates the usage of a <a href=\"/en-US/docs/Web/API/ReadableStream\" aria-current=\"page\"><code>ReadableStream</code></a> in combination with a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.example.org\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rb</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> rb<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// The following function handles each data chunk</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// \"done\" is a Boolean and value a \"Uint8Array\"</span>\n          reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If there is no more data to read</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// Get the data and send it to the browser via the controller</span>\n            controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Check chunks by logging to the console</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    <span class=\"token comment\">// Respond with our stream</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/html\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do things with result</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"convert_an_iterator_or_async_iterator_to_a_stream","title":"Convert an iterator or async iterator to a stream","isH3":true,"content":"<p>The <a href=\"/en-US/docs/Web/API/ReadableStream/from_static\" title=\"from()\"><code>from()</code></a> static method can convert an iterator, such as an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> or <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a>, or an <a href=\"/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators\">(async) iterator</a> to a readable stream:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myReadableStream <span class=\"token operator\">=</span> ReadableStream<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>iteratorOrAsyncIterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>On browsers that don't support the <code>from()</code> method you can instead create your own <a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_streams#creating_your_own_custom_readable_stream\">custom readable stream</a> to achieve the same result:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">iteratorToStream</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iterator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"async_iteration_of_a_stream_using_for_await...of","title":"Async iteration of a stream using for await...of","isH3":true,"content":"<p>This example shows how you can process the <code>fetch()</code> response using a <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\"><code>for await...of</code></a> loop to iterate through the arriving chunks.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.example.org\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Iterate response.body (a ReadableStream) asynchronously</span>\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunk <span class=\"token keyword\">of</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something with each chunk</span>\n  <span class=\"token comment\">// Here we just accumulate the size of the response.</span>\n  total <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Do something with the total</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#rs-class","title":"Streams Standard"}],"query":"api.ReadableStream"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.ReadableStream"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Streams_API\">Streams API concepts</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_streams\">Using readable streams</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_byte_streams\">Using readable byte stream</a></li>\n  <li><a href=\"https://whatwg-stream-visualizer.glitch.me/\" class=\"external\" target=\"_blank\">WHATWG Stream Visualizer</a>, for a basic visualization of readable, writable, and transform streams.</li>\n  <li><a href=\"https://github.com/MattiasBuelens/web-streams-polyfill\" class=\"external\" target=\"_blank\">Web-streams-polyfill</a> or <a href=\"https://github.com/stardazed/sd-streams\" class=\"external\" target=\"_blank\">sd-streams</a> - polyfills</li>\n</ul>"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Instance properties","id":"instance_properties"},{"text":"Static methods","id":"static_methods"},{"text":"Instance methods","id":"instance_methods"},{"text":"Async iteration","id":"async_iteration"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The ReadableStream interface of the Streams API represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.","popularity":0.0578,"modified":"2023-08-21T02:04:21.000Z","source":{"folder":"en-us/web/api/readablestream","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/index.md","last_commit_url":"https://github.com/mdn/content/commit/e862ea87669db4c9f9d28d141613fbc7ce558838","filename":"index.md"},"short_title":"ReadableStream","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/ReadableStream","title":"ReadableStream"}],"pageTitle":"ReadableStream - Web APIs | MDN","noIndexing":false}}