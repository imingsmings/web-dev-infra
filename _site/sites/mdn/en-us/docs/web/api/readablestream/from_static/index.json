{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"ReadableStream: from() static method","mdn_url":"/en-US/docs/Web/API/ReadableStream/from_static","locale":"en-US","native":"English (US)","browserCompat":["api.ReadableStream.from_static"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/ReadableStream\"><code>ReadableStream()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/locked\"><code>locked</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Static methods</summary><ol><li><em><code>from()</code> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/cancel\"><code>cancel()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/getReader\"><code>getReader()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/pipeThrough\"><code>pipeThrough()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/pipeTo\"><code>pipeTo()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/tee\"><code>tee()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Streams</summary><ol><li><a href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/en-US/docs/Web/API/TransformStream\"><code>TransformStream</code></a></li><li><a href=\"/en-US/docs/Web/API/TransformStreamDefaultController\"><code>TransformStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</p></div>\n<p>The <strong><code>ReadableStream.from()</code></strong> static method returns a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> from a provided iterable or async iterable object.</p>\n<p>The method can be used to wrap iterable and async iterable objects as readable streams, including arrays, sets, arrays of promises, async generators, <code>ReadableStreams</code>, Node.js <code>readable</code> streams, and so on.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>ReadableStream<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>anyIterable<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"anyiterable\"><a href=\"#anyiterable\"><code>anyIterable</code></a></dt>\n  <dd>\n    <p>An <a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">iterable</a> or <a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">async iterable</a> object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>\n      Thrown if the passed parameter is not an iterable or async iterable (does not define the <code>@@iterator</code> or <code>@@asyncIterator</code> method).\n      Also thrown if, during iteration, the result of the next step is not an object or is a promise that does not resolve to an object.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"convert_an_async_iterator_to_a_readablestream","title":"Convert an async iterator to a ReadableStream","isH3":true,"content":"<p>This live example demonstrates how you can convert an async iterable to a <code>ReadableStream</code>, and then how this stream might be consumed.</p>\n<h4 id=\"html\">HTML</h4>\n<p>The HTML is consists of single <code>&lt;pre&gt;</code> element, which is used for logging.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">html</span></p><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript\">JavaScript</h4>\n<p>The example code creates a <code>log()</code> function to write to the log HTML element.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> logElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  logElement<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>It then checks if the static method is supported, and if not, logs the result.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ReadableStream<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ReadableStream.from() is not supported\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  The async iterable is an anonymous generator function that yields the values of 1, 2 and 3 when it is called three times.\n  This is passed to <code>ReadableStream.from()</code> to create the <code>ReadableStream</code>.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Define an asynchronous iterator</span>\n<span class=\"token keyword\">const</span> asyncIterator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create ReadableStream from iterator</span>\n<span class=\"token keyword\">const</span> myReadableStream <span class=\"token operator\">=</span> ReadableStream<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>asyncIterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  <a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_streams\">Using readable streams</a> demonstrates several ways to consume a stream.\n  The code below uses a <code>for ...await</code> loop, as this method is the simplest.\n  Each iteration of the loop logs the current chunk from the stream.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">consumeStream</span><span class=\"token punctuation\">(</span>myReadableStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Iterate a ReadableStream asynchronously</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">consumeStream</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">readableStream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunk <span class=\"token keyword\">of</span> myReadableStream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something with each chunk</span>\n    <span class=\"token comment\">// Here we just log the values</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">chunk: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>chunk<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"result\">Result</h4>\n<p>The output of consuming the stream is shown below (if <code>ReadableStream.from()</code> is supported).</p><div class=\"code-example\" id=\"sect2\"><p class=\"example-header\"></p><iframe class=\"sample-code-frame\" title=\"Convert an async iterator to a ReadableStream sample\" id=\"frame_convert_an_async_iterator_to_a_readablestream\" width=\"100%\" height=\"80\" src=\"http://localhost:5042/en-US/docs/Web/API/ReadableStream/from_static/runner.html?id=convert_an_async_iterator_to_a_readablestream\" loading=\"lazy\"></iframe></div>"}},{"type":"prose","value":{"id":"convert_an_array_to_a_readablestream","title":"Convert an Array to a ReadableStream","isH3":true,"content":"<p>This example demonstrates how you can convert an <code>Array</code> to a <code>ReadableStream</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: html hidden notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code><span class=\"token keyword\">const</span> logElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  logElement<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ReadableStream<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ReadableStream.from() is not supported\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"javascript_2\">JavaScript</h4>\n<p>The iterable is just an array of strings that is passed to <code>ReadableStream.from()</code> to create the <code>ReadableStream</code>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// An Array of vegetable names</span>\n<span class=\"token keyword\">const</span> vegetables <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Carrot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Broccoli\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tomato\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Spinach\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create ReadableStream from the Array</span>\n<span class=\"token keyword\">const</span> myReadableStream <span class=\"token operator\">=</span> ReadableStream<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>vegetables<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code><span class=\"token function\">consumeStream</span><span class=\"token punctuation\">(</span>myReadableStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Iterate a ReadableStream asynchronously</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">consumeStream</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">readableStream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunk <span class=\"token keyword\">of</span> myReadableStream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something with each chunk</span>\n    <span class=\"token comment\">// Here we just log the values</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">chunk: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>chunk<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>We use the same approach as in the previous example log and to consume the stream, so that is not shown here.</p>\n<h4 id=\"result_2\">Result</h4>\n<p>The output is shown below.</p><div class=\"code-example\" id=\"sect3\"><p class=\"example-header\"></p><iframe class=\"sample-code-frame\" title=\"Convert an Array to a ReadableStream sample\" id=\"frame_convert_an_array_to_a_readablestream\" width=\"100%\" height=\"100\" src=\"http://localhost:5042/en-US/docs/Web/API/ReadableStream/from_static/runner.html?id=convert_an_array_to_a_readablestream\" loading=\"lazy\"></iframe></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ref-for-rs-from","title":"Streams Standard"}],"query":"api.ReadableStream.from_static"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.ReadableStream.from_static"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_streams\">Using readable streams</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The ReadableStream.from() static method returns a ReadableStream from a provided iterable or async iterable object.","popularity":0.0026,"modified":"2023-08-21T02:04:21.000Z","source":{"folder":"en-us/web/api/readablestream/from_static","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/from_static/index.md","last_commit_url":"https://github.com/mdn/content/commit/e862ea87669db4c9f9d28d141613fbc7ce558838","filename":"index.md"},"short_title":"from()","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/ReadableStream","title":"ReadableStream"},{"uri":"/en-US/docs/Web/API/ReadableStream/from_static","title":"from()"}],"pageTitle":"ReadableStream: from() static method - Web APIs | MDN","noIndexing":false}}