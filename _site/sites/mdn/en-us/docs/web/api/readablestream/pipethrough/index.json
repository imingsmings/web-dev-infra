{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"ReadableStream: pipeThrough() method","mdn_url":"/en-US/docs/Web/API/ReadableStream/pipeThrough","locale":"en-US","native":"English (US)","browserCompat":["api.ReadableStream.pipeThrough"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/ReadableStream\"><code>ReadableStream()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/locked\"><code>locked</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Static methods</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/from_static\"><code>from()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/ReadableStream/cancel\"><code>cancel()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/getReader\"><code>getReader()</code></a></li><li><em><code>pipeThrough()</code> </em></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/pipeTo\"><code>pipeTo()</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStream/tee\"><code>tee()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Streams</summary><ol><li><a href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/en-US/docs/Web/API/TransformStream\"><code>TransformStream</code></a></li><li><a href=\"/en-US/docs/Web/API/TransformStreamDefaultController\"><code>TransformStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/en-US/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>pipeThrough()</code></strong> method of the <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> interface provides a chainable way of piping the current stream through a transform stream or any other writable/readable pair.</p>\n<p>Piping a stream will generally lock it for the duration of the pipe, preventing other readers from locking it.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">pipeThrough</span><span class=\"token punctuation\">(</span>transformStream<span class=\"token punctuation\">)</span>\n<span class=\"token function\">pipeThrough</span><span class=\"token punctuation\">(</span>transformStream<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"transformstream\"><a href=\"#transformstream\"><code>transformStream</code></a></dt>\n  <dd>\n    <p>\n      A <a href=\"/en-US/docs/Web/API/TransformStream\"><code>TransformStream</code></a> (or an object with the structure <code>{writable, readable}</code>) consisting of a readable stream and a writable stream working together to transform some data from one form to another.\n      Data written to the <code>writable</code> stream can be read in some transformed state by the <code>readable</code> stream.\n      For example, a <a href=\"/en-US/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a>, has bytes written to it and strings read from it, while a video decoder has encoded bytes written to it and uncompressed video frames read from it.\n    </p>\n  </dd>\n  <dt id=\"options\"><a href=\"#options\"><code>options</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      The options that should be used when piping to the <code>writable</code> stream.\n      Available options are:\n    </p>\n    <dl>\n      <dt id=\"preventclose\"><a href=\"#preventclose\"><code>preventClose</code></a></dt>\n      <dd>\n        <p>If this is set to <code>true</code>, closing the source <code>ReadableStream</code> will no longer cause the destination <code>WritableStream</code> to be closed.</p>\n      </dd>\n      <dt id=\"preventabort\"><a href=\"#preventabort\"><code>preventAbort</code></a></dt>\n      <dd>\n        <p>If this is set to <code>true</code>, errors in the source <code>ReadableStream</code> will no longer abort the destination <code>WritableStream</code>.</p>\n      </dd>\n      <dt id=\"preventcancel\"><a href=\"#preventcancel\"><code>preventCancel</code></a></dt>\n      <dd>\n        <p>If this is set to <code>true</code>, errors in the destination <code>WritableStream</code> will no longer cancel the source <code>ReadableStream</code>.</p>\n      </dd>\n      <dt id=\"signal\"><a href=\"#signal\"><code>signal</code></a></dt>\n      <dd>\n        <p>If set to an <a href=\"/en-US/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a> object, ongoing pipe operations can then be aborted via the corresponding <a href=\"/en-US/docs/Web/API/AbortController\"><code>AbortController</code></a>.</p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>The <code>readable</code> side of the <code>transformStream</code>.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>Thrown if the <code>writable</code> and/or <code>readable</code> property of <code>transformStream</code> are undefined.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>In the following example (see <a href=\"https://mdn.github.io/dom-examples/streams/png-transform-stream/\" class=\"external\" target=\"_blank\">Unpack chunks of a PNG</a> for the full code running live, and <a href=\"https://github.com/mdn/dom-examples/tree/main/streams/png-transform-stream\" class=\"external\" target=\"_blank\">png-transform-stream</a> for the source code), an image is fetched and its body retrieved as a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>.</p>\n<p>Next, we log the contents of the readable stream, use <code>pipeThrough()</code> to send it to a new function that creates a gray-scaled version of the stream, then log the new stream's contents too.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Fetch the original image</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"png-logo.png\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// Retrieve its body as ReadableStream</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">logReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fetch Response Stream\"</span><span class=\"token punctuation\">,</span> rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// Create a gray-scaled PNG stream out of the original</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">body</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> body<span class=\"token punctuation\">.</span><span class=\"token function\">pipeThrough</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PNGTransformStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">logReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PNG Chunk Stream\"</span><span class=\"token punctuation\">,</span> rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ref-for-rs-pipe-through②","title":"Streams Standard"}],"query":"api.ReadableStream.pipeThrough"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.ReadableStream.pipeThrough"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/ReadableStream/ReadableStream\" title=\"ReadableStream()\"><code>ReadableStream()</code></a> constructor</li>\n  <li><a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_streams#pipe_chains\">Pipe chains</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The pipeThrough() method of the ReadableStream interface provides a chainable way of piping the current stream through a transform stream or any other writable/readable pair.","popularity":0.0052,"modified":"2023-11-23T09:10:43.000Z","source":{"folder":"en-us/web/api/readablestream/pipethrough","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/readablestream/pipethrough/index.md","last_commit_url":"https://github.com/mdn/content/commit/7605abd2ad9d8f29a0000f928491f9d38f552380","filename":"index.md"},"short_title":"pipeThrough()","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/ReadableStream","title":"ReadableStream"},{"uri":"/en-US/docs/Web/API/ReadableStream/pipeThrough","title":"pipeThrough()"}],"pageTitle":"ReadableStream: pipeThrough() method - Web APIs | MDN","noIndexing":false}}