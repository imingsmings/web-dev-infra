{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"FileReader: result property","mdn_url":"/en-US/docs/Web/API/FileReader/result","locale":"en-US","native":"English (US)","browserCompat":["api.FileReader.result"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/File_API\">File API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/FileReader\"><code>FileReader</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/FileReader/FileReader\"><code>FileReader()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/FileReader/error\"><code>error</code></a></li><li><a href=\"/en-US/docs/Web/API/FileReader/readyState\"><code>readyState</code></a></li><li><em><code>result</code> </em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/FileReader/abort\"><code>abort()</code></a></li><li><a href=\"/en-US/docs/Web/API/FileReader/readAsArrayBuffer\"><code>readAsArrayBuffer()</code></a></li><li><a href=\"/en-US/docs/Web/API/FileReader/readAsBinaryString\"><code>readAsBinaryString()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/FileReader/readAsDataURL\"><code>readAsDataURL()</code></a></li><li><a href=\"/en-US/docs/Web/API/FileReader/readAsText\"><code>readAsText()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/FileReader/abort_event\"><code>abort</code></a></li><li><a href=\"/en-US/docs/Web/API/FileReader/error_event\"><code>error</code></a></li><li><a href=\"/en-US/docs/Web/API/FileReader/load_event\"><code>load</code></a></li><li><a href=\"/en-US/docs/Web/API/FileReader/loadend_event\"><code>loadend</code></a></li><li><a href=\"/en-US/docs/Web/API/FileReader/loadstart_event\"><code>loadstart</code></a></li><li><a href=\"/en-US/docs/Web/API/FileReader/progress_event\"><code>progress</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for File API</summary><ol><li><a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a></li><li><a href=\"/en-US/docs/Web/API/File\"><code>File</code></a></li><li><a href=\"/en-US/docs/Web/API/FileList\"><code>FileList</code></a></li><li><a href=\"/en-US/docs/Web/API/FileReaderSync\"><code>FileReaderSync</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> This feature is available in <a href=\"/en-US/docs/Web/API/Web_Workers_API\">Web Workers</a></p>\n</div>\n<p>\n  The <strong><code>result</code></strong> read-only property of the <a href=\"/en-US/docs/Web/API/FileReader\"><code>FileReader</code></a> interface returns the\n  file's contents. This property is only valid after the read operation is complete, and\n  the format of the data depends on which of the methods was used to initiate the read\n  operation.\n</p>"}},{"type":"prose","value":{"id":"value","title":"Value","isH3":false,"content":"<p>\n  An appropriate string or <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> based on which of the reading methods\n  was used to initiate the read operation. The value is <code>null</code> if the reading\n  is not yet complete or was unsuccessful.\n</p>\n<p>The result types are described below.</p>\n<figure class=\"table-container\"><table class=\"no-markdown\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Method</th>\n      <th scope=\"col\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/FileReader/readAsArrayBuffer\" title=\"readAsArrayBuffer()\"><code>readAsArrayBuffer()</code></a></td>\n      <td>\n        The <code>result</code> is a JavaScript\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n        containing binary data.\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/FileReader/readAsBinaryString\" title=\"readAsBinaryString()\"><code>readAsBinaryString()</code></a></td>\n      <td>\n        The <code>result</code> contains the raw binary data from the file in a\n        string.\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/FileReader/readAsDataURL\" title=\"readAsDataURL()\"><code>readAsDataURL()</code></a></td>\n      <td>\n        The <code>result</code> is a string with a <code>data:</code> URL\n        representing the file's data.\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/API/FileReader/readAsText\" title=\"readAsText()\"><code>readAsText()</code></a></td>\n      <td>The <code>result</code> is text in a string.</td>\n    </tr>\n  </tbody>\n</table></figure>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>This example presents a function <code>reader()</code> which reads a file from a <a href=\"/en-US/docs/Web/HTML/Element/input/file\">file input</a>. It works by creating a <a href=\"/en-US/docs/Web/API/FileReader\"><code>FileReader</code></a> object and creating a listener for <a href=\"/en-US/docs/Web/API/FileReader/load_event\" title=\"load\"><code>load</code></a> events, such that when then file is read, the <code>result</code> is obtained and passed to the callback function provided to <code>reader()</code>.</p>\n<p>The content is handled as raw text data.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Given this HTMLInputElement of type=\"file\":</span>\n<span class=\"token comment\">// &lt;input id=\"image\" type=\"file\" accept=\"image/*\"&gt;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> fr<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fr<span class=\"token punctuation\">.</span><span class=\"token function\">readAsDataURL</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#image\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// No files, do nothing.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>evt<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">reader</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Base64 `data:image/...` String result.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Given the asynchronous nature of <a href=\"/en-US/docs/Web/API/FileReader\"><code>FileReader</code></a>, you could use a Promise-based approach. Here's an example for a <a href=\"/en-US/docs/Web/HTML/Element/input/file\">file input</a> with attribute <code>multiple</code> that returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Given this HTMLInputElement:</span>\n<span class=\"token comment\">// &lt;input id=\"images\" type=\"file\" accept=\"image/*\" multiple&gt;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reader</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fr<span class=\"token punctuation\">.</span><span class=\"token function\">readAsDataURL</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">logImagesData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fileList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> fileResults <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> frPromises <span class=\"token operator\">=</span> fileList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    fileResults <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>frPromises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// In this specific case, Promise.all() might be preferred</span>\n    <span class=\"token comment\">// over Promise.allSettled(), since it isn't trivial to modify</span>\n    <span class=\"token comment\">// a FileList to a subset of files of what the user initially</span>\n    <span class=\"token comment\">// selected. Therefore, let's just stash the entire operation.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  fileResults<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Base64 `data:image/...` String result.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// HTMLInputElement type=\"file\" Event handler:</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#images\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// If no files, do nothing.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>evt<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">logImagesData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>evt<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/FileAPI/#dom-filereader-result","title":"File API"}],"query":"api.FileReader.result"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.FileReader.result"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/FileReader\"><code>FileReader</code></a></li>\n</ul>"}}],"toc":[{"text":"Value","id":"value"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The result read-only property of the FileReader interface returns the\n  file's contents. This property is only valid after the read operation is complete, and\n  the format of the data depends on which of the methods was used to initiate the read\n  operation.","popularity":0.0084,"modified":"2023-12-02T08:06:49.000Z","source":{"folder":"en-us/web/api/filereader/result","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/filereader/result/index.md","last_commit_url":"https://github.com/mdn/content/commit/497d322c61511b11e4877a77660f8d7b394a8277","filename":"index.md"},"short_title":"result","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/FileReader","title":"FileReader"},{"uri":"/en-US/docs/Web/API/FileReader/result","title":"result"}],"pageTitle":"FileReader: result property - Web APIs | MDN","noIndexing":false}}