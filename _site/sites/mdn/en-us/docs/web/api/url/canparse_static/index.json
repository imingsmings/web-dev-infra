{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"URL: canParse() static method","mdn_url":"/en-US/docs/Web/API/URL/canParse_static","locale":"en-US","native":"English (US)","browserCompat":["api.URL.canParse_static"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/URL_API\">URL API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/URL\"><code>URL</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/URL/URL\"><code>URL()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/URL/hash\"><code>hash</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/host\"><code>host</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/hostname\"><code>hostname</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/href\"><code>href</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/origin\"><code>origin</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/password\"><code>password</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/pathname\"><code>pathname</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/port\"><code>port</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/protocol\"><code>protocol</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/search\"><code>search</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/searchParams\"><code>searchParams</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/username\"><code>username</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Static methods</summary><ol><li><em><code>canParse()</code> </em></li><li><a href=\"/en-US/docs/Web/API/URL/createObjectURL_static\"><code>createObjectURL()</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/revokeObjectURL_static\"><code>revokeObjectURL()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/URL/toJSON\"><code>toJSON()</code></a></li><li><a href=\"/en-US/docs/Web/API/URL/toString\"><code>toString()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for URL API</summary><ol><li><a href=\"/en-US/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>URL.canParse()</code></strong> static method of the <a href=\"/en-US/docs/Web/API/URL\"><code>URL</code></a> interface returns a boolean indicating whether or not an absolute URL, or a relative URL combined with a base URL, are parsable and valid.</p>\n<p>\n  This is a fast and easy alternative to constructing a <code>URL</code> within a <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a> block.\n  It returns <code>true</code> for the same values for which the <a href=\"/en-US/docs/Web/API/URL/URL\"><code>URL()</code> constructor</a> would succeed, and <code>false</code> for the values that would cause the constructor to throw.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">canParse</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">canParse</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"url\"><a href=\"#url\"><code>url</code></a></dt>\n  <dd>\n    <p>\n      A string or any other object with a <a href=\"/en-US/docs/Glossary/Stringifier\">stringifier</a> — including, for example, an <a href=\"/en-US/docs/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> or <a href=\"/en-US/docs/Web/HTML/Element/area\"><code>&lt;area&gt;</code></a> element — that represents an absolute or relative URL.\n      If <code>url</code> is a relative URL, <code>base</code> is required, and will be used as the base URL.\n      If <code>url</code> is an absolute URL, a given <code>base</code> will be ignored.\n    </p>\n  </dd>\n  <dt id=\"base\"><a href=\"#base\"><code>base</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      A string representing the base URL to use in cases where <code>url</code> is a relative URL.\n      If not specified, it defaults to <code>undefined</code>.\n    </p>\n  </dd>\n</dl>\n<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> The <code>url</code> and <code>base</code> arguments will each be stringified from whatever value you pass, just like with other Web APIs that accept a string.\n    In particular, you can use an existing <a href=\"/en-US/docs/Web/API/URL\"><code>URL</code></a> object for either argument, and it will be stringified to the object's <a href=\"/en-US/docs/Web/API/URL/href\" title=\"href\"><code>href</code></a> property.\n  </p>\n</div>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p><code>true</code> if the URL can be parsed and is valid; <code>false</code> otherwise.</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>This live example demonstrates how to use the <code>URL.canParse()</code> static method for a few different absolute and relative URL values.</p>\n<p>The first part of the example defines an HTML <code>&lt;pre&gt;</code> element to log to, along with a logging method <code>log()</code>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">html</span></p><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> logElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  logElement<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  Next we check that the <code>URL.canParse()</code> method is supported using the condition <code>\"canParse\" in URL</code>.\n  If the method is supported we log the result of checking an absolute URL, a relative URL with no base URL, and a relative URL with a valid base URL.\n  We also log the case when <code>URL.canParse()</code> is not supported.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"canParse\"</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test valid absolute URL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://developer.mozilla.org/\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">canParse</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> URL.canParse(\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nTest relative URL with no base URL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  url <span class=\"token operator\">=</span> <span class=\"token string\">\"/en-US/docs\"</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">canParse</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> URL.canParse(\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nTest relative URL with valid base URL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://developer.mozilla.org/\"</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">canParse</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> baseUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> URL.canParse(\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\",\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"URL.canParse() not supported\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  Last of all, the code below shows that the <code>baseUrl</code> doesn't have to be a string.\n  Here we have passed a <code>URL</code> object.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"canParse\"</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nTest relative URL with base URL supplied as a URL object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://developer.mozilla.org/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"/en-US/docs\"</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">canParse</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> baseUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> URL.canParse(\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\",\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The results of each of the checks are shown below.</p><div class=\"code-example\" id=\"sect2\"><p class=\"example-header\"></p><iframe class=\"sample-code-frame\" title=\"Examples sample\" id=\"frame_examples\" width=\"100%\" height=\"200\" src=\"http://localhost:5042/en-US/docs/Web/API/URL/canParse_static/runner.html?id=examples\" loading=\"lazy\"></iframe></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://url.spec.whatwg.org/#ref-for-dom-url-canparse","title":"URL Standard"}],"query":"api.URL.canParse_static"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.URL.canParse_static"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/URL/URL\" title=\"URL()\"><code>URL()</code></a></li>\n  <li><a href=\"https://github.com/zloirock/core-js#url-and-urlsearchparams\" class=\"external\" target=\"_blank\">A polyfill of <code>URL.canParse()</code></a> is available in <a href=\"https://github.com/zloirock/core-js\" class=\"external\" target=\"_blank\"><code>core-js</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The URL.canParse() static method of the URL interface returns a boolean indicating whether or not an absolute URL, or a relative URL combined with a base URL, are parsable and valid.","popularity":0.0065,"modified":"2023-12-03T07:19:01.000Z","source":{"folder":"en-us/web/api/url/canparse_static","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/url/canparse_static/index.md","last_commit_url":"https://github.com/mdn/content/commit/1145d9748b094cf9bfd42b7ea8847ce8f647f002","filename":"index.md"},"short_title":"canParse()","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/URL","title":"URL"},{"uri":"/en-US/docs/Web/API/URL/canParse_static","title":"canParse()"}],"pageTitle":"URL: canParse() static method - Web APIs | MDN","noIndexing":false}}