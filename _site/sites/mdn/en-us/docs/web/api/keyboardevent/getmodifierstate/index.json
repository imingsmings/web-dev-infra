{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"KeyboardEvent: getModifierState() method","mdn_url":"/en-US/docs/Web/API/KeyboardEvent/getModifierState","locale":"en-US","native":"English (US)","browserCompat":["api.KeyboardEvent.getModifierState"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/UI_Events\">UI Events</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/KeyboardEvent\"><code>KeyboardEvent</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent\"><code>KeyboardEvent()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/altKey\"><code>altKey</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/charCode\"><code>charCode</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/code\"><code>code</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/ctrlKey\"><code>ctrlKey</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/isComposing\"><code>isComposing</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/key\"><code>key</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/keyCode\"><code>keyCode</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/keyIdentifier\"><code>keyIdentifier</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/location\"><code>location</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/metaKey\"><code>metaKey</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/repeat\"><code>repeat</code></a></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/shiftKey\"><code>shiftKey</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><em><code>getModifierState()</code> </em></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent\"><code>initKeyboardEvent()</code></a><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/KeyboardEvent/initKeyEvent\"><code>initKeyEvent()</code></a><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr><abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/UIEvent\"><code>UIEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/Event\"><code>Event</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for UI Events</summary><ol><li><a href=\"/en-US/docs/Web/API/CompositionEvent\"><code>CompositionEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/FocusEvent\"><code>FocusEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/InputEvent\"><code>InputEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MouseEvent\"><code>MouseEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MouseScrollEvent\"><code>MouseScrollEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/MutationEvent\"><code>MutationEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/UIEvent\"><code>UIEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/WheelEvent\"><code>WheelEvent</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>KeyboardEvent.getModifierState()</code></strong> method returns the\n  current state of the specified modifier key: <code>true</code> if the modifier is active\n  (that is the modifier key is pressed or locked), otherwise, <code>false</code>.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"key\"><a href=\"#key\"><code>key</code></a></dt>\n  <dd>\n    <p>\n      A modifier key value. The value must be one of the <a href=\"/en-US/docs/Web/API/KeyboardEvent/key\"><code>KeyboardEvent.key</code></a>\n      values which represent modifier keys, or the string <code>\"Accel\"</code>\n      <abbr class=\"icon icon-deprecated\" title=\"Deprecated. Not for use in new websites.\">\n  <span class=\"visually-hidden\">Deprecated</span>\n</abbr>. This is case-sensitive.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A boolean.</p>"}},{"type":"prose","value":{"id":"modifier_keys_on_firefox","title":"Modifier keys on Firefox","isH3":false,"content":"<p>When <code>getModifierState()</code> returns true on Firefox?</p>\n<figure class=\"table-container\"><table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"row\"></th>\n      <th scope=\"col\">Windows</th>\n      <th scope=\"col\">Linux (GTK)</th>\n      <th scope=\"col\">Mac</th>\n      <th scope=\"col\">Android 2.3</th>\n      <th scope=\"col\">Android 3.0 or later</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\"><code>\"Alt\"</code></th>\n      <td>Either <kbd>Alt</kbd> key or <kbd>AltGr</kbd> key pressed</td>\n      <td><kbd>Alt</kbd> key pressed</td>\n      <td><kbd>⌥ Option</kbd> key pressed</td>\n      <td colspan=\"2\"><kbd>Alt</kbd> key or <kbd>option</kbd> key pressed</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"AltGraph\"</code></th>\n      <td>\n        <p>\n          Both <kbd>Alt</kbd> and <kbd>Ctrl</kbd> keys are pressed, or\n          <kbd>AltGr</kbd> key is pressed\n        </p>\n      </td>\n      <td><kbd>Level 3 Shift</kbd> key (or <kbd>Level 5 Shift</kbd> key) pressed</td>\n      <td><kbd>⌥ Option</kbd> key pressed</td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"CapsLock\"</code></th>\n      <td colspan=\"3\">During LED for <kbd>⇪ Caps Lock</kbd> turned on</td>\n      <td>❌ <em>Not supported</em></td>\n      <td>While <kbd>CapsLock</kbd> is locked</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"Control\"</code></th>\n      <td>Either <kbd>Ctrl</kbd> key or <kbd>AltGr</kbd> key pressed</td>\n      <td><kbd>Ctrl</kbd> key pressed</td>\n      <td><kbd>control</kbd> key pressed</td>\n      <td><kbd>menu</kbd> key pressed.</td>\n      <td>\n        <kbd>Ctrl</kbd> key, <kbd>control</kbd> key or <kbd>menu</kbd> key\n        pressed.\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"Fn\"</code></th>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>\n        <kbd>Function</kbd> key is pressed, but we're not sure what key makes\n        the modifier state active. <kbd>Fn</kbd> key on Mac keyboard doesn't\n        cause this active.\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"FnLock\"</code></th>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"Hyper\"</code></th>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"Meta\"</code></th>\n      <td><kbd>⊞ Windows Logo</kbd> key pressed (from Firefox 118)</td>\n      <td><kbd>Meta</kbd> key pressed</td>\n      <td><kbd>⌘ Command</kbd> key pressed</td>\n      <td>❌ <em>Not supported</em></td>\n      <td><kbd>⊞ Windows Logo</kbd> key or <kbd>command</kbd> key pressed</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"NumLock\"</code></th>\n      <td colspan=\"2\">During LED for <kbd>Num Lock</kbd> turned on</td>\n      <td>A key on numpad pressed</td>\n      <td>❌ <em>Not supported</em></td>\n      <td>While <kbd>NumLock</kbd> is locked</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"OS\"</code></th>\n      <td><kbd>⊞ Windows Logo</kbd> key pressed (before Firefox 118)</td>\n      <td>\n        <kbd>Super</kbd> key or <kbd>Hyper</kbd> key pressed (typically, mapped\n        to <kbd>⊞ Windows Logo</kbd> key)\n      </td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"ScrollLock\"</code></th>\n      <td>During LED for <kbd>Scroll Lock</kbd> turned on</td>\n      <td>\n        During LED for <kbd>Scroll Lock</kbd> turned on, but typically this\n        isn't supported by platform\n      </td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>While <kbd>ScrollLock</kbd> is locked</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"Shift\"</code></th>\n      <td colspan=\"5\"><kbd>⇧ Shift</kbd> key pressed</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"Super\"</code></th>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"Symbol\"</code></th>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><code>\"SymbolLock\"</code></th>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n      <td>❌ <em>Not supported</em></td>\n    </tr>\n  </tbody>\n</table></figure>\n<ul>\n  <li>On the other platforms, \"Alt\", \"Control\" and \"Shift\" may be supported.</li>\n  <li>\n    All modifiers (except <code>\"FnLock\"</code>, <code>\"Hyper\"</code>, <code>\"Super\"</code> and <code>\"Symbol\"</code> which are defined after Firefox implements this) are always supported for untrusted events on Firefox.\n    This doesn't depend on the platform.\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"accel_virtual_modifier","title":"<code>\"Accel\"</code> virtual modifier","isH3":false,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p>\n    <strong>Note:</strong> The <code>\"Accel\"</code> virtual modifier has\n    been effectively <strong>deprecated</strong> in current drafts of the DOM3 Events\n    specification.\n  </p>\n</div>\n<p>\n  <code>getModifierState()</code> also accepts a deprecated virtual modifier named\n  <code>\"Accel\"</code>. <code>event.getModifierState(\"Accel\")</code> returns\n  <code>true</code> when at least one of <a href=\"/en-US/docs/Web/API/KeyboardEvent/ctrlKey\"><code>KeyboardEvent.ctrlKey</code></a> or\n  <a href=\"/en-US/docs/Web/API/KeyboardEvent/metaKey\"><code>KeyboardEvent.metaKey</code></a> is <code>true</code>.\n</p>\n<p>\n  In old implementations and outdated specifications, it returned <code>true</code> when\n  a modifier which is the typical modifier key for the shortcut key is pressed. For\n  example, on Windows, pressing <kbd>Ctrl</kbd> key may make it return <code>true</code>.\n  However, on Mac, pressing <kbd>⌘ Command</kbd> key may make it return <code>true</code>.\n  Note that which modifier key makes it return true depends on platforms, browsers, and\n  user settings. For example, Firefox users can customize this with a pref,\n  <code>\"ui.key.accelKey\"</code>.\n</p>","titleAsText":"\"Accel\" virtual modifier"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">handleKeyboardEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Ignore if following modifier is active.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fn\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hyper\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OS\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Super\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Win\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* hack for IE */</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Also ignore if two or more modifiers except Shift are active.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Control\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n      event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n      event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Meta\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span>\n    <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Handle shortcut key with standard modifier</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"c\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shift\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Handle Accel + Shift + C</span>\n          event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// consume the key event</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"k\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shift\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Handle Accel + K</span>\n          event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// consume the key event</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Do something different for arrow keys if ScrollLock is locked.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ScrollLock\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n      event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Scroll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* hack for IE */</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Control\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Meta\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"ArrowDown\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"Down\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// hack for IE and old Firefox</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// consume the key event</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"ArrowLeft\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"Left\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// hack for IE and old Firefox</span>\n        <span class=\"token comment\">// Do something different if ScrollLock is locked.</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// consume the key event</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"ArrowRight\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"Right\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// hack for IE and old Firefox</span>\n        <span class=\"token comment\">// Do something different if ScrollLock is locked.</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// consume the key event</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"ArrowUp\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"Up\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// hack for IE and old Firefox</span>\n        <span class=\"token comment\">// Do something different if ScrollLock is locked.</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// consume the key event</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p>\n    <strong>Note:</strong> Although this example uses <code>.getModifierState()</code> with <code>\"Alt\"</code>,\n    <code>\"Control\"</code>, <code>\"Meta\"</code> and <code>\"Shift\"</code>, using\n    <code>event.altKey</code>, <code>event.ctrlKey</code>, <code>event.metaKey</code> and\n    <code>event.shiftKey</code> may be more preferable.\n  </p>\n</div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/uievents/#dom-keyboardevent-getmodifierstate","title":"UI Events"}],"query":"api.KeyboardEvent.getModifierState"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.KeyboardEvent.getModifierState"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li>The <a href=\"/en-US/docs/Web/API/KeyboardEvent\"><code>KeyboardEvent</code></a> this method belongs to.</li>\n  <li><a href=\"/en-US/docs/Web/API/MouseEvent/getModifierState\"><code>MouseEvent.getModifierState</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Modifier keys on Firefox","id":"modifier_keys_on_firefox"},{"text":"<code>\"Accel\"</code> virtual modifier","id":"accel_virtual_modifier"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The KeyboardEvent.getModifierState() method returns the\n  current state of the specified modifier key: true if the modifier is active\n  (that is the modifier key is pressed or locked), otherwise, false.","popularity":0.0036,"modified":"2023-09-12T08:05:54.000Z","source":{"folder":"en-us/web/api/keyboardevent/getmodifierstate","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/keyboardevent/getmodifierstate/index.md","last_commit_url":"https://github.com/mdn/content/commit/b2a5f62d66b4e3d71704017d0fab7ad710e68057","filename":"index.md"},"short_title":"getModifierState()","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/KeyboardEvent","title":"KeyboardEvent"},{"uri":"/en-US/docs/Web/API/KeyboardEvent/getModifierState","title":"getModifierState()"}],"pageTitle":"KeyboardEvent: getModifierState() method - Web APIs | MDN","noIndexing":false}}