{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Web Storage API","mdn_url":"/en-US/docs/Web/API/Web_Storage_API","locale":"en-US","native":"English (US)","browserCompat":["api.Window.localStorage","api.Window.sessionStorage"],"sidebarHTML":"<ol><li><strong><em><a href=\"/en-US/docs/Web/API/Web_Storage_API\" aria-current=\"page\">Web Storage API</a></em></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\">Using the Web Storage API</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/Storage\"><code>Storage</code></a></li><li><a href=\"/en-US/docs/Web/API/StorageEvent\"><code>StorageEvent</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/Window/sessionStorage\"><code>Window.sessionStorage</code></a></li><li><a href=\"/en-US/docs/Web/API/Window/localStorage\"><code>Window.localStorage</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/Window/storage_event\"><code>Window</code>: <code>storage</code></a></li></ol></details></li></ol>","sidebarMacro":"DefaultAPISidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong>Web Storage API</strong> provides mechanisms by which browsers can store key/value pairs, in a much more intuitive fashion than using <a href=\"/en-US/docs/Glossary/Cookie\">cookies</a>.</p>"}},{"type":"prose","value":{"id":"web_storage_concepts_and_usage","title":"Web Storage concepts and usage","isH3":false,"content":"<p>The two mechanisms within Web Storage are as follows:</p>\n<ul>\n  <li><code>sessionStorage</code> maintains a separate storage area for each given origin that's available for the duration of the page session (as long as the browser is open, including page reloads and restores).\n    <ul>\n      <li>Stores data only for a session, meaning that the data is stored until the browser (or tab) is closed.</li>\n      <li>Data is never transferred to the server.</li>\n      <li>Storage limit is larger than a cookie (at most 5MB).</li>\n    </ul>\n  </li>\n  <li><code>localStorage</code> does the same thing, but persists even when the browser is closed and reopened.\n    <ul>\n      <li>Stores data with no expiration date, and gets cleared only through JavaScript, or clearing the Browser cache / Locally Stored Data.</li>\n      <li>Storage limit is the maximum amongst the two.</li>\n    </ul>\n  </li>\n</ul>\n<p>These mechanisms are available via the <a href=\"/en-US/docs/Web/API/Window/sessionStorage\"><code>Window.sessionStorage</code></a> and <a href=\"/en-US/docs/Web/API/Window/localStorage\"><code>Window.localStorage</code></a> properties (to be more precise, the <code>Window</code> object implements the <code>WindowLocalStorage</code> and <code>WindowSessionStorage</code> objects, which the <code>localStorage</code> and <code>sessionStorage</code> properties hang off) — invoking one of these will create an instance of the <a href=\"/en-US/docs/Web/API/Storage\"><code>Storage</code></a> object, through which data items can be set, retrieved and removed. A different Storage object is used for the <code>sessionStorage</code> and <code>localStorage</code> for each origin — they function and are controlled separately.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> In Firefox, when the browser crashes/restarts, to avoid memory issues caused by excessive usage of web storage, the amount of data saved per origin is limited to 10MB. See <a href=\"/en-US/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria#firefox\">storage quotas and eviction criteria</a> for more information.</p>\n</div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> Access to Web Storage from third-party IFrames is denied if the user has <a href=\"https://support.mozilla.org/en-US/kb/third-party-cookies-firefox-tracking-protection\" class=\"external\" target=\"_blank\">disabled third-party cookies</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"determining_storage_access_by_a_third_party","title":"Determining storage access by a third party","isH3":false,"content":"<p>Each origin has its own storage — this is true for both web storage and <a href=\"/en-US/docs/Web/API/Shared_Storage_API\">shared storage</a>). However, access of third-party (i.e., embedded) code to shared storage depends on its <a href=\"/en-US/docs/Glossary/Browsing_context\">browsing context</a>. The context in which a third-party code from another origin runs determines the storage access of the third-party code.</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Storage_API/embedded-content.png\" alt=\"A box diagram showing a top-level browsing context called publisher.com, with third-party content embedded in it\" width=\"486\" height=\"297\" loading=\"lazy\">\n</p>\n<p>Third-party code can be added to another site by injecting it with a <a href=\"/en-US/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> element or by setting the source of an <a href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> to a site that contains third-party code. The method used for integrating third-party code determines the browsing context of the code.</p>\n<ul>\n  <li>If your third-party code is added to another site with a <code>&lt;script&gt;</code> element, your code will be executed in the browsing context of the embedder. Therefore, when you call <a href=\"/en-US/docs/Web/API/Storage/setItem\"><code>Storage.setItem()</code></a> or <a href=\"/en-US/docs/Web/API/SharedStorage/set\"><code>SharedStorage.set()</code></a>, the key/value pair will be written to the embedder's storage. From the browser's perspective, there is no difference between first-party code and third-party code when a <code>&lt;script&gt;</code> tag is used.</li>\n  <li>When your third-party code is added to another site within an <code>&lt;iframe&gt;</code>, the code inside the <code>&lt;iframe&gt;</code> will be executed with the origin of the <code>&lt;iframe&gt;</code>'s browsing context. If the code inside the <code>&lt;iframe&gt;</code> calls <a href=\"/en-US/docs/Web/API/Storage/setItem\"><code>Storage.setItem()</code></a>, data will be written into the local or session storage of the <code>&lt;iframe&gt;</code>'s origin. If the <code>&lt;iframe&gt;</code> code calls <a href=\"/en-US/docs/Web/API/SharedStorage/set\"><code>SharedStorage.set()</code></a>, the data will be written into the shared storage of the <code>&lt;iframe&gt;</code>'s origin.</li>\n</ul>"}},{"type":"prose","value":{"id":"web_storage_interfaces","title":"Web Storage interfaces","isH3":false,"content":"<dl>\n  <dt id=\"storage\"><a href=\"/en-US/docs/Web/API/Storage\"><code>Storage</code></a></dt>\n  <dd>\n    <p>Allows you to set, retrieve and remove data for a specific domain and storage type (session or local).</p>\n  </dd>\n  <dt id=\"window\"><a href=\"/en-US/docs/Web/API/Window\"><code>Window</code></a></dt>\n  <dd>\n    <p>The Web Storage API extends the <a href=\"/en-US/docs/Web/API/Window\"><code>Window</code></a> object with two new properties — <a href=\"/en-US/docs/Web/API/Window/sessionStorage\"><code>Window.sessionStorage</code></a> and <a href=\"/en-US/docs/Web/API/Window/localStorage\"><code>Window.localStorage</code></a> — which provide access to the current domain's session and local <a href=\"/en-US/docs/Web/API/Storage\"><code>Storage</code></a> objects respectively, and a <a href=\"/en-US/docs/Web/API/Window/storage_event\" title=\"storage\"><code>storage</code></a> event handler that fires when a storage area changes (e.g., a new item is stored).</p>\n  </dd>\n  <dt id=\"storageevent\"><a href=\"/en-US/docs/Web/API/StorageEvent\"><code>StorageEvent</code></a></dt>\n  <dd>\n    <p>The <code>storage</code> event is fired on a document's <code>Window</code> object when a storage area changes.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>To illustrate some typical web storage usage, we have created a simple example, imaginatively called <a href=\"https://github.com/mdn/dom-examples/tree/main/web-storage\" class=\"external\" target=\"_blank\">Web Storage Demo</a>. The <a href=\"https://mdn.github.io/dom-examples/web-storage/\" class=\"external\" target=\"_blank\">landing page</a> provides controls that can be used to customize the color, font and decorative image. When you choose different options, the page is instantly updated; in addition your choices are stored in <code>localStorage</code>, so that when you leave the page then load it again later on your choices are remembered.</p>\n<p>In addition, we have provided an <a href=\"https://mdn.github.io/dom-examples/web-storage/event.html\" class=\"external\" target=\"_blank\">event output page</a> — if you load this page in another tab, then make changes to your choices in the landing page, you'll see the updated storage information outputted as the <a href=\"/en-US/docs/Web/API/StorageEvent\"><code>StorageEvent</code></a> is fired.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage-dev","title":"HTML Standard"},{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/webstorage.html#dom-sessionstorage-dev","title":"HTML Standard"}],"query":"api.Window.localStorage,api.Window.sessionStorage"}},{"type":"prose","value":{"id":"browser_compatibility","title":"Browser compatibility","isH3":false,"content":""}},{"type":"browser_compatibility","value":{"title":"api.Window.localStorage","id":"api.Window.localStorage","isH3":true,"query":"api.Window.localStorage"}},{"type":"browser_compatibility","value":{"title":"api.Window.sessionStorage","id":"api.Window.sessionStorage","isH3":true,"query":"api.Window.sessionStorage"}},{"type":"prose","value":{"id":"private_browsing_incognito_modes","title":"Private Browsing / Incognito modes","isH3":false,"content":"<p>Private windows, incognito mode, and similarly named privacy browsing options, don't store data like history and cookies. In private mode, <code>localStorage</code> is treated like <code>sessionStorage</code>. The storage APIs are still available and fully functional, but all data stored in the private window is deleted when the browser or browser tab is closed.</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\">Using the Web Storage API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria\">Browser storage quotas and eviction criteria</a></li>\n</ul>"}}],"toc":[{"text":"Web Storage concepts and usage","id":"web_storage_concepts_and_usage"},{"text":"Determining storage access by a third party","id":"determining_storage_access_by_a_third_party"},{"text":"Web Storage interfaces","id":"web_storage_interfaces"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"Private Browsing / Incognito modes","id":"private_browsing_incognito_modes"},{"text":"See also","id":"see_also"}],"summary":"The Web Storage API provides mechanisms by which browsers can store key/value pairs, in a much more intuitive fashion than using cookies.","popularity":0.0444,"modified":"2023-12-06T10:19:39.000Z","source":{"folder":"en-us/web/api/web_storage_api","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/web_storage_api/index.md","last_commit_url":"https://github.com/mdn/content/commit/d484785e53cff16c020adc868415bb9b07b0f6af","filename":"index.md"},"short_title":"Web Storage API","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Web_Storage_API","title":"Web Storage API"}],"pageTitle":"Web Storage API - Web APIs | MDN","noIndexing":false}}