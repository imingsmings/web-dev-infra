{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"LockManager: request() method","mdn_url":"/en-US/docs/Web/API/LockManager/request","locale":"en-US","native":"English (US)","browserCompat":["api.LockManager.request"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/LockManager\"><code>LockManager</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/LockManager/query\"><code>query()</code></a></li><li><em><code>request()</code> </em></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>request()</code></strong> method of the <a href=\"/en-US/docs/Web/API/LockManager\"><code>LockManager</code></a> interface requests a <a href=\"/en-US/docs/Web/API/Lock\"><code>Lock</code></a> object with parameters specifying its name and characteristics.\n  The requested <code>Lock</code> is passed to a callback, while the function itself returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves (or rejects) with the result of the callback after the lock is released, or rejects if the request is aborted.\n</p>\n<p>The <code>mode</code> property of the <code>options</code> parameter may be either <code>\"exclusive\"</code> or <code>\"shared\"</code>.</p>\n<p>\n  Request an <code>\"exclusive\"</code> lock when it should only be held by one code instance at a time.\n  This applies to code in both tabs and workers. Use this to represent mutually exclusive access to a resource.\n  When an <code>\"exclusive\"</code> lock for a given name is held, no other lock with the same name can be held.\n</p>\n<p>\n  Request a <code>\"shared\"</code> lock when multiple instances of the code can share access to a resource.\n  When a <code>\"shared\"</code> lock for a given name is held, other <code>\"shared\"</code> locks for the same name can be granted, but no <code>\"exclusive\"</code> locks with that name can be held or granted.\n</p>\n<p>\n  This shared/exclusive lock pattern is common in database transaction architecture, for example to allow multiple simultaneous readers (each requests a <code>\"shared\"</code> lock) but only one writer (a single <code>\"exclusive\"</code> lock).\n  This is known as the readers-writer pattern.\n  In the <a href=\"/en-US/docs/Web/API/IndexedDB_API\">IndexedDB API</a>, this is exposed as <code>\"readonly\"</code> and <code>\"readwrite\"</code> transactions which have the same semantics.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n<span class=\"token function\">request</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"name\"><a href=\"#name\"><code>name</code></a></dt>\n  <dd>\n    <p>An identifier for the lock you want to request.</p>\n  </dd>\n  <dt id=\"options\"><a href=\"#options\"><code>options</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      An object describing characteristics of the lock you want to create.\n      Valid values are:\n    </p>\n    <dl>\n      <dt id=\"mode\"><a href=\"#mode\"><code>mode</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          Either <code>\"exclusive\"</code> or <code>\"shared\"</code>.\n          The default value is <code>\"exclusive\"</code>.\n        </p>\n      </dd>\n      <dt id=\"ifavailable\"><a href=\"#ifavailable\"><code>ifAvailable</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          If <code>true</code>, the lock request will only be granted if it is not already held.\n          If it cannot be granted, the callback will be invoked with <code>null</code> instead of a <code>Lock</code> instance.\n          The default value is <code>false</code>.\n        </p>\n      </dd>\n      <dt id=\"steal\"><a href=\"#steal\"><code>steal</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          If <code>true</code>, then any held locks with the same name will be released, and the request will be granted, preempting any queued requests for it.\n          The default value is <code>false</code>.\n        </p>\n        <div class=\"notecard warning\" id=\"sect1\">\n          <p>\n            <strong>Warning:</strong> Use with care!\n            Code that was previously running inside the lock continues to run, and may clash with the code that now holds the lock.\n          </p>\n        </div>\n      </dd>\n      <dt id=\"signal\"><a href=\"#signal\"><code>signal</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>\n          An <code>AbortSignal</code> (the <code>signal</code> property of an <code>AbortController</code>);\n          if specified and the <code>AbortController</code> is aborted, the lock request is dropped if it was not already granted.\n        </p>\n      </dd>\n    </dl>\n  </dd>\n  <dt id=\"callback\"><a href=\"#callback\"><code>callback</code></a></dt>\n  <dd>\n    <p>\n      Method called when the lock is granted.\n      The lock is automatically released when the callback returns (or an exception is thrown).\n      Usually the callback is an async function, which causes the lock to be released only when the async function has completely finished.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves (or rejects) with the result of the callback after the lock is released, or rejects if the request is aborted.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<p>This method may return a promise rejected with a <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a> of one of the following types:</p>\n<dl>\n  <dt id=\"invalidstateerror\"><a href=\"#invalidstateerror\"><code>InvalidStateError</code></a> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>If the environments document is not fully active.</p>\n  </dd>\n  <dt id=\"securityerror\"><a href=\"#securityerror\"><code>SecurityError</code></a> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>If a lock manager cannot be obtained for the current environment.</p>\n  </dd>\n  <dt id=\"notsupportederror\"><a href=\"#notsupportederror\"><code>NotSupportedError</code></a> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>If <code>name</code> starts with a hyphen (<code>-</code>), both options <code>steal</code> and <code>ifAvailable</code> are <code>true</code>, or if option <code>signal</code> exists and <em>either</em> option <code>steal</code> or <code>ifAvailable</code> is <code>true</code>.</p>\n  </dd>\n  <dt id=\"aborterror\"><a href=\"#aborterror\"><code>AbortError</code></a> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>If the option <code>signal</code> exists and is aborted.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"general_example","title":"General Example","isH3":true,"content":"<p>\n  The following example shows the basic use of the <code>request()</code> method with an asynchronous function as the callback.\n  Once the callback is invoked, no other running code on this origin can hold <code>my_resource</code> until the callback returns.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_resource\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">lock</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The lock was granted.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"mode_example","title":"Mode Example","isH3":true,"content":"<p>The following example shows how to use the <code>mode</code> option for readers and writers.</p>\n<p>\n  Notice that both functions use a lock called <code>my_resource</code>.\n  The <code>do_read()</code> requests a lock in <code>'shared'</code> mode meaning that multiple calls may occur simultaneously across different event handlers, tabs, or workers.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">do_read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"my_resource\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"shared\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">lock</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Read code here.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  The <code>do_write()</code> function use the same lock but in <code>'exclusive'</code> mode which will delay invocation of the <code>request()</code> call in <code>do_read()</code> until the write operation has completed.\n  This applies across event handlers, tabs, or workers.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">do_write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"my_resource\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"exclusive\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">lock</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Write code here.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ifavailable_example","title":"ifAvailable Example","isH3":true,"content":"<p>\n  To grab a lock only if it isn't already being held, use the <code>ifAvailable</code> option.\n  In this function <code>await</code> means the method will not return until the callback is complete.\n  Since the lock is only granted if it was available, this call avoids needing to wait on the lock being released elsewhere.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"my_resource\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ifAvailable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">lock</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// The lock was not granted - get out fast.</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// The lock was granted, and no other running code in this origin is holding</span>\n    <span class=\"token comment\">// the 'my_res_lock' lock until this returns.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"signal_example","title":"signal Example","isH3":true,"content":"<p>To only wait for a lock for a short period of time, use the <code>signal</code> option.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Wait at most 200ms.</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"my_resource\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">lock</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// The lock was acquired!</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"AbortError\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The request aborted before it could be granted.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/web-locks/#api-lock-manager-request","title":"Web Locks API"}],"query":"api.LockManager.request"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.LockManager.request"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The request() method of the LockManager interface requests a Lock object with parameters specifying its name and characteristics.\n  The requested Lock is passed to a callback, while the function itself returns a Promise that resolves (or rejects) with the result of the callback after the lock is released, or rejects if the request is aborted.","popularity":0.001,"modified":"2023-08-25T21:59:22.000Z","source":{"folder":"en-us/web/api/lockmanager/request","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/lockmanager/request/index.md","last_commit_url":"https://github.com/mdn/content/commit/bcf59ab11a8c254ab4c2616943b1bd48f9f35784","filename":"index.md"},"short_title":"request()","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/LockManager","title":"LockManager"},{"uri":"/en-US/docs/Web/API/LockManager/request","title":"request()"}],"pageTitle":"LockManager: request() method - Web APIs | MDN","noIndexing":false}}