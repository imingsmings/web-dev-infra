{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Response: json() static method","mdn_url":"/en-US/docs/Web/API/Response/json_static","locale":"en-US","native":"English (US)","browserCompat":["api.Response.json_static"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Fetch_API\">Fetch API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/Response/Response\"><code>Response()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/Response/body\"><code>body</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/bodyUsed\"><code>bodyUsed</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/headers\"><code>headers</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/ok\"><code>ok</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/redirected\"><code>redirected</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/status\"><code>status</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/statusText\"><code>statusText</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/type\"><code>type</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/url\"><code>url</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Static methods</summary><ol><li><a href=\"/en-US/docs/Web/API/Response/error_static\"><code>error()</code></a></li><li><em><code>json()</code> </em></li><li><a href=\"/en-US/docs/Web/API/Response/redirect_static\"><code>redirect()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/Response/arrayBuffer\"><code>arrayBuffer()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/blob\"><code>blob()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/clone\"><code>clone()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/formData\"><code>formData()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/json\"><code>json()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/text\"><code>text()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Fetch API</summary><ol><li><a href=\"/en-US/docs/Web/API/Headers\"><code>Headers</code></a></li><li><a href=\"/en-US/docs/Web/API/Request\"><code>Request</code></a></li><li><a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>json()</code></strong> static method of the <a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a> interface returns a <code>Response</code> that contains the provided JSON data as body, and a <a href=\"/en-US/docs/Web/HTTP/Headers/Content-Type\"><code>Content-Type</code></a> header which is set to <code>application/json</code>.\n  The response status, status message, and additional headers can also be set.\n</p>\n<p>\n  The method makes it easy to create <code>Response</code> objects for returning JSON encoded data.\n  <a href=\"/en-US/docs/Web/API/Service_Worker_API\">Service workers</a>, for example, intercept fetch requests made by a browser, and might use <code>json()</code> to construct a <code>Response</code> from cached JSON data to return to the main thread.\n  The <code>json()</code> method can also be used in server code to return JSON data for <a href=\"/en-US/docs/Glossary/SPA\">single page applications</a>, and any other applications where a JSON response is expected.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>Response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nResponse<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"data\"><a href=\"#data\"><code>data</code></a></dt>\n  <dd>\n    <p>The JSON data to be used as the response body.</p>\n  </dd>\n  <dt id=\"options\"><a href=\"#options\"><code>options</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>\n      An options object containing settings for the response, including the status code, status text, and headers.\n      This is the same as the options parameter of the <a href=\"/en-US/docs/Web/API/Response/Response\" title=\"Response()\"><code>Response()</code></a> constructor.\n    </p>\n    <dl>\n      <dt id=\"status\"><a href=\"#status\"><code>status</code></a></dt>\n      <dd>\n        <p>The status code for the response, such as <code>200</code>.</p>\n      </dd>\n      <dt id=\"statustext\"><a href=\"#statustext\"><code>statusText</code></a></dt>\n      <dd>\n        <p>\n          The status message associated with the status code.\n          For a status of <code>200</code> this might be <code>OK</code>.\n        </p>\n      </dd>\n      <dt id=\"headers\"><a href=\"#headers\"><code>headers</code></a></dt>\n      <dd>\n        <p>Any headers you want to add to your response, contained within a <a href=\"/en-US/docs/Web/API/Headers\"><code>Headers</code></a> object or object literal of <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> key/value pairs (see <a href=\"/en-US/docs/Web/HTTP/Headers\">HTTP headers</a> for a reference).</p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>A <a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a> object.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"#typeerror\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>\n      Thrown if <code>data</code> cannot be converted to a JSON string.\n      This might happen if the data is a JavaScript object that has method, or that has a circular reference, or if the passed object is <code>undefined</code>.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"response_with_json_data","title":"Response with JSON data","isH3":true,"content":"<p>This live example shows how you can create a JSON response object, and logs the newly created object for inspection (the logging code is hidden as it is not relevant).</p>\n<div class=\"code-example\"><pre class=\"brush: html hidden notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code><span class=\"token keyword\">const</span> logElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  logElement<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">logResponse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> responseText <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> jsonResponse<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">body: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>responseText<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  jsonResponse<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">header</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">header: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>header<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">status: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">statusText: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>statusText<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">url: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ok: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>ok<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">redirected: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>redirected<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bodyUsed: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>bodyUsed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The code below creates a <code>Response</code> object with JSON body <code>{ my: \"data\" }</code> and header set to <code>application/json</code>.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> jsonResponse <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">my</span><span class=\"token operator\">:</span> <span class=\"token string\">\"data\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">logResponse</span><span class=\"token punctuation\">(</span>jsonResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  The object has the following properties.\n  Note the body and header are set as expected, and that the default status is set to <code>200</code>.\n</p><div class=\"code-example\" id=\"sect1\"><p class=\"example-header\"></p><iframe class=\"sample-code-frame\" title=\"Response with JSON data sample\" id=\"frame_response_with_json_data\" width=\"100%\" height=\"170\" src=\"http://localhost:5042/en-US/docs/Web/API/Response/json_static/runner.html?id=response_with_json_data\" loading=\"lazy\"></iframe></div>"}},{"type":"prose","value":{"id":"response_with_json_data_and_options","title":"Response with JSON data and options","isH3":true,"content":"<p>This example shows how you can create a JSON response object with <code>status</code> and <code>statusText</code> options.</p>\n<div class=\"code-example\"><pre class=\"brush: html hidden notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code><span class=\"token keyword\">const</span> logElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  logElement<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">logResponse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> responseText <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> jsonResponse<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">body: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>responseText<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  jsonResponse<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">header</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">header: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>header<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">status: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">statusText: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>statusText<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">url: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ok: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>ok<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">redirected: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>redirected<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bodyUsed: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>jsonResponse<span class=\"token punctuation\">.</span>bodyUsed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  The code below creates a <code>Response</code> object with JSON body <code>{ some: \"data\", more: \"information\" }</code> and header set to <code>application/json</code>.\n  It also sets the status to <code>307</code> and sets the appropriate status text (\"Temporary Redirect\").\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> jsonResponse <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">some</span><span class=\"token operator\">:</span> <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">more</span><span class=\"token operator\">:</span> <span class=\"token string\">\"information\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">307</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">statusText</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Temporary Redirect\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">logResponse</span><span class=\"token punctuation\">(</span>jsonResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  The object has the following properties, which are set as expected.\n  Note that the <code>ok</code> property of the response changed to <code>false</code> as the status value is not in the range of 200 to 299.\n</p><div class=\"code-example\" id=\"sect2\"><p class=\"example-header\"></p><iframe class=\"sample-code-frame\" title=\"Response with JSON data and options sample\" id=\"frame_response_with_json_data_and_options\" width=\"100%\" height=\"170\" src=\"http://localhost:5042/en-US/docs/Web/API/Response/json_static/runner.html?id=response_with_json_data_and_options\" loading=\"lazy\"></iframe></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://fetch.spec.whatwg.org/#ref-for-dom-response-json①","title":"Fetch Standard"}],"query":"api.Response.json_static"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.Response.json_static"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Service_Worker_API\">Service Worker API</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The json() static method of the Response interface returns a Response that contains the provided JSON data as body, and a Content-Type header which is set to application/json.\n  The response status, status message, and additional headers can also be set.","popularity":0.0203,"modified":"2023-07-07T07:19:19.000Z","source":{"folder":"en-us/web/api/response/json_static","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/response/json_static/index.md","last_commit_url":"https://github.com/mdn/content/commit/acfe8c9f1f4145f77653a2bc64a9744b001358dc","filename":"index.md"},"short_title":"json()","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Response","title":"Response"},{"uri":"/en-US/docs/Web/API/Response/json_static","title":"json()"}],"pageTitle":"Response: json() static method - Web APIs | MDN","noIndexing":false}}