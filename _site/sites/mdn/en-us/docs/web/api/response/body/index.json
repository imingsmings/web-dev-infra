{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Response: body property","mdn_url":"/en-US/docs/Web/API/Response/body","locale":"en-US","native":"English (US)","browserCompat":["api.Response.body"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Fetch_API\">Fetch API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/Response/Response\"><code>Response()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><em><code>body</code> </em></li><li><a href=\"/en-US/docs/Web/API/Response/bodyUsed\"><code>bodyUsed</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/headers\"><code>headers</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/ok\"><code>ok</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/redirected\"><code>redirected</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/status\"><code>status</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/statusText\"><code>statusText</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/type\"><code>type</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/url\"><code>url</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Static methods</summary><ol><li><a href=\"/en-US/docs/Web/API/Response/error_static\"><code>error()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/json_static\"><code>json()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/redirect_static\"><code>redirect()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/Response/arrayBuffer\"><code>arrayBuffer()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/blob\"><code>blob()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/clone\"><code>clone()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/formData\"><code>formData()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/json\"><code>json()</code></a></li><li><a href=\"/en-US/docs/Web/API/Response/text\"><code>text()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Fetch API</summary><ol><li><a href=\"/en-US/docs/Web/API/Headers\"><code>Headers</code></a></li><li><a href=\"/en-US/docs/Web/API/Request\"><code>Request</code></a></li><li><a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>body</code></strong> read-only property of the <a href=\"/en-US/docs/Web/API/Response\"><code>Response</code></a> interface is a <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> of the body contents.</p>"}},{"type":"prose","value":{"id":"value","title":"Value","isH3":false,"content":"<p>A <a href=\"/en-US/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>, or else <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> for any <code>Response</code> object <a href=\"/en-US/docs/Web/API/Response/Response\">constructed</a> with a null <a href=\"/en-US/docs/Web/API/Response/Response#body\"><code>body</code></a> property, or for any actual <a href=\"/en-US/docs/Web/HTTP/Messages#http_responses\">HTTP response</a> that has no <a href=\"/en-US/docs/Web/HTTP/Messages#body_2\">body</a>.</p>\n<p>The stream is a <a href=\"/en-US/docs/Web/API/Streams_API/Using_readable_byte_streams\">readable byte stream</a>, which supports zero-copy reading using a <a href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a>.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Current browsers don't actually conform to the spec requirement to set the <code>body</code> property to <code>null</code> for responses with no body (for example, responses to <a href=\"/en-US/docs/Web/HTTP/Methods/HEAD\"><code>HEAD</code></a> requests, or <a href=\"/en-US/docs/Web/HTTP/Status/204\"><code>204 No Content</code></a> responses).</p>\n</div>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"copying_an_image","title":"Copying an image","isH3":true,"content":"<p>\n  In our <a href=\"https://mdn.github.io/dom-examples/streams/simple-pump/\" class=\"external\" target=\"_blank\">simple stream pump</a> example we fetch an image,\n  expose the response's stream using <code>response.body</code>, create a reader using <a href=\"/en-US/docs/Web/API/ReadableStream/getReader\" title=\"ReadableStream.getReader()\"><code>ReadableStream.getReader()</code></a>,\n  then enqueue that stream's chunks into a second, custom readable stream â€” effectively creating an identical copy of the image.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Fetch the original image</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./tortoise.png\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// Retrieve its body as ReadableStream</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">body</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">pump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">pump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// When no more data needs to be consumed, close the stream</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// Enqueue the next data chunk into our target stream</span>\n            controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">pump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"creating_a_byob_reader","title":"Creating a BYOB reader","isH3":true,"content":"<p>In this example we construct a <a href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code></a> from the body using <a href=\"/en-US/docs/Web/API/ReadableStream/getReader\" title=\"ReadableStream.getReader({mode: 'byob'})\"><code>ReadableStream.getReader({mode: 'byob'})</code></a>. We can then use this reader to implement zero copy transfer of the response data.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getProducts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"byob\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// read the response</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getProducts</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://fetch.spec.whatwg.org/#ref-for-dom-body-bodyâ‘ ","title":"Fetch Standard"}],"query":"api.Response.body"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.Response.body"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Fetch_API\">Fetch API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Streams_API\">Streams API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Service_Worker_API\">ServiceWorker API</a></li>\n</ul>"}}],"toc":[{"text":"Value","id":"value"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The body read-only property of the Response interface is a ReadableStream of the body contents.","popularity":0.0224,"modified":"2023-09-14T09:45:46.000Z","source":{"folder":"en-us/web/api/response/body","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/response/body/index.md","last_commit_url":"https://github.com/mdn/content/commit/84b1729de4f527c8d81e44a38fca70ea4db97922","filename":"index.md"},"short_title":"body","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Response","title":"Response"},{"uri":"/en-US/docs/Web/API/Response/body","title":"body"}],"pageTitle":"Response: body property - Web APIs | MDN","noIndexing":false}}