{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"PerformanceObserver: observe() method","mdn_url":"/en-US/docs/Web/API/PerformanceObserver/observe","locale":"en-US","native":"English (US)","browserCompat":["api.PerformanceObserver.observe"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Performance_API\">Performance API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/PerformanceObserver\"><code>PerformanceObserver</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/PerformanceObserver/PerformanceObserver\"><code>PerformanceObserver()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Static properties</summary><ol><li><a href=\"/en-US/docs/Web/API/PerformanceObserver/supportedEntryTypes_static\"><code>supportedEntryTypes</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/PerformanceObserver/disconnect\"><code>disconnect()</code></a></li><li><em><code>observe()</code> </em></li><li><a href=\"/en-US/docs/Web/API/PerformanceObserver/takeRecords\"><code>takeRecords()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Performance API</summary><ol><li><a href=\"/en-US/docs/Web/API/EventCounts\"><code>EventCounts</code></a></li><li><a href=\"/en-US/docs/Web/API/LargestContentfulPaint\"><code>LargestContentfulPaint</code></a></li><li><a href=\"/en-US/docs/Web/API/LayoutShift\"><code>LayoutShift</code></a></li><li><a href=\"/en-US/docs/Web/API/LayoutShiftAttribution\"><code>LayoutShiftAttribution</code></a></li><li><a href=\"/en-US/docs/Web/API/Performance\"><code>Performance</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceElementTiming\"><code>PerformanceElementTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceEntry\"><code>PerformanceEntry</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceEventTiming\"><code>PerformanceEventTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceLongTaskTiming\"><code>PerformanceLongTaskTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceMark\"><code>PerformanceMark</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceMeasure\"><code>PerformanceMeasure</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceNavigation\"><code>PerformanceNavigation</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceNavigationTiming\"><code>PerformanceNavigationTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceObserverEntryList\"><code>PerformanceObserverEntryList</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformancePaintTiming\"><code>PerformancePaintTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceResourceTiming\"><code>PerformanceResourceTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceServerTiming\"><code>PerformanceServerTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceTiming\"><code>PerformanceTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/TaskAttributionTiming\"><code>TaskAttributionTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/VisibilityStateEntry\"><code>VisibilityStateEntry</code></a></li><li><a href=\"/en-US/docs/Web/API/performance_property\"><code>performance_property</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>observe()</code></strong> method of the <strong><a href=\"/en-US/docs/Web/API/PerformanceObserver\"><code>PerformanceObserver</code></a></strong> interface is used to specify the set of performance entry types to observe.</p>\n<p>See <a href=\"/en-US/docs/Web/API/PerformanceEntry/entryType\"><code>PerformanceEntry.entryType</code></a> for a list of entry types and <a href=\"/en-US/docs/Web/API/PerformanceObserver/supportedEntryTypes_static\" title=\"PerformanceObserver.supportedEntryTypes\"><code>PerformanceObserver.supportedEntryTypes</code></a> for a list of entry types the user agent supports.</p>\n<p>When a matching performance entry is recorded, the performance observer's callback function—set when creating the <a href=\"/en-US/docs/Web/API/PerformanceObserver\"><code>PerformanceObserver</code></a>—is invoked.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"options\"><a href=\"#options\"><code>options</code></a></dt>\n  <dd>\n    <p>An object with the following possible members:</p>\n    <dl>\n      <dt id=\"buffered\"><a href=\"#buffered\"><code>buffered</code></a></dt>\n      <dd>\n        <p>A boolean flag to indicate whether buffered entries should be queued into the observer's buffer. Must be used only with the \"<code>type</code>\" option.</p>\n      </dd>\n      <dt id=\"durationthreshold\"><a href=\"#durationthreshold\"><code>durationThreshold</code></a></dt>\n      <dd>\n        <p>A <a href=\"/en-US/docs/Web/API/DOMHighResTimeStamp\"><code>DOMHighResTimeStamp</code></a> defining the threshold for <a href=\"/en-US/docs/Web/API/PerformanceEventTiming\"><code>PerformanceEventTiming</code></a> entries. Defaults to 104ms and is rounded to the nearest of 8ms. Lowest possible threshold is 16ms. May not be used together with the <code>entryTypes</code> option.</p>\n      </dd>\n      <dt id=\"entrytypes\"><a href=\"#entrytypes\"><code>entryTypes</code></a></dt>\n      <dd>\n        <p>\n          An array of string objects, each specifying one performance entry type to observe. May not be used together with\n          the \"<code>type</code>\", \"<code>buffered</code>\", or \"<code>durationThreshold</code>\" options.\n        </p>\n        <p>See <a href=\"/en-US/docs/Web/API/PerformanceEntry/entryType\"><code>PerformanceEntry.entryType</code></a> for a list of valid performance entry type names. Unrecognized types are ignored, though the browser may output a warning message to the console to help developers debug their code. If no valid types are found, <code>observe()</code> has no effect.</p>\n      </dd>\n      <dt id=\"type\"><a href=\"#type\"><code>type</code></a></dt>\n      <dd>\n        <p>A single string specifying exactly one performance entry type to observe. May not be used together with the <code>entryTypes</code> option.</p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>None (<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>).</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"watching_multiple_performance_entry_types","title":"Watching multiple performance entry types","isH3":true,"content":"<p>This example creates a <code>PerformanceObserver</code> and watches for <code>\"mark\"</code> and <code>\"measure\"</code> entry types as specified by the <code>entryTypes</code> option given in the <code>observe()</code> method.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list<span class=\"token punctuation\">,</span> obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Process \"mark\" and \"measure\" events</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">entryTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mark\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"measure\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"watching_a_single_performance_entry_type","title":"Watching a single performance entry type","isH3":true,"content":"<p>The following example retrieves buffered events and subscribes to newer events for resource timing events (<a href=\"/en-US/docs/Web/API/PerformanceResourceTiming\"><code>PerformanceResourceTiming</code></a>) using the <code>buffered</code> and <code>type</code> configuration options. Whenever you need to configure the observer to use the <code>buffered</code> or <code>durationThreshold</code> option, use <code>type</code> instead of <code>entryType</code>. Collecting multiple types of performance entry types will not work otherwise.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list<span class=\"token punctuation\">,</span> obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Process \"resource\" events</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"resource\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">buffered</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/performance-timeline/#dom-performanceobserver-observe","title":"Performance Timeline"}],"query":"api.PerformanceObserver.observe"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.PerformanceObserver.observe"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"The observe() method of the PerformanceObserver interface is used to specify the set of performance entry types to observe.","popularity":0.0027,"modified":"2023-08-24T22:17:15.000Z","source":{"folder":"en-us/web/api/performanceobserver/observe","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/performanceobserver/observe/index.md","last_commit_url":"https://github.com/mdn/content/commit/381c51574a3e6a07ee09c63493452440f046038d","filename":"index.md"},"short_title":"observe()","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/PerformanceObserver","title":"PerformanceObserver"},{"uri":"/en-US/docs/Web/API/PerformanceObserver/observe","title":"observe()"}],"pageTitle":"PerformanceObserver: observe() method - Web APIs | MDN","noIndexing":false}}