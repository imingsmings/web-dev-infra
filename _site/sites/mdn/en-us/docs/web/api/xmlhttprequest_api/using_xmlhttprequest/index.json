{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Using XMLHttpRequest","mdn_url":"/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest","locale":"en-US","native":"English (US)","browserCompat":["api.XMLHttpRequest"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API\">XMLHttpRequest API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><em><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest\" aria-current=\"page\">Using XMLHttpRequest</a></em></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/HTML_in_XMLHttpRequest\">HTML in XMLHttpRequest</a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/Synchronous_and_Asynchronous_Requests\">Synchronous and asynchronous requests</a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/Sending_and_Receiving_Binary_Data\">Sending and Receiving Binary Data</a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/Using_FormData_Objects\">Using FormData Objects</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/FormData\"><code>FormData</code></a></li><li><a href=\"/en-US/docs/Web/API/ProgressEvent\"><code>ProgressEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequestUpload\"><code>XMLHttpRequestUpload</code></a></li></ol></details></li></ol>","sidebarMacro":"DefaultAPISidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>In this guide, we'll take a look at how to use <a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> to issue <a href=\"/en-US/docs/Web/HTTP\">HTTP</a> requests in order to exchange data between the website and a server.</p>\n<p>Examples of both common and more obscure use cases for <code>XMLHttpRequest</code> are included.</p>\n<p>To send an HTTP request:</p>\n<ol>\n  <li>Create an <code>XMLHttpRequest</code> object</li>\n  <li>Open a URL</li>\n  <li>Send the request.</li>\n</ol>\n<p>After the transaction completes, the <code>XMLHttpRequest</code> object will contain useful information such as the response body and the <a href=\"/en-US/docs/Web/HTTP/Status\">HTTP status</a> of the result.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">reqListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> reqListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://www.example.org/example.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"types_of_requests","title":"Types of requests","isH3":false,"content":"<p>A request made via <code>XMLHttpRequest</code> can fetch the data in one of two ways, asynchronously or synchronously. The type of request is dictated by the optional <code>async</code> argument (the third argument) that is set on the <a href=\"/en-US/docs/Web/API/XMLHttpRequest/open\"><code>XMLHttpRequest.open()</code></a> method. If this argument is <code>true</code> or not specified, the <code>XMLHttpRequest</code> is processed asynchronously, otherwise the process is handled synchronously. A detailed discussion and demonstrations of these two types of requests can be found on the <a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/Synchronous_and_Asynchronous_Requests\">synchronous and asynchronous requests</a> page. You can't use synchronous requests outside web workers as it freezes the main interface.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> The constructor <code>XMLHttpRequest</code> isn't limited to only XML documents. It starts with <strong>\"XML\"</strong> because when it was created the main format that was originally used for asynchronous data exchange was XML.</p>\n</div>"}},{"type":"prose","value":{"id":"handling_responses","title":"Handling responses","isH3":false,"content":"<p>There are several types of <a href=\"https://xhr.spec.whatwg.org/\" class=\"external\" target=\"_blank\">response attributes</a> defined for the <a href=\"/en-US/docs/Web/API/XMLHttpRequest/XMLHttpRequest\" title=\"XMLHttpRequest()\"><code>XMLHttpRequest()</code></a> constructor. These tell the client making the <code>XMLHttpRequest</code> important information about the status of the response. Some cases where dealing with non-text response types may involve some manipulation and analysis are outlined in the following sections.</p>"}},{"type":"prose","value":{"id":"analyzing_and_manipulating_the_responsexml_property","title":"Analyzing and manipulating the responseXML property","isH3":true,"content":"<p>If you use <code>XMLHttpRequest</code> to get the content of a remote XML document, the <a href=\"/en-US/docs/Web/API/XMLHttpRequest/responseXML\" title=\"responseXML\"><code>responseXML</code></a> property will be a DOM object containing a parsed XML document. This could prove difficult to manipulate and analyze. There are four primary ways of analyzing this XML document:</p>\n<ol>\n  <li>Using <a href=\"/en-US/docs/Web/XPath\">XPath</a> to address (or point to) parts of it.</li>\n  <li>Manually <a href=\"/en-US/docs/Web/XML/Parsing_and_serializing_XML\">Parsing and serializing XML</a> to strings or objects.</li>\n  <li>Using <a href=\"/en-US/docs/Web/API/XMLSerializer\"><code>XMLSerializer</code></a> to serialize <strong>DOM trees to strings or to files</strong>.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> can be used if you always know the content of the XML document beforehand. You might want to remove line breaks, if you use <code>RegExp</code> to scan with regard to line breaks. However, this method is a \"last resort\" since if the XML code changes slightly, the method will likely fail.</li>\n</ol>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> <code>XMLHttpRequest</code> can now interpret HTML for you, using the <a href=\"/en-US/docs/Web/API/XMLHttpRequest/responseXML\" title=\"responseXML\"><code>responseXML</code></a> property. Read the article about <a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/HTML_in_XMLHttpRequest\">HTML in XMLHttpRequest</a> to learn how to do this.</p>\n</div>"}},{"type":"prose","value":{"id":"processing_a_responsetext_property_containing_an_html_document","title":"Processing a <code>responseText</code> property containing an HTML document","isH3":true,"content":"<p>If you use <code>XMLHttpRequest</code> to get the content of a remote HTML webpage, the <a href=\"/en-US/docs/Web/API/XMLHttpRequest/responseText\" title=\"responseText\"><code>responseText</code></a> property is a string containing the raw HTML. This could prove difficult to manipulate and analyze. There are three primary ways to analyze and parse this raw HTML string:</p>\n<ol>\n  <li>Use the <code>XMLHttpRequest.responseXML</code> property as covered in the article <a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/HTML_in_XMLHttpRequest\">HTML in XMLHttpRequest</a>.</li>\n  <li>Inject the content into the body of a <a href=\"/en-US/docs/Web/API/DocumentFragment\">document fragment</a> via <code>fragment.body.innerHTML</code> and traverse the DOM of the fragment.</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> can be used if you always know the content of the HTML <code>responseText</code> beforehand. You might want to remove line breaks, if you use <code>RegExp</code> to scan with regard to line breaks. However, this method is a \"last resort\" since if the HTML code changes slightly, the method will likely fail.</li>\n</ol>","titleAsText":"Processing a responseText property containing an HTML document"}},{"type":"prose","value":{"id":"handling_binary_data","title":"Handling binary data","isH3":false,"content":"<p>Although <a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> is most commonly used to send and receive textual data, it can be used to send and receive binary content. There are several well tested methods for coercing the response of an <code>XMLHttpRequest</code> into sending binary data. These involve utilizing the <a href=\"/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType\" title=\"overrideMimeType()\"><code>overrideMimeType()</code></a> method on the <code>XMLHttpRequest</code> object and is a workable solution.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// retrieve data unprocessed as a binary string</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">overrideMimeType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/plain; charset=x-user-defined\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* … */</span>\n</code></pre></div>\n<p>However, more modern techniques are available, since the <a href=\"/en-US/docs/Web/API/XMLHttpRequest/responseType\" title=\"responseType\"><code>responseType</code></a> attribute now supports a number of additional content types, which makes sending and receiving binary data much easier.</p>\n<p>For example, consider this snippet, which uses the <code>responseType</code> of \"<code>arraybuffer</code>\" to fetch the remote content into a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object, which stores the raw binary data.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arraybuffer <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">;</span> <span class=\"token comment\">// not responseText</span>\n  <span class=\"token comment\">/* … */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"arraybuffer\"</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>For more examples check out the <a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/Sending_and_Receiving_Binary_Data\">Sending and Receiving Binary Data</a> page.</p>"}},{"type":"prose","value":{"id":"monitoring_progress","title":"Monitoring progress","isH3":false,"content":"<p><code>XMLHttpRequest</code> provides the ability to listen to various events that can occur while the request is being processed. This includes periodic progress notifications, error notifications, and so forth.</p>\n<p>Support for DOM <a href=\"/en-US/docs/Web/API/XMLHttpRequest/progress_event\" title=\"progress\"><code>progress</code></a> event monitoring of <code>XMLHttpRequest</code> transfers follows the <a href=\"https://xhr.spec.whatwg.org/#interface-progressevent\" class=\"external\" target=\"_blank\">specification for progress events</a>: these events implement the <a href=\"/en-US/docs/Web/API/ProgressEvent\"><code>ProgressEvent</code></a> interface. The actual events you can monitor to determine the state of an ongoing transfer are:</p>\n<dl>\n  <dt id=\"progress\"><a href=\"/en-US/docs/Web/API/XMLHttpRequest/progress_event\" title=\"progress\"><code>progress</code></a></dt>\n  <dd>\n    <p>The amount of data that has been retrieved has changed.</p>\n  </dd>\n  <dt id=\"load\"><a href=\"/en-US/docs/Web/API/XMLHttpRequest/load_event\" title=\"load\"><code>load</code></a></dt>\n  <dd>\n    <p>The transfer is complete; all data is now in the <code>response</code></p>\n  </dd>\n</dl>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"progress\"</span><span class=\"token punctuation\">,</span> updateProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> transferComplete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> transferFailed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abort\"</span><span class=\"token punctuation\">,</span> transferCanceled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// …</span>\n\n<span class=\"token comment\">// progress on transfers from the server to the client (downloads)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateProgress</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>lengthComputable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> percentComplete <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>loaded <span class=\"token operator\">/</span> event<span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Unable to compute progress information since the total size is unknown</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">transferComplete</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The transfer is complete.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">transferFailed</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An error occurred while transferring the file.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">transferCanceled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The transfer has been canceled by the user.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Lines 3-6 add event listeners for the various events that are sent while performing a data transfer using <code>XMLHttpRequest</code>.</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> You need to add the event listeners before calling <code>open()</code> on the request. Otherwise the <code>progress</code> events will not fire.</p>\n</div>\n<p>The progress event handler, specified by the <code>updateProgress()</code> function in this example, receives the total number of bytes to transfer as well as the number of bytes transferred so far in the event's <code>total</code> and <code>loaded</code> fields. However, if the <code>lengthComputable</code> field is false, the total length is not known and will be zero.</p>\n<p>Progress events exist for both download and upload transfers. The download events are fired on the <code>XMLHttpRequest</code> object itself, as shown in the above sample. The upload events are fired on the <code>XMLHttpRequest.upload</code> object, as shown below:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span>upload<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"progress\"</span><span class=\"token punctuation\">,</span> updateProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span>upload<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> transferComplete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span>upload<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> transferFailed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span>upload<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abort\"</span><span class=\"token punctuation\">,</span> transferCanceled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p>\n    <strong>Note:</strong> Progress events are not available for the\n    <code>file:</code> protocol.\n  </p>\n</div>\n<p>Progress events come in for every chunk of data received, including the last chunk in cases in which the last packet is received and the connection closed before the progress event is fired. In this case, the progress event is automatically fired when the load event occurs for that packet. This lets you now reliably monitor progress by only watching the \"progress\" event.</p>\n<p>\n  One can also detect all three load-ending conditions (<code>abort</code>,\n  <code>load</code>, or <code>error</code>) using the <code>loadend</code> event:\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>req<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loadend\"</span><span class=\"token punctuation\">,</span> loadEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadEnd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"The transfer finished (although we don't know if it succeeded or not).\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Note there is no way to be certain, from the information received by the <code>loadend</code> event, as to which condition caused the operation to terminate; however, you can use this to handle tasks that need to be performed in all end-of-transfer scenarios.</p>"}},{"type":"prose","value":{"id":"get_last_modified_date","title":"Get last modified date","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getHeaderTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResponseHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Last-Modified\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A valid GMTString date or null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"HEAD\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// use HEAD when you only need the headers</span>\n  <span class=\"token string\">\"yourpage.html\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> getHeaderTime<span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"do_something_when_last_modified_date_changes","title":"Do something when last modified date changes","isH3":true,"content":"<p>Let's create two functions:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getHeaderTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> lastVisit <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>\n    window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">lm_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filepath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> lastModified <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResponseHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Last-Modified\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>lastVisit<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> lastModified <span class=\"token operator\">&gt;</span> lastVisit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">lm_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filepath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span>lastVisit<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>lastModified<span class=\"token punctuation\">,</span> lastVisit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ifHasChanged</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">URL</span><span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HEAD\"</span> <span class=\"token comment\">/* use HEAD - we only need the headers! */</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span>filepath <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> getHeaderTime<span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>And to test:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Let's test the file \"yourpage.html\"</span>\n<span class=\"token function\">ifHasChanged</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yourpage.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">modified<span class=\"token punctuation\">,</span> visit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The page '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filepath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' has been changed on </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>\n      nModified<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>If you want to know if the current page has changed, refer to the article about <a href=\"/en-US/docs/Web/API/Document/lastModified\"><code>document.lastModified</code></a>.</p>"}},{"type":"prose","value":{"id":"cross-site_xmlhttprequest","title":"Cross-site XMLHttpRequest","isH3":false,"content":"<p>Modern browsers support cross-site requests by implementing the <a href=\"/en-US/docs/Web/HTTP/CORS\">Cross-Origin Resource Sharing</a> (CORS) standard. As long as the server is configured to allow requests from your web application's origin, <code>XMLHttpRequest</code> will work. Otherwise, an <code>INVALID_ACCESS_ERR</code> exception is thrown.</p>"}},{"type":"prose","value":{"id":"bypassing_the_cache","title":"Bypassing the cache","isH3":false,"content":"<p>A cross-browser compatible approach to bypassing the cache is appending a timestamp to the URL, being sure to include a \"?\" or \"&amp;\" as appropriate. For example:</p>\n<pre class=\"brush: plain notranslate\">http://example.com/bar.html -&gt; http://example.com/bar.html?12345\nhttp://example.com/bar.html?foobar=baz -&gt; http://example.com/bar.html?foobar=baz&amp;12345\n</pre>\n<p>As the local cache is indexed by URL, this causes every request to be unique, thereby bypassing the cache.</p>\n<p>You can automatically adjust URLs using the following code:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\?</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"&amp;\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"security","title":"Security","isH3":false,"content":"<p>The recommended way to enable cross-site scripting is to use the <code>Access-Control-Allow-Origin</code> HTTP header in the response to the XMLHttpRequest.</p>"}},{"type":"prose","value":{"id":"xmlhttprequests_being_stopped","title":"XMLHttpRequests being stopped","isH3":true,"content":"<p>If you conclude with an XMLHttpRequest receiving <code>status=0</code> and <code>statusText=null</code>, this means the request was not allowed to be performed. It was <a href=\"https://xhr.spec.whatwg.org/#dom-xmlhttprequest-unsent\" class=\"external\" target=\"_blank\"><code>UNSENT</code></a>. A likely cause for this is when the <a href=\"https://www.w3.org/TR/2010/CR-XMLHttpRequest-20100803/#xmlhttprequest-origin\" class=\"external\" target=\"_blank\"><code>XMLHttpRequest</code> origin</a> (at the creation of the XMLHttpRequest) has changed when the XMLHttpRequest is subsequently <code>open()</code>. This case can happen, for example, when one has an XMLHttpRequest that gets fired on an onunload event for a window, the expected XMLHttpRequest is created when the window to be closed is still there, and finally sending the request (in other words, <code>open()</code>) when this window has lost its focus and another window gains focus. The most effective way to avoid this problem is to set a listener on the new window's <a href=\"/en-US/docs/Web/API/Element/DOMActivate_event\" title=\"DOMActivate\"><code>DOMActivate</code></a> event which is set once the terminated window has its <a href=\"/en-US/docs/Web/API/Window/unload_event\" title=\"unload\"><code>unload</code></a> event triggered.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://xhr.spec.whatwg.org/#interface-xmlhttprequest","title":"XMLHttpRequest Standard"}],"query":"api.XMLHttpRequest"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.XMLHttpRequest"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Fetch_API/Using_Fetch\">Using the Fetch API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/HTML_in_XMLHttpRequest\">HTML in XMLHttpRequest</a></li>\n  <li><a href=\"/en-US/docs/Web/HTTP/CORS\">HTTP access control</a></li>\n  <li><a href=\"https://www.peej.co.uk/articles/rich-user-experience.html\" class=\"external\" target=\"_blank\">XMLHttpRequest - REST and the Rich User Experience</a></li>\n  <li><a href=\"https://xhr.spec.whatwg.org/\" class=\"external\" target=\"_blank\">The <code>XMLHttpRequest</code> object: WHATWG specification</a></li>\n</ul>"}}],"toc":[{"text":"Types of requests","id":"types_of_requests"},{"text":"Handling responses","id":"handling_responses"},{"text":"Handling binary data","id":"handling_binary_data"},{"text":"Monitoring progress","id":"monitoring_progress"},{"text":"Get last modified date","id":"get_last_modified_date"},{"text":"Cross-site XMLHttpRequest","id":"cross-site_xmlhttprequest"},{"text":"Bypassing the cache","id":"bypassing_the_cache"},{"text":"Security","id":"security"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"In this guide, we'll take a look at how to use XMLHttpRequest to issue HTTP requests in order to exchange data between the website and a server.","popularity":0.0277,"modified":"2023-12-05T04:07:11.000Z","source":{"folder":"en-us/web/api/xmlhttprequest_api/using_xmlhttprequest","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/xmlhttprequest_api/using_xmlhttprequest/index.md","last_commit_url":"https://github.com/mdn/content/commit/fe468a9966c87cac081d3986b3332d0a51c4e2ee","filename":"index.md"},"short_title":"Using XMLHttpRequest","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/XMLHttpRequest_API","title":"XMLHttpRequest API"},{"uri":"/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest","title":"Using XMLHttpRequest"}],"pageTitle":"Using XMLHttpRequest - Web APIs | MDN","noIndexing":false}}