{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Sending and Receiving Binary Data","mdn_url":"/en-US/docs/Web/API/XMLHttpRequest_API/Sending_and_Receiving_Binary_Data","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API\">XMLHttpRequest API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest\">Using XMLHttpRequest</a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/HTML_in_XMLHttpRequest\">HTML in XMLHttpRequest</a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/Synchronous_and_Asynchronous_Requests\">Synchronous and asynchronous requests</a></li><li><em><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/Sending_and_Receiving_Binary_Data\" aria-current=\"page\">Sending and Receiving Binary Data</a></em></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest_API/Using_FormData_Objects\">Using FormData Objects</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/FormData\"><code>FormData</code></a></li><li><a href=\"/en-US/docs/Web/API/ProgressEvent\"><code>ProgressEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code></a></li><li><a href=\"/en-US/docs/Web/API/XMLHttpRequestUpload\"><code>XMLHttpRequestUpload</code></a></li></ol></details></li></ol>","sidebarMacro":"DefaultAPISidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <code>responseType</code> property of the XMLHttpRequest object can be set to change the expected response type from the server. Possible values are the empty string (default), <code>\"arraybuffer\"</code>, <code>\"blob\"</code>, <code>\"document\"</code>, <code>\"json\"</code>, and <code>\"text\"</code>. The <code>response</code> property will contain the entity body according to <code>responseType</code>, as an <code>ArrayBuffer</code>, <code>Blob</code>, <code>Document</code>, <code>JSON</code>, or string. This is <code>null</code> if the request is not complete or was not successful.</p>\n<p>This example reads an image as a binary file and creates an 8-bit unsigned integer array from the raw bytes. Note that this will not decode the image and read the pixels. You will need a <a href=\"https://github.com/foliojs/png.js\" class=\"external\" target=\"_blank\">png decoding library</a> for that.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/myfile.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"arraybuffer\"</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arrayBuffer <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Note: not req.responseText</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrayBuffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> byteArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>arrayBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    byteArray<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// do something with each byte in the array</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You can also read a binary file as a <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a> by setting the string <code>\"blob\"</code> to the <code>responseType</code> property.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/myfile.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"blob\"</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"receiving_binary_data_in_older_browsers","title":"Receiving binary data in older browsers","isH3":false,"content":"<p>The <code>loadBinaryResource()</code> function shown below loads binary data from the specified URL, returning it to the caller.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">loadBinaryResource</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// XHR binary charset opt by Marcus Granado 2006 [http://mgran.blogspot.com]</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">overrideMimeType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/plain; charset=x-user-defined\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> req<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">?</span> req<span class=\"token punctuation\">.</span>responseText <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The magic happens in line 5, which overrides the MIME type, forcing the browser to treat it as plain text, using a user-defined character set. This tells the browser not to parse it, and to let the bytes pass through unprocessed.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> filestream <span class=\"token operator\">=</span> <span class=\"token function\">loadBinaryResource</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> abyte <span class=\"token operator\">=</span> filestream<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw away high-order byte (f7)</span>\n</code></pre></div>\n<p>The example above fetches the byte at offset <code>x</code> within the loaded binary data. The valid range for <code>x</code> is from 0 to <code>filestream.length-1</code>.</p>\n<p>See <a href=\"https://web.archive.org/web/20071103070418/http://mgran.blogspot.com/2006/08/downloading-binary-streams-with.html\" class=\"external\" target=\"_blank\">downloading binary streams with XMLHttpRequest</a> for a detailed explanation.</p>"}},{"type":"prose","value":{"id":"sending_binary_data","title":"Sending binary data","isH3":false,"content":"<p>The <code>send</code> method of the XMLHttpRequest has been extended to enable easy transmission of binary data by accepting an <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a>, or <a href=\"/en-US/docs/Web/API/File\"><code>File</code></a> object.</p>\n<p>The following example creates a text file on-the-fly and uses the <code>POST</code> method to send the \"file\" to the server. This example uses plain text, but you can imagine the data being a binary file instead.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Uploaded</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"abc123\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"sending_typed_arrays_as_binary_data","title":"Sending typed arrays as binary data","isH3":false,"content":"<p>You can send JavaScript typed arrays as binary data as well.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Create a new array with fake data (Consecutive numbers (0 - 255), looping back to 0)</span>\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This is building a 512-byte array of 8-bit integers and sending it; you can use any binary data you'd like, of course.</p>"}},{"type":"prose","value":{"id":"submitting_forms_and_uploading_files","title":"Submitting forms and uploading files","isH3":false,"content":"<p>See <a href=\"/en-US/docs/Web/API/FormData\"><code>FormData</code></a>.</p>"}}],"toc":[{"text":"Receiving binary data in older browsers","id":"receiving_binary_data_in_older_browsers"},{"text":"Sending binary data","id":"sending_binary_data"},{"text":"Sending typed arrays as binary data","id":"sending_typed_arrays_as_binary_data"},{"text":"Submitting forms and uploading files","id":"submitting_forms_and_uploading_files"}],"summary":"The responseType property of the XMLHttpRequest object can be set to change the expected response type from the server. Possible values are the empty string (default), \"arraybuffer\", \"blob\", \"document\", \"json\", and \"text\". The response property will contain the entity body according to responseType, as an ArrayBuffer, Blob, Document, JSON, or string. This is null if the request is not complete or was not successful.","popularity":0.0182,"modified":"2023-11-08T06:06:49.000Z","source":{"folder":"en-us/web/api/xmlhttprequest_api/sending_and_receiving_binary_data","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/xmlhttprequest_api/sending_and_receiving_binary_data/index.md","last_commit_url":"https://github.com/mdn/content/commit/0a726c0a04ab286873ad91b5ddee478dd938832d","filename":"index.md"},"short_title":"Sending and Receiving Binary Data","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/XMLHttpRequest_API","title":"XMLHttpRequest API"},{"uri":"/en-US/docs/Web/API/XMLHttpRequest_API/Sending_and_Receiving_Binary_Data","title":"Sending and Receiving Binary Data"}],"pageTitle":"Sending and Receiving Binary Data - Web APIs | MDN","noIndexing":false}}