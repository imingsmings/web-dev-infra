{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"High precision timing","mdn_url":"/en-US/docs/Web/API/Performance_API/High_precision_timing","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Performance_API\">Performance API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/en-US/docs/Web/API/Performance_API/Performance_data\">Performance data</a></li><li><em><a href=\"/en-US/docs/Web/API/Performance_API/High_precision_timing\" aria-current=\"page\">High precision timing</a></em></li><li><a href=\"/en-US/docs/Web/API/Performance_API/Resource_timing\">Resource timing</a></li><li><a href=\"/en-US/docs/Web/API/Performance_API/Navigation_timing\">Navigation timing</a></li><li><a href=\"/en-US/docs/Web/API/Performance_API/User_timing\">User timing</a></li><li><a href=\"/en-US/docs/Web/API/Performance_API/Server_timing\">Server timing</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/EventCounts\"><code>EventCounts</code></a></li><li><a href=\"/en-US/docs/Web/API/LargestContentfulPaint\"><code>LargestContentfulPaint</code></a></li><li><a href=\"/en-US/docs/Web/API/LayoutShift\"><code>LayoutShift</code></a></li><li><a href=\"/en-US/docs/Web/API/LayoutShiftAttribution\"><code>LayoutShiftAttribution</code></a></li><li><a href=\"/en-US/docs/Web/API/Performance\"><code>Performance</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceEntry\"><code>PerformanceEntry</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceElementTiming\"><code>PerformanceElementTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceEventTiming\"><code>PerformanceEventTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceLongTaskTiming\"><code>PerformanceLongTaskTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceMark\"><code>PerformanceMark</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceMeasure\"><code>PerformanceMeasure</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceNavigation\"><code>PerformanceNavigation</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceNavigationTiming\"><code>PerformanceNavigationTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceObserver\"><code>PerformanceObserver</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceObserverEntryList\"><code>PerformanceObserverEntryList</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformancePaintTiming\"><code>PerformancePaintTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceResourceTiming\"><code>PerformanceResourceTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceServerTiming\"><code>PerformanceServerTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/PerformanceTiming\"><code>PerformanceTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/TaskAttributionTiming\"><code>TaskAttributionTiming</code></a></li><li><a href=\"/en-US/docs/Web/API/VisibilityStateEntry\"><code>VisibilityStateEntry</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/performance_property\"><code>performance_property</code></a></li></ol></details></li></ol>","sidebarMacro":"DefaultAPISidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The Performance API allows high precision measurements that are based on time in potential sub-millisecond resolution and a stable monotonic clock that is not subject to system clock skew or adjustments. The high resolution timers are needed for accurate benchmarking instead of the less precise and non-monotonic <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> timestamps.</p>\n<p>This page provides an overview about how high precision time works within the Performance API and how it compares to <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> timestamps.</p>"}},{"type":"prose","value":{"id":"domhighrestimestamp","title":"<code>DOMHighResTimeStamp</code>","isH3":false,"content":"<p>High precision timing is achieved by using the <a href=\"/en-US/docs/Web/API/DOMHighResTimeStamp\"><code>DOMHighResTimeStamp</code></a> type for time values. The unit is milliseconds and should be accurate to 5 Âµs (microseconds). However, if the browser is unable to provide a time value accurate to 5 microseconds, the browser can represent the value as a time in milliseconds accurate to a millisecond. This might occur because of hardware/software constraints, or security and privacy reasons. For more information, see the section on <a href=\"#reduced_precision\">reduced precision</a> below.</p>\n<p>All timestamps in the Performance API use the <a href=\"/en-US/docs/Web/API/DOMHighResTimeStamp\"><code>DOMHighResTimeStamp</code></a> type. Previously, the Performance API (and other Web APIs) used the <code>EpochTimeStamp</code> type (previously known as <code>DOMTimeStamp</code>). These types are now discouraged.</p>","titleAsText":"DOMHighResTimeStamp"}},{"type":"prose","value":{"id":"performance.now_vs._date.now","title":"<code>Performance.now()</code> vs. <code>Date.now()</code>","isH3":false,"content":"<p>JavaScript defines <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\"><code>Date.now()</code></a> as the number of milliseconds elapsed since the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_ecmascript_epoch_and_timestamps\">epoch</a>, which is defined as the midnight at the beginning of January 1, 1970, UTC. The <code>performance.now()</code> method on the other hand is relative to the <a href=\"/en-US/docs/Web/API/Performance/timeOrigin\"><code>Performance.timeOrigin</code></a> property. For more information, see the <a href=\"#time_origins\">time origins section</a> below.</p>\n<p>JavaScript <code>Date</code> times are subject to system clock skew or adjustments. This means that the value of time may not always be monotonically increasing. The main purpose of <code>Date</code> objects is to display time and date information to the user and so many operating systems run a daemon which regularly synchronizes time. It might be that the clock is tweaked a few milliseconds several times per hour.</p>\n<p>The <code>performance.now()</code> method (and all other <code>DOMHighResTimeStamp</code> values) provide monotonically increasing time values and aren't subject to clock adjustments. This means that it is guaranteed <code>DOMHighResTimeStamp</code> values will be at least equal to, if not greater than, the last time you accessed it.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1678889977578</span>\nperformance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 233936</span>\n</code></pre></div>\n<p>For measuring performance, calculating precise frame rates (FPS), animation loops, etc., use monotonically increasing high resolution time available with <a href=\"/en-US/docs/Web/API/Performance/now\"><code>Performance.now()</code></a> instead of JavaScript's <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\"><code>Date.now()</code></a>.</p>\n<p>To summarize:</p>\n<figure class=\"table-container\"><table>\n  <thead>\n    <tr>\n      <th>-</th>\n      <th><a href=\"/en-US/docs/Web/API/Performance/now\"><code>Performance.now()</code></a></th>\n      <th><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\"><code>Date.now()</code></a></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Resolution</td>\n      <td>sub-milliseconds</td>\n      <td>milliseconds</td>\n    </tr>\n    <tr>\n      <td>Origin</td>\n      <td><a href=\"/en-US/docs/Web/API/Performance/timeOrigin\"><code>Performance.timeOrigin</code></a></td>\n      <td>Unix Epoch (January 1, 1970, UTC)</td>\n    </tr>\n    <tr>\n      <td>Use clock adjustments</td>\n      <td>No</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <td>Monotonically increasing</td>\n      <td>Yes</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table></figure>","titleAsText":"Performance.now() vs. Date.now()"}},{"type":"prose","value":{"id":"time_origins","title":"Time origins","isH3":false,"content":"<p>The Performance API uses the <a href=\"/en-US/docs/Web/API/Performance/timeOrigin\"><code>Performance.timeOrigin</code></a> property to determine the baseline for performance-related timestamps. All <code>DOMHighResTimeStamp</code> times are relative to the <code>timeOrigin</code> property.</p>\n<p>In Window contexts, this time origin is the time when navigation has started. In <a href=\"/en-US/docs/Web/API/Worker\"><code>Worker</code></a> and <a href=\"/en-US/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a> contexts, the time origin is the time when the worker is run.</p>\n<p>In the previous version of the specification (Level 1), the <code>performance.now()</code> method used to be relative to <a href=\"/en-US/docs/Web/API/PerformanceTiming/navigationStart\"><code>performance.timing.navigationStart</code></a> property from the Navigation Timing specification. However, this changed in a later version of the specification (Level 2) and <code>performance.now()</code> is now relative to <a href=\"/en-US/docs/Web/API/Performance/timeOrigin\"><code>Performance.timeOrigin</code></a> which avoids clock change risks when comparing timestamps across webpages.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Level 1 (clock change risks)</span>\ncurrentTime <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span>navigationStart <span class=\"token operator\">+</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Level 2 (no clock change risks)</span>\ncurrentTime <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span>timeOrigin <span class=\"token operator\">+</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"synchronizing_time_origins_between_contexts","title":"Synchronizing time origins between contexts","isH3":true,"content":"<p>To account for the different time origins in window and worker contexts, you should translate the timestamps coming from worker scripts with the help of the <code>timeOrigin</code> property, so the timings synchronize for the entire application. See the examples section on the <a href=\"/en-US/docs/Web/API/Performance/timeOrigin\"><code>Performance.timeOrigin</code></a> page for example code to synchronize time.</p>"}},{"type":"prose","value":{"id":"reduced_precision","title":"Reduced precision","isH3":false,"content":"<p>To offer protection against timing attacks and <a href=\"/en-US/docs/Glossary/Fingerprinting\">fingerprinting</a>, <code>DOMHighResTimeStamp</code> types are coarsened based on site isolation status.</p>\n<ul>\n  <li>Resolution in isolated contexts: 5 microseconds</li>\n  <li>Resolution in non-isolated contexts: 100 microseconds</li>\n</ul>\n<p>\n  To apply cross-origin isolation to your site, use the <a href=\"/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\"><code>Cross-Origin-Opener-Policy</code></a> (COOP) and\n  <a href=\"/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\"><code>Cross-Origin-Embedder-Policy</code></a> (COEP) headers:\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">http</span></p><pre class=\"brush: http notranslate\"><code><span class=\"token header\"><span class=\"token header-name keyword\">Cross-Origin-Opener-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">same-origin</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cross-Origin-Embedder-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">require-corp</span></span>\n</code></pre></div>\n<p>\n  These headers ensure a top-level document does not share a browsing context group with\n  cross-origin documents. <a href=\"/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\"><code>Cross-Origin-Opener-Policy</code></a> process-isolates your document and potential attackers\n  can't access to your global object if they were opening it in a popup, preventing a set\n  of cross-origin attacks dubbed <a href=\"https://github.com/xsleaks/xsleaks\" class=\"external\" target=\"_blank\">XS-Leaks</a>.\n</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/DOMHighResTimeStamp\"><code>DOMHighResTimeStamp</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/Performance/timeOrigin\"><code>Performance.timeOrigin</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/Performance/now\"><code>Performance.now()</code></a> / <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\"><code>Date.now()</code></a></li>\n</ul>"}}],"toc":[{"text":"<code>DOMHighResTimeStamp</code>","id":"domhighrestimestamp"},{"text":"<code>Performance.now()</code> vs. <code>Date.now()</code>","id":"performance.now_vs._date.now"},{"text":"Time origins","id":"time_origins"},{"text":"Reduced precision","id":"reduced_precision"},{"text":"See also","id":"see_also"}],"summary":"The Performance API allows high precision measurements that are based on time in potential sub-millisecond resolution and a stable monotonic clock that is not subject to system clock skew or adjustments. The high resolution timers are needed for accurate benchmarking instead of the less precise and non-monotonic Date timestamps.","popularity":0.0037,"modified":"2023-09-05T06:28:25.000Z","source":{"folder":"en-us/web/api/performance_api/high_precision_timing","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/performance_api/high_precision_timing/index.md","last_commit_url":"https://github.com/mdn/content/commit/27c5383cd85224527db828234ba454cb07aeca0a","filename":"index.md"},"short_title":"High precision timing","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Performance_API","title":"Performance API"},{"uri":"/en-US/docs/Web/API/Performance_API/High_precision_timing","title":"High precision timing"}],"pageTitle":"High precision timing - Web APIs | MDN","noIndexing":false}}