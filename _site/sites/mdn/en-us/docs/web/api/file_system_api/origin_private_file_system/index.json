{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Origin private file system","mdn_url":"/en-US/docs/Web/API/File_System_API/Origin_private_file_system","locale":"en-US","native":"English (US)","browserCompat":["api.StorageManager.getDirectory"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/File_System_API\">File System API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><em><a href=\"/en-US/docs/Web/API/File_System_API/Origin_private_file_system\" aria-current=\"page\">Origin private file system</a></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/FileSystemHandle\"><code>FileSystemHandle</code></a></li><li><a href=\"/en-US/docs/Web/API/FileSystemFileHandle\"><code>FileSystemFileHandle</code></a></li><li><a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle\"><code>FileSystemDirectoryHandle</code></a></li><li><a href=\"/en-US/docs/Web/API/FileSystemSyncAccessHandle\"><code>FileSystemSyncAccessHandle</code></a></li><li><a href=\"/en-US/docs/Web/API/FileSystemWritableFileStream\"><code>FileSystemWritableFileStream</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/window/showOpenFilePicker\"><code>window.showOpenFilePicker()</code></a></li><li><a href=\"/en-US/docs/Web/API/window/showSaveFilePicker\"><code>window.showSaveFilePicker()</code></a></li><li><a href=\"/en-US/docs/Web/API/window/showDirectoryPicker\"><code>window.showDirectoryPicker()</code></a></li><li><a href=\"/en-US/docs/Web/API/DataTransferItem/getAsFileSystemHandle\"><code>DataTransferItem.getAsFileSystemHandle()</code></a></li><li><a href=\"/en-US/docs/Web/API/StorageManager/getDirectory\"><code>StorageManager.getDirectory()</code></a></li></ol></details></li></ol>","sidebarMacro":"DefaultAPISidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard secure\" id=\"sect1\"><p><strong>Secure context:</strong> This feature is available only in <a href=\"/en-US/docs/Web/Security/Secure_Contexts\">secure contexts</a> (HTTPS), in some or all <a href=\"#browser_compatibility\">supporting browsers</a>.</p></div>\n<p>The origin private file system (OPFS) is a storage endpoint provided as part of the <a href=\"/en-US/docs/Web/API/File_System_API\">File System API</a>, which is private to the origin of the page and not visible to the user like the regular file system. It provides access to a special kind of file that is highly optimized for performance and offers in-place write access to its content.</p>"}},{"type":"prose","value":{"id":"working_with_files_using_the_file_system_access_api","title":"Working with files using the File System Access API","isH3":false,"content":"<p>The <a href=\"https://wicg.github.io/file-system-access/\" class=\"external\" target=\"_blank\">File System Access API</a>, which extends the <a href=\"/en-US/docs/Web/API/File_System_API\">File System API</a>, provides access to files using picker methods. For example:</p>\n<ol>\n  <li><a href=\"/en-US/docs/Web/API/Window/showOpenFilePicker\"><code>Window.showOpenFilePicker()</code></a> allows the user to choose a file to access, which results in a <a href=\"/en-US/docs/Web/API/FileSystemFileHandle\"><code>FileSystemFileHandle</code></a> object being returned.</li>\n  <li><a href=\"/en-US/docs/Web/API/FileSystemFileHandle/getFile\"><code>FileSystemFileHandle.getFile()</code></a> is called to get access to the file's contents, the content is modified using <a href=\"/en-US/docs/Web/API/FileSystemFileHandle/createWritable\"><code>FileSystemFileHandle.createWritable()</code></a> / <a href=\"/en-US/docs/Web/API/FileSystemWritableFileStream/write\"><code>FileSystemWritableFileStream.write()</code></a>.</li>\n  <li><a href=\"/en-US/docs/Web/API/FileSystemHandle/requestPermission\" title=\"FileSystemHandle.requestPermission({mode: 'readwrite'})\"><code>FileSystemHandle.requestPermission({mode: 'readwrite'})</code></a> is used to request the user's permission to save the changes.</li>\n  <li>If the user accepts the permission request, the changes are saved back to the original file.</li>\n</ol>\n<p>This works, but it has some restrictions. These changes are being made to the user-visible file system, so there are a lot of security checks in place (for example, <a href=\"https://developers.google.com/safe-browsing\" class=\"external\" target=\"_blank\">safe browsing</a> in Chrome) to guard against malicious content being written to that file system. These writes are not in-place, and instead use a temporary file. The original is not modified unless it passes all the security checks.</p>\n<p>As a result, these operations are fairly slow. It is not so noticeable when you are making small text updates, but the performance suffers when making more significant, large-scale file updates such as <a href=\"https://www.sqlite.org/wasm\" class=\"external\" target=\"_blank\">SQLite</a> database modifications.</p>"}},{"type":"prose","value":{"id":"how_does_the_opfs_solve_such_problems","title":"How does the OPFS solve such problems?","isH3":false,"content":"<p>The OPFS offers low-level, byte-by-byte file access, which is private to the origin of the page and not visible to the user. As a result, it doesn't require the same series of security checks and permission grants and is therefore faster than File System Access API calls. It also has a set of synchronous calls available (other File System API calls are asynchronous) that can be run inside web workers only so as not to block the main thread.</p>\n<p>To summarize how the OPFS differs from the user-visible file system:</p>\n<ul>\n  <li>The OPFS is subject to <a href=\"/en-US/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria\">browser storage quota restrictions</a>, just like any other origin-partitioned storage mechanism (for example <a href=\"/en-US/docs/Web/API/IndexedDB_API\" title=\"IndexedDB API\">IndexedDB API</a>). You can access the amount of storage space the OPFS is using via <a href=\"/en-US/docs/Web/API/StorageManager/estimate\" title=\"navigator.storage.estimate()\"><code>navigator.storage.estimate()</code></a>.</li>\n  <li>Clearing storage data for the site deletes the OPFS.</li>\n  <li>Permission prompts and security checks are not required to access files in the OPFS.</li>\n  <li>Browsers persist the contents of the OPFS to disk somewhere, but you cannot expect to find the created files matched one-to-one. The OPFS is not intended to be visible to the user.</li>\n</ul>"}},{"type":"prose","value":{"id":"how_do_you_access_the_opfs","title":"How do you access the OPFS?","isH3":false,"content":"<p>To access the OPFS in the first place, you call the <a href=\"/en-US/docs/Web/API/StorageManager/getDirectory\" title=\"navigator.storage.getDirectory()\"><code>navigator.storage.getDirectory()</code></a> method. This returns a reference to a <a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle\"><code>FileSystemDirectoryHandle</code></a> object that represents the root of the OPFS.</p>"}},{"type":"prose","value":{"id":"manipulating_the_opfs_from_the_main_thread","title":"Manipulating the OPFS from the main thread","isH3":false,"content":"<p>When accessing the OPFS from the main thread, you will use asynchronous, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>-based APIs. You can access file (<a href=\"/en-US/docs/Web/API/FileSystemFileHandle\"><code>FileSystemFileHandle</code></a>) and directory (<a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle\"><code>FileSystemDirectoryHandle</code></a>) handles by calling <a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle/getFileHandle\"><code>FileSystemDirectoryHandle.getFileHandle()</code></a> and <a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle\"><code>FileSystemDirectoryHandle.getDirectoryHandle()</code></a> respectively on the <a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle\"><code>FileSystemDirectoryHandle</code></a> object representing the OPFS root (and child directories, as they are created).</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note:</strong> Passing <code>{ create: true }</code> into the above methods causes the file or folder to be created if it doesn't exist.</p>\n</div>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Create a hierarchy of files and folders</span>\n<span class=\"token keyword\">const</span> fileHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> opfsRoot<span class=\"token punctuation\">.</span><span class=\"token function\">getFileHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my first file\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">create</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> directoryHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> opfsRoot<span class=\"token punctuation\">.</span><span class=\"token function\">getDirectoryHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my first folder\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">create</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nestedFileHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> directoryHandle<span class=\"token punctuation\">.</span><span class=\"token function\">getFileHandle</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"my first nested file\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">create</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nestedDirectoryHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> directoryHandle<span class=\"token punctuation\">.</span><span class=\"token function\">getDirectoryHandle</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"my first nested folder\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">create</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Access existing files and folders via their names</span>\n<span class=\"token keyword\">const</span> existingFileHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> opfsRoot<span class=\"token punctuation\">.</span><span class=\"token function\">getFileHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my first file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> existingDirectoryHandle <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">await</span> opfsRoot<span class=\"token punctuation\">.</span><span class=\"token function\">getDirectoryHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my first folder\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"reading_a_file","title":"Reading a file","isH3":true,"content":"<ol>\n  <li>Make a <a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle/getFileHandle\"><code>FileSystemDirectoryHandle.getFileHandle()</code></a> call to return a <a href=\"/en-US/docs/Web/API/FileSystemFileHandle\"><code>FileSystemFileHandle</code></a> object.</li>\n  <li>Call the <a href=\"/en-US/docs/Web/API/FileSystemFileHandle/getFile\"><code>FileSystemFileHandle.getFile()</code></a> object to return a <a href=\"/en-US/docs/Web/API/File\"><code>File</code></a> object. This is a specialized type of <a href=\"/en-US/docs/Web/API/Blob\"><code>Blob</code></a>, and as such can be manipulated just like any other <code>Blob</code>. For example, you could access the text content directly via <a href=\"/en-US/docs/Web/API/Blob/text\"><code>Blob.text()</code></a>.</li>\n</ol>"}},{"type":"prose","value":{"id":"writing_a_file","title":"Writing a file","isH3":true,"content":"<ol>\n  <li>Make a <a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle/getFileHandle\"><code>FileSystemDirectoryHandle.getFileHandle()</code></a> call to return a <a href=\"/en-US/docs/Web/API/FileSystemFileHandle\"><code>FileSystemFileHandle</code></a> object.</li>\n  <li>Call <a href=\"/en-US/docs/Web/API/FileSystemFileHandle/createWritable\"><code>FileSystemFileHandle.createWritable()</code></a> to return a <a href=\"/en-US/docs/Web/API/FileSystemWritableFileStream\"><code>FileSystemWritableFileStream</code></a> object, which is a specialized type of <a href=\"/en-US/docs/Web/API/WritableStream\"><code>WritableStream</code></a>.</li>\n  <li>Write contents to it using a <a href=\"/en-US/docs/Web/API/FileSystemWritableFileStream/write\"><code>FileSystemWritableFilestream.write()</code></a> call.</li>\n  <li>Close the stream using <a href=\"/en-US/docs/Web/API/WritableStream/close\"><code>WritableStream.close()</code></a>.</li>\n</ol>"}},{"type":"prose","value":{"id":"deleting_a_file_or_folder","title":"Deleting a file or folder","isH3":true,"content":"<p>You can call <a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle/removeEntry\"><code>FileSystemDirectoryHandle.removeEntry()</code></a> on the parent directory, passing it the name of the item you want to remove:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>directoryHandle<span class=\"token punctuation\">.</span><span class=\"token function\">removeEntry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my first nested file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You can also call <a href=\"/en-US/docs/Web/API/FileSystemHandle/remove\"><code>FileSystemHandle.remove()</code></a> on the <a href=\"/en-US/docs/Web/API/FileSystemFileHandle\"><code>FileSystemFileHandle</code></a> or <a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle\"><code>FileSystemDirectoryHandle</code></a> representing the item you want to remove. To delete a folder including all subfolders, pass the <code>{ recursive: true }</code> option.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">await</span> fileHandle<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> directoryHandle<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The following provides a quick way to clear the entire OPFS:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span><span class=\"token function\">getDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"listing_the_contents_of_a_folder","title":"Listing the contents of a folder","isH3":true,"content":"<p><a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle\"><code>FileSystemDirectoryHandle</code></a> is an <a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols\">asynchronous iterator</a>. As such, you can iterate over it with a <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\"><code>for await…of</code></a> loop and standard methods such as <a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle/entries\"><code>entries()</code></a>, <a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle/entries\"><code>values()</code></a>, and <a href=\"/en-US/docs/Web/API/FileSystemDirectoryHandle/entries\"><code>keys()</code></a>.</p>\n<p>For example:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> directoryHandle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> directoryHandle<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> handle <span class=\"token keyword\">of</span> directoryHandle<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> name <span class=\"token keyword\">of</span> directoryHandle<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"manipulating_the_opfs_from_a_web_worker","title":"Manipulating the OPFS from a web worker","isH3":false,"content":"<p>Web Workers don't block the main thread, which means you can use the synchronous file access APIs in this context. Synchronous APIs are faster as they avoid having to deal with promises.</p>\n<p>You can synchronously access a file by calling <a href=\"/en-US/docs/Web/API/FileSystemFileHandle/createSyncAccessHandle\"><code>FileSystemFileHandle.createSyncAccessHandle()</code></a> on a regular <a href=\"/en-US/docs/Web/API/FileSystemFileHandle\"><code>FileSystemFileHandle</code></a>:</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note:</strong> Despite having \"Sync\" in its name, the <code>createSyncAccessHandle()</code> method itself is asynchronous.</p>\n</div>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> opfsRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span><span class=\"token function\">getDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fileHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> opfsRoot<span class=\"token punctuation\">.</span><span class=\"token function\">getFileHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my highspeed file.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">create</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> syncAccessHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fileHandle<span class=\"token punctuation\">.</span><span class=\"token function\">createSyncAccessHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>There are a number of <em>synchronous</em> methods available on the returned <a href=\"/en-US/docs/Web/API/FileSystemSyncAccessHandle\"><code>FileSystemSyncAccessHandle</code></a>:</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/API/FileSystemSyncAccessHandle/getSize\" title=\"getSize()\"><code>getSize()</code></a>: Returns the size of the file in bytes.</li>\n  <li><a href=\"/en-US/docs/Web/API/FileSystemSyncAccessHandle/write\" title=\"write()\"><code>write()</code></a>: Writes the content of a buffer into the file, optionally at a given offset, and returns the number of written bytes. Checking the returned number of written bytes allows callers to detect and handle errors and partial writes.</li>\n  <li><a href=\"/en-US/docs/Web/API/FileSystemSyncAccessHandle/read\" title=\"read()\"><code>read()</code></a>: Reads the contents of the file into a buffer, optionally at a given offset.</li>\n  <li><a href=\"/en-US/docs/Web/API/FileSystemSyncAccessHandle/truncate\" title=\"truncate()\"><code>truncate()</code></a>: Resizes the file to the given size.</li>\n  <li><a href=\"/en-US/docs/Web/API/FileSystemSyncAccessHandle/flush\" title=\"flush()\"><code>flush()</code></a>: Ensures that the file contents contain all the modifications done through <code>write()</code>.</li>\n  <li><a href=\"/en-US/docs/Web/API/FileSystemSyncAccessHandle/close\" title=\"close()\"><code>close()</code></a>: Closes the access handle.</li>\n</ul>\n<p>Here is an example that uses all the methods mentioned above:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> opfsRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span><span class=\"token function\">getDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fileHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> opfsRoot<span class=\"token punctuation\">.</span><span class=\"token function\">getFileHandle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fast\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">create</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> accessHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fileHandle<span class=\"token punctuation\">.</span><span class=\"token function\">createSyncAccessHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> textEncoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> textDecoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Initialize this variable for the size of the file.</span>\n<span class=\"token keyword\">let</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The current size of the file, initially `0`.</span>\nsize <span class=\"token operator\">=</span> accessHandle<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Encode content to write to the file.</span>\n<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> textEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Write the content at the beginning of the file.</span>\naccessHandle<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">at</span><span class=\"token operator\">:</span> size <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Flush the changes.</span>\naccessHandle<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The current size of the file, now `9` (the length of \"Some text\").</span>\nsize <span class=\"token operator\">=</span> accessHandle<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Encode more content to write to the file.</span>\n<span class=\"token keyword\">const</span> moreContent <span class=\"token operator\">=</span> textEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"More content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Write the content at the end of the file.</span>\naccessHandle<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>moreContent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">at</span><span class=\"token operator\">:</span> size <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Flush the changes.</span>\naccessHandle<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The current size of the file, now `21` (the length of</span>\n<span class=\"token comment\">// \"Some textMore content\").</span>\nsize <span class=\"token operator\">=</span> accessHandle<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Prepare a data view of the length of the file.</span>\n<span class=\"token keyword\">const</span> dataView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataView</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Read the entire file into the data view.</span>\naccessHandle<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>dataView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Logs `\"Some textMore content\"`.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>textDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>dataView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Read starting at offset 9 into the data view.</span>\naccessHandle<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>dataView<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">at</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Logs `\"More content\"`.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>textDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>dataView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Truncate the file after 4 bytes.</span>\naccessHandle<span class=\"token punctuation\">.</span><span class=\"token function\">truncate</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.StorageManager.getDirectory"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"https://web.dev/articles/origin-private-file-system\" class=\"external\" target=\"_blank\">The origin private file system</a> on web.dev</li>\n</ul>"}}],"toc":[{"text":"Working with files using the File System Access API","id":"working_with_files_using_the_file_system_access_api"},{"text":"How does the OPFS solve such problems?","id":"how_does_the_opfs_solve_such_problems"},{"text":"How do you access the OPFS?","id":"how_do_you_access_the_opfs"},{"text":"Manipulating the OPFS from the main thread","id":"manipulating_the_opfs_from_the_main_thread"},{"text":"Manipulating the OPFS from a web worker","id":"manipulating_the_opfs_from_a_web_worker"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The origin private file system (OPFS) is a storage endpoint provided as part of the File System API, which is private to the origin of the page and not visible to the user like the regular file system. It provides access to a special kind of file that is highly optimized for performance and offers in-place write access to its content.","popularity":0.0112,"modified":"2023-12-03T08:42:05.000Z","source":{"folder":"en-us/web/api/file_system_api/origin_private_file_system","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/file_system_api/origin_private_file_system/index.md","last_commit_url":"https://github.com/mdn/content/commit/b0f2d5fb10c6ec3f492e853f6064d8f017458750","filename":"index.md"},"short_title":"Origin private file system","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/File_System_API","title":"File System API"},{"uri":"/en-US/docs/Web/API/File_System_API/Origin_private_file_system","title":"Origin private file system"}],"pageTitle":"Origin private file system - Web APIs | MDN","noIndexing":false}}