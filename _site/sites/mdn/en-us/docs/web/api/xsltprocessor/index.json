{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"XSLTProcessor","mdn_url":"/en-US/docs/Web/API/XSLTProcessor","locale":"en-US","native":"English (US)","browserCompat":["api.XSLTProcessor"],"sidebarHTML":"<ol><li><strong><em><a href=\"/en-US/docs/Web/API/XSLTProcessor\" aria-current=\"page\"><code>XSLTProcessor</code></a></em></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a href=\"/en-US/docs/Web/API/XSLTProcessor/XSLTProcessor\"><code>XSLTProcessor()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/XSLTProcessor/clearParameters\"><code>clearParameters()</code></a></li><li><a href=\"/en-US/docs/Web/API/XSLTProcessor/getParameter\"><code>getParameter()</code></a></li><li><a href=\"/en-US/docs/Web/API/XSLTProcessor/importStylesheet\"><code>importStylesheet()</code></a></li><li><a href=\"/en-US/docs/Web/API/XSLTProcessor/removeParameter\"><code>removeParameter()</code></a></li><li><a href=\"/en-US/docs/Web/API/XSLTProcessor/reset\"><code>reset()</code></a></li><li><a href=\"/en-US/docs/Web/API/XSLTProcessor/setParameter\"><code>setParameter()</code></a></li><li><a href=\"/en-US/docs/Web/API/XSLTProcessor/transformToDocument\"><code>transformToDocument()</code></a></li><li><a href=\"/en-US/docs/Web/API/XSLTProcessor/transformToFragment\"><code>transformToFragment()</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  An <strong><code>XSLTProcessor</code></strong> applies an <a href=\"/en-US/docs/Web/XSLT\">XSLT</a> stylesheet transformation to an XML document to\n  produce a new XML document as output. It has methods to load the XSLT stylesheet, to\n  manipulate <code>&lt;xsl:param&gt;</code> parameter values, and to apply the\n  transformation to documents.\n</p>"}},{"type":"prose","value":{"id":"constructor","title":"Constructor","isH3":false,"content":"<dl>\n  <dt id=\"xsltprocessor\"><a href=\"/en-US/docs/Web/API/XSLTProcessor/XSLTProcessor\" title=\"XSLTProcessor()\"><code>XSLTProcessor()</code></a></dt>\n  <dd>\n    <p>Create a new <code>XSLTProcessor</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"xsltprocessor.importstylesheet\"><a href=\"/en-US/docs/Web/API/XSLTProcessor/importStylesheet\"><code>XSLTProcessor.importStylesheet()</code></a></dt>\n  <dd>\n    <p>\n      Imports the XSLT stylesheet.\n      If the given node is a document node, you can pass in a full XSL Transform or a <a href=\"https://www.w3.org/TR/xslt/#result-element-stylesheet\" class=\"external\" target=\"_blank\">literal result element transform</a>;\n      otherwise, it must be an <code>&lt;xsl:stylesheet&gt;</code> or <code>&lt;xsl:transform&gt;</code> element.\n    </p>\n  </dd>\n  <dt id=\"xsltprocessor.transformtofragment\"><a href=\"/en-US/docs/Web/API/XSLTProcessor/transformToFragment\"><code>XSLTProcessor.transformToFragment()</code></a></dt>\n  <dd>\n    <p>\n      Transforms the node source by applying the XSLT stylesheet imported using the <a href=\"/en-US/docs/Web/API/XSLTProcessor/importStylesheet\"><code>XSLTProcessor.importStylesheet()</code></a> function.\n      The owner document of the resulting document fragment is the owner node.\n    </p>\n  </dd>\n  <dt id=\"xsltprocessor.transformtodocument\"><a href=\"/en-US/docs/Web/API/XSLTProcessor/transformToDocument\"><code>XSLTProcessor.transformToDocument()</code></a></dt>\n  <dd>\n    <p>Transforms the node source applying the XSLT stylesheet given importing using the <a href=\"/en-US/docs/Web/API/XSLTProcessor/importStylesheet\"><code>XSLTProcessor.importStylesheet()</code></a> function.</p>\n  </dd>\n  <dt id=\"xsltprocessor.setparameter\"><a href=\"/en-US/docs/Web/API/XSLTProcessor/setParameter\"><code>XSLTProcessor.setParameter()</code></a></dt>\n  <dd>\n    <p>Sets a parameter (<code>&lt;xsl:param&gt;</code>) value in the XSLT stylesheet that was imported.</p>\n  </dd>\n  <dt id=\"xsltprocessor.getparameter\"><a href=\"/en-US/docs/Web/API/XSLTProcessor/getParameter\"><code>XSLTProcessor.getParameter()</code></a></dt>\n  <dd>\n    <p>Gets the value of a parameter from the XSLT stylesheet.</p>\n  </dd>\n  <dt id=\"xsltprocessor.removeparameter\"><a href=\"/en-US/docs/Web/API/XSLTProcessor/removeParameter\"><code>XSLTProcessor.removeParameter()</code></a></dt>\n  <dd>\n    <p>\n      Removes the parameter if it was previously set.\n      This will make the <code>XSLTProcessor</code> use the default value for the parameter as specified in the XSLT stylesheet.\n    </p>\n  </dd>\n  <dt id=\"xsltprocessor.clearparameters\"><a href=\"/en-US/docs/Web/API/XSLTProcessor/clearParameters\"><code>XSLTProcessor.clearParameters()</code></a></dt>\n  <dd>\n    <p>\n      Removes all set parameters from the <code>XSLTProcessor</code>.\n      The <code>XSLTProcessor</code> will then use the default values specified in the XSLT stylesheet.\n    </p>\n  </dd>\n  <dt id=\"xsltprocessor.reset\"><a href=\"/en-US/docs/Web/API/XSLTProcessor/reset\"><code>XSLTProcessor.reset()</code></a></dt>\n  <dd>\n    <p>Removes all parameters and stylesheets from the <code>XSLTProcessor</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<p><em>This are no properties for this interface.</em></p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"instantiating_an_xsltprocessor","title":"Instantiating an <code>XSLTProcessor</code>","isH3":true,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> xsltProcessor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XSLTProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Load the XSLT file, example1.xsl</span>\n  <span class=\"token keyword\">const</span> xslResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example1.xsl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> xslText <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> xslResponse<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> xslStylesheet <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>xslText<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">importStylesheet</span><span class=\"token punctuation\">(</span>xslStylesheet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// process the file</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","titleAsText":"Instantiating an XSLTProcessor"}},{"type":"prose","value":{"id":"creating_an_xml_document_based_on_part_of_a_documents_dom","title":"Creating an XML document based on part of a document's DOM","isH3":true,"content":"<p>For the actual transformation, <code>XSLTProcessor</code> requires an XML document, which is used in conjunction with the imported XSL file to produce the final result. The XML document can be a separate XML file loaded using <a href=\"/en-US/docs/Web/API/fetch\"><code>fetch()</code></a>, or it can be part of the existing page.</p>\n<p>To process part of a page's DOM, it is necessary to first create an XML document in memory. Assuming that the DOM to be processed is contained by an element with the id <code>example</code>, that DOM can be \"cloned\" using the in-memory XML document's <a href=\"/en-US/docs/Web/API/Document/importNode\"><code>Document.importNode()</code></a> method. <a href=\"/en-US/docs/Web/API/Document/importNode\"><code>Document.importNode()</code></a> allows transferring a DOM fragment between documents, in this case from an HTML document to an XML document. The first parameter references the DOM node to clone. By making the second parameter \"true\", it will clone all descendants as well (a deep clone). The cloned DOM can then be inserted into the XML document using <a href=\"/en-US/docs/Web/API/Node/appendChild\"><code>Node.appendChild()</code></a>, as shown below.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Create a new XML document in memory</span>\n<span class=\"token keyword\">const</span> xmlRef <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// We want to move a part of the DOM from an HTML document to an XML document.</span>\n<span class=\"token comment\">// importNode is used to clone the nodes we want to process via XSLT - true makes it do a deep clone</span>\n<span class=\"token keyword\">const</span> myNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> clonedNode <span class=\"token operator\">=</span> xmlRef<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>myNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add the cloned DOM into the XML document</span>\nxmlRef<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>clonedNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Once the stylesheet has been imported, <code>XSLTProcessor</code> has to perform two methods for the actual transformation, namely <a href=\"/en-US/docs/Web/API/XSLTProcessor/transformToDocument\"><code>XSLTProcessor.transformToDocument()</code></a> and <a href=\"/en-US/docs/Web/API/XSLTProcessor/transformToFragment\"><code>XSLTProcessor.transformToFragment()</code></a>. <a href=\"/en-US/docs/Web/API/XSLTProcessor/transformToDocument\"><code>XSLTProcessor.transformToDocument()</code></a> returns a full XML document while <a href=\"/en-US/docs/Web/API/XSLTProcessor/transformToFragment\"><code>XSLTProcessor.transformToFragment()</code></a> returns a document fragment that can be easily added to an existing document. Both take in the XML document as the first parameter that will be transformed. <a href=\"/en-US/docs/Web/API/XSLTProcessor/transformToFragment\"><code>XSLTProcessor.transformToFragment()</code></a> requires a second parameter, namely the document object that will own the generated fragment. If the generated fragment will be inserted into the current HTML document, passing in document is enough.</p>"}},{"type":"prose","value":{"id":"creating_an_xml_document_from_a_string_xml_soup","title":"Creating an XML document From a String 'XML Soup'","isH3":true,"content":"<p>You can use the <a href=\"/en-US/docs/Web/API/DOMParser\"><code>DOMParser</code></a> to create an XML document from a string of XML.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> doc <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>aStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"performing_the_transformation","title":"Performing the transformation","isH3":true,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToFragment</span><span class=\"token punctuation\">(</span>xmlRef<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"basic_example","title":"Basic Example","isH3":true,"content":"<p>The basic example will load an XML file and apply a XSL transformation on it. These are the same files used in the <a href=\"/en-US/docs/Web/API/XSLTProcessor/Generating_HTML\">Generating HTML</a> example. The XML file describes an article and the XSL file formats the information for display.</p>\n<h4 id=\"xml\">XML</h4>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">xml</span></p><pre class=\"brush: xml notranslate\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">myNS:</span>Article</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>myNS</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://devedge.netscape.com/2002/de<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">myNS:</span>Title</span><span class=\"token punctuation\">&gt;</span></span>My Article<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">myNS:</span>Title</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">myNS:</span>Authors</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">myNS:</span>Author</span> <span class=\"token attr-name\">company</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Foopy Corp.<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Mr. Foo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">myNS:</span>Author</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">myNS:</span>Author</span><span class=\"token punctuation\">&gt;</span></span>Mr. Bar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">myNS:</span>Author</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">myNS:</span>Authors</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">myNS:</span>Body</span><span class=\"token punctuation\">&gt;</span></span>\n    The <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">&gt;</span></span>rain<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">&gt;</span></span> in <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>u</span><span class=\"token punctuation\">&gt;</span></span>Spain<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>u</span><span class=\"token punctuation\">&gt;</span></span> stays mainly in the plains.\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">myNS:</span>Body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">myNS:</span>Article</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"xslt\">XSLT</h4>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">xml</span></p><pre class=\"brush: xml notranslate\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>stylesheet</span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsl</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/XSL/Transform<span class=\"token punctuation\">\"</span></span>\n                   <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>myNS</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://devedge.netscape.com/2002/de<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>output</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>html<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>template</span> <span class=\"token attr-name\">match</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>value-of</span> <span class=\"token attr-name\">select</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/myNS:Article/myNS:Title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n          .myBox {margin:10px 155px 0 50px; border: 1px dotted #639ACE; padding:0 5px 0 5px;}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>value-of</span> <span class=\"token attr-name\">select</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/myNS:Article/myNS:Title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span>\n\n          Authors:   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>apply-templates</span> <span class=\"token attr-name\">select</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/myNS:Article/myNS:Authors/myNS:Author<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>apply-templates</span> <span class=\"token attr-name\">select</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//myNS:Body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xsl:</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>template</span> <span class=\"token attr-name\">match</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myNS:Author<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n     --   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>value-of</span> <span class=\"token attr-name\">select</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@company<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n     ::   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">&gt;</span></span>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>value-of</span> <span class=\"token attr-name\">select</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@company<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xsl:</span>if</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xsl:</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>template</span> <span class=\"token attr-name\">match</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myNS:Body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>copy</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>apply-templates</span> <span class=\"token attr-name\">select</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@*|node()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xsl:</span>copy</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xsl:</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>template</span> <span class=\"token attr-name\">match</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@*|node()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>copy</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>apply-templates</span> <span class=\"token attr-name\">select</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@*|node()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xsl:</span>copy</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xsl:</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xsl:</span>stylesheet</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>The example loads both the .xsl (<code>xslStylesheet</code>) and the .xml (<code>xmlDoc</code>) files into memory. The .xsl file is then imported (<code>xsltProcessor.importStylesheet(xslStylesheet)</code>) and the transformation run (<code>xsltProcessor.transformToFragment(xmlDoc, document)</code>). This allows fetching of data after the page has been loaded, without initiating a fresh page load.</p>\n<h4 id=\"javascript\">JavaScript</h4>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> xsltProcessor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XSLTProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Load the XSLT file, example1.xsl</span>\n  <span class=\"token keyword\">const</span> xslResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example1.xsl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> xslText <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> xslResponse<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> xslStylesheet <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>xslText<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">importStylesheet</span><span class=\"token punctuation\">(</span>xslStylesheet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Load the XML file, example1.xml</span>\n  <span class=\"token keyword\">const</span> xmlResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example1.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> xmlText <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> xmlResponse<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> xmlDoc <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>xmlText<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToFragment</span><span class=\"token punctuation\">(</span>xmlDoc<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"advanced_example","title":"Advanced example","isH3":true,"content":"<p>This advanced example sorts several divs based on their content. The example allows sorting the content multiple times, alternating between ascending and descending order. The JavaScript loads the .xsl file only on the first sort and sets the <code>xslloaded</code> variable to true once it has finished loading the file. Using the <a href=\"/en-US/docs/Web/API/XSLTProcessor/getParameter\"><code>XSLTProcessor.getParameter()</code></a> method, the code can figure whether to sort in ascending or descending order. It defaults to ascending if the parameter is empty (the first time the sorting happens, as there is no value for it in the XSLT file). The sorting value is set using <a href=\"/en-US/docs/Web/API/XSLTProcessor/setParameter\"><code>XSLTProcessor.setParameter()</code></a>.</p>\n<p>The XSLT file has a parameter called <code>myOrder</code> that JavaScript sets to change the sorting method. The <code>xsl:sort</code> element's order attribute can access the value of the parameter using <code>$myOrder</code>. However, the value needs to be an XPATH expression and not a string, so <code>{$myOrder}</code> is used. Using {} evaluates the content as an XPath expression.</p>\n<p>Once the transformation is complete, the result is appended to the document, as shown in this example.</p>\n<h4 id=\"xhtml\">XHTML</h4>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">html</span></p><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript_2\">JavaScript</h4>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> xslRef<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> xslloaded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> xsltProcessor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XSLTProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myDOM<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> xmlRef <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>xslloaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example2.xsl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> xslText <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xslRef <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>xslText<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">importStylesheet</span><span class=\"token punctuation\">(</span>xslRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xslloaded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Create a new XML document in memory</span>\n  xmlRef <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We want to move a part of the DOM from an HTML document to an XML document.</span>\n  <span class=\"token comment\">// importNode is used to clone the nodes we want to process via XSLT - true makes it do a deep clone</span>\n  <span class=\"token keyword\">const</span> myNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> clonedNode <span class=\"token operator\">=</span> xmlRef<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>myNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// After cloning, we append</span>\n  xmlRef<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>clonedNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Set the sorting parameter in the XSL file</span>\n  <span class=\"token keyword\">const</span> sortVal <span class=\"token operator\">=</span> xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myOrder\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sortVal <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">||</span> sortVal <span class=\"token operator\">===</span> <span class=\"token string\">\"descending\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myOrder\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ascending\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myOrder\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"descending\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Initiate the transformation</span>\n  <span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToFragment</span><span class=\"token punctuation\">(</span>xmlRef<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Clear the contents</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n  myDOM <span class=\"token operator\">=</span> fragment<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Add the new content from the transformation</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"xslt_2\">XSLT</h4>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">xml</span></p><pre class=\"brush: xml notranslate\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>stylesheet</span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/xhtml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>html</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/xhtml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsl</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/XSL/Transform<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>output</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">indent</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yes<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>param</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myOrder<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>template</span> <span class=\"token attr-name\">match</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>apply-templates</span> <span class=\"token attr-name\">select</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/div//div<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>sort</span> <span class=\"token attr-name\">select</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">order</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{$myOrder}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xsl:</span>apply-templates</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xsl:</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>template</span> <span class=\"token attr-name\">match</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>div<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xsl:</span>copy-of</span> <span class=\"token attr-name\">select</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xsl:</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xsl:</span>stylesheet</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#interface-xsltprocessor","title":"DOM Standard"}],"query":"api.XSLTProcessor"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.XSLTProcessor"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/XSLT\">XSLT</a></li>\n  <li><a href=\"https://developer.ibm.com/technologies/web-development/\" class=\"external\" target=\"_blank\">What kind of language is XSLT?</a> at <a href=\"https://developer.ibm.com/\" class=\"external\" target=\"_blank\">IBM developer</a></li>\n  <li><a href=\"https://www.zvon.org/xxl/XSLTutorial/Books/Book1/index.html\" class=\"external\" target=\"_blank\">XSLT Tutorial</a> at <a href=\"https://www.zvon.org/\" class=\"external\" target=\"_blank\">zvon.org</a></li>\n  <li><a href=\"https://www.zvon.org/xxl/XPathTutorial/General/examples.html\" class=\"external\" target=\"_blank\">XPath Tutorial</a> at <a href=\"https://www.zvon.org/\" class=\"external\" target=\"_blank\">zvon.org</a></li>\n</ul>"}}],"toc":[{"text":"Constructor","id":"constructor"},{"text":"Instance methods","id":"instance_methods"},{"text":"Instance properties","id":"instance_properties"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"An XSLTProcessor applies an XSLT stylesheet transformation to an XML document to\n  produce a new XML document as output. It has methods to load the XSLT stylesheet, to\n  manipulate <xsl:param> parameter values, and to apply the\n  transformation to documents.","popularity":0.0033,"modified":"2023-11-09T18:22:33.000Z","source":{"folder":"en-us/web/api/xsltprocessor","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/xsltprocessor/index.md","last_commit_url":"https://github.com/mdn/content/commit/759e0b7f07e4124a7659114016bf5b347127eebf","filename":"index.md"},"short_title":"XSLTProcessor","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/XSLTProcessor","title":"XSLTProcessor"}],"pageTitle":"XSLTProcessor - Web APIs | MDN","noIndexing":false}}