{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Using the Storage Access API","mdn_url":"/en-US/docs/Web/API/Storage_Access_API/Using","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Storage_Access_API\">Storage Access API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><em><a href=\"/en-US/docs/Web/API/Storage_Access_API/Using\" aria-current=\"page\">Using the Storage Access API</a></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/Document/hasStorageAccess\"><code>Document.hasStorageAccess()</code></a></li><li><a href=\"/en-US/docs/Web/API/Document/requestStorageAccess\"><code>Document.requestStorageAccess()</code></a></li></ol></details></li></ol>","sidebarMacro":"DefaultAPISidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <a href=\"/en-US/docs/Web/API/Storage_Access_API\">Storage Access API</a> can be used by embedded cross-site documents to verify whether they have access to unpartitioned cookies and, if not, to request access. We'll briefly look at a common storage access scenario.</p>"}},{"type":"prose","value":{"id":"usage_notes","title":"Usage notes","isH3":false,"content":"<p>The Storage Access API is designed to allow embedded content to request access to unpartitioned cookies — most modern browsers block such access by default to protect user privacy. Since embedded content won't know what a browser's behavior is going to be in this regard, it's best to always check whether the embedded <a href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> has storage access before attempting to read or write a cookie. This is particularly true for <a href=\"/en-US/docs/Web/API/Document/cookie\"><code>Document.cookie</code></a> access, as browsers will often return an empty cookie jar when third-party cookie access is blocked.</p>\n<p>In the example below, we show how an embedded cross-site <a href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> can access unpartitioned cookies under a browser storage access policy that blocks third-party cookie access.</p>"}},{"type":"prose","value":{"id":"allowing_a_sandboxed_iframe_to_use_the_api","title":"Allowing a sandboxed &lt;iframe&gt; to use the API","isH3":false,"content":"<p>First of all, if the <code>&lt;iframe&gt;</code> is sandboxed, the embedding website needs to add the <code>allow-storage-access-by-user-activation</code> <a href=\"/en-US/docs/Web/HTML/Element/iframe#sandbox\">sandbox token</a> to allow Storage Access API requests to be successful, along with <code>allow-scripts</code> and <code>allow-same-origin</code> to allow it to execute a script to call the API and execute it in an origin that can have cookies:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">html</span></p><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span>\n  <span class=\"token attr-name\">sandbox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>allow-storage-access-by-user-activation\n                 allow-scripts\n                 allow-same-origin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  …\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>","titleAsText":"Allowing a sandboxed <iframe> to use the API"}},{"type":"prose","value":{"id":"checking_and_requesting_storage_access","title":"Checking and requesting storage access","isH3":false,"content":"<p>Now on to the code executed inside the embedded document. In this code:</p>\n<ol>\n  <li>We first use feature detection (<code>if (document.hasStorageAccess) {}</code>) to check whether the API is supported. If not, we run our code that accesses cookies anyway, and hope that it works. It should be coded defensively to deal with such eventualities anyway.</li>\n  <li>If the API is supported, we call <code>document.hasStorageAccess()</code>.</li>\n  <li>If that call returns <code>true</code>, it means this <a href=\"/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> has already obtained access, and we can run our code that accesses cookies right away.</li>\n  <li>If that call returns <code>false</code>, we then call <a href=\"/en-US/docs/Web/API/Permissions/query\"><code>Permissions.query()</code></a> to check whether permission to access unpartitioned cookies has already been granted (i.e. to another same-site embed). We wrap this whole section in a <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try...catch</code></a> block because some browsers don't support the <code>\"storage-access\"</code> permission, which can cause the <code>query()</code> call to throw. If it throws, we report that to the console and try running the cookie code anyway.</li>\n  <li>If the permission state is <code>\"granted\"</code>, we immediately call <code>document.requestStorageAccess()</code>. This call will automatically resolve, saving the user some time, then we can run our code that accesses cookies.</li>\n  <li>If the permission state is <code>\"prompt\"</code>, we call <code>document.requestStorageAccess()</code> after user interaction. This call may trigger a prompt to the user. If this call resolves, then we can run our code that accesses cookies.</li>\n  <li>If the permission state is <code>\"denied\"</code>, the user has denied our requests to access unpartitioned cookies, and our code cannot make use of them.</li>\n</ol>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">doThingsWithCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">\"foo=bar\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// set a cookie</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleCookieAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>document<span class=\"token punctuation\">.</span>hasStorageAccess<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This browser doesn't support the Storage Access API</span>\n    <span class=\"token comment\">// so let's just hope we have access!</span>\n    <span class=\"token function\">doThingsWithCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hasAccess <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">hasStorageAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasAccess<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// We have access to unpartitioned cookies, so let's go</span>\n      <span class=\"token function\">doThingsWithCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Check whether unpartitioned cookie access has been granted</span>\n      <span class=\"token comment\">// to another same-site embed</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> permission <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>permissions<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"storage-access\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"granted\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// If so, you can just call requestStorageAccess() without a user interaction,</span>\n          <span class=\"token comment\">// and it will resolve automatically.</span>\n          <span class=\"token keyword\">await</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">requestStorageAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">doThingsWithCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"prompt\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Need to call requestStorageAccess() after a user interaction</span>\n          btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">await</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">requestStorageAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token function\">doThingsWithCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// If there is an error obtaining storage access.</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error obtaining storage access: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.\n                            Please sign in.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"denied\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// User has denied unpartitioned cookie access, so we'll</span>\n          <span class=\"token comment\">// need to do something else</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Could not access permission state. Error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">doThingsWithCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Again, we'll have to hope we have access!</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> <code>requestStorageAccess()</code> requests are automatically denied unless the embedded content is currently processing a user gesture such as a tap or click (<a href=\"/en-US/docs/Glossary/Transient_activation\">transient activation</a>), or if permission was already granted previously. If permission was not previously granted, they need to be run inside some kind of user gesture-based event handler, as shown above.</p>\n</div>"}}],"toc":[{"text":"Usage notes","id":"usage_notes"},{"text":"Allowing a sandboxed &lt;iframe&gt; to use the API","id":"allowing_a_sandboxed_iframe_to_use_the_api"},{"text":"Checking and requesting storage access","id":"checking_and_requesting_storage_access"}],"summary":"The Storage Access API can be used by embedded cross-site documents to verify whether they have access to unpartitioned cookies and, if not, to request access. We'll briefly look at a common storage access scenario.","popularity":0.0059,"modified":"2023-10-05T20:42:18.000Z","source":{"folder":"en-us/web/api/storage_access_api/using","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/storage_access_api/using/index.md","last_commit_url":"https://github.com/mdn/content/commit/62ec839f7f99538f257933699e7f52afbc01a4b3","filename":"index.md"},"short_title":"Using the Storage Access API","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/Storage_Access_API","title":"Storage Access API"},{"uri":"/en-US/docs/Web/API/Storage_Access_API/Using","title":"Using the Storage Access API"}],"pageTitle":"Using the Storage Access API - Web APIs | MDN","noIndexing":false}}