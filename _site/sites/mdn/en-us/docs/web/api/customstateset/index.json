{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"CustomStateSet","mdn_url":"/en-US/docs/Web/API/CustomStateSet","locale":"en-US","native":"English (US)","browserCompat":["api.CustomStateSet"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Web_components\">Web components</a></strong></li><li><strong><em><a href=\"/en-US/docs/Web/API/CustomStateSet\" aria-current=\"page\"><code>CustomStateSet</code></a></em></strong></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/CustomStateSet/size\"><code>size</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/CustomStateSet/add\"><code>add()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/CustomStateSet/clear\"><code>clear()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/CustomStateSet/delete\"><code>delete()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/CustomStateSet/entries\"><code>entries()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/CustomStateSet/forEach\"><code>forEach()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/CustomStateSet/has\"><code>has()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/CustomStateSet/keys\"><code>keys()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/CustomStateSet/values\"><code>values()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Web Components</summary><ol><li><a href=\"/en-US/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a></li><li><a href=\"/en-US/docs/Web/API/Document/createElement\"><code>Document.createElement()</code></a></li><li><a href=\"/en-US/docs/Web/API/Element/attachShadow\"><code>Element.attachShadow()</code></a></li><li><a href=\"/en-US/docs/Web/API/Element/shadowRoot\"><code>Element.shadowRoot</code></a></li><li><a href=\"/en-US/docs/Web/API/Element/slot\"><code>Element.slot</code></a></li><li><a href=\"/en-US/docs/Web/API/ElementInternals\"><code>ElementInternals</code></a></li><li><a href=\"/en-US/docs/Web/API/Event/composed\"><code>Event.composed</code></a></li><li><a href=\"/en-US/docs/Web/API/Event/composedPath\"><code>Event.composedPath</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLElement/attachInternals\"><code>HTMLElement.attachInternals()</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLSlotElement\"><code>HTMLSlotElement</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLTemplateElement\"><code>HTMLTemplateElement</code></a></li><li><a href=\"/en-US/docs/Web/API/Node/getRootNode\"><code>Node.getRootNode()</code></a></li><li><a href=\"/en-US/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code></a></li><li><a href=\"/en-US/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a></li><li><a href=\"/en-US/docs/Web/API/Window/customElements\"><code>Window.customElements</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</p></div>\n<p>The <strong><code>CustomStateSet</code></strong> interface of the <a href=\"/en-US/docs/Web/API/Document_Object_Model\">Document Object Model</a> stores a list of states for an <a href=\"/en-US/docs/Web/API/Web_components/Using_custom_elements#types_of_custom_element\">autonomous custom element</a>, and allows states to be added and removed from the set.</p>\n<p>The interface can be used to expose the internal states of a custom element, allowing them to be used in CSS selectors by code that uses the element.</p>"}},{"type":"prose","value":{"id":"instance_properties","title":"Instance properties","isH3":false,"content":"<dl>\n  <dt id=\"customstateset.size\"><a href=\"/en-US/docs/Web/API/CustomStateSet/size\"><code>CustomStateSet.size</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Returns the number of values in the <code>CustomStateSet</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":false,"content":"<dl>\n  <dt id=\"customstateset.add\"><a href=\"/en-US/docs/Web/API/CustomStateSet/add\"><code>CustomStateSet.add()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Adds a value to the set, first checking that the <em>value</em> is a <code>&lt;dashed-ident&gt;</code>.</p>\n  </dd>\n  <dt id=\"customstateset.clear\"><a href=\"/en-US/docs/Web/API/CustomStateSet/clear\"><code>CustomStateSet.clear()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Removes all elements from the <code>CustomStateSet</code> object.</p>\n  </dd>\n  <dt id=\"customstateset.delete\"><a href=\"/en-US/docs/Web/API/CustomStateSet/delete\"><code>CustomStateSet.delete()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Removes one value from the <code>CustomStateSet</code> object.</p>\n  </dd>\n  <dt id=\"customstateset.entries\"><a href=\"/en-US/docs/Web/API/CustomStateSet/entries\"><code>CustomStateSet.entries()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Returns a new iterator with the values for each element in the <code>CustomStateSet</code> in insertion order.</p>\n  </dd>\n  <dt id=\"customstateset.foreach\"><a href=\"/en-US/docs/Web/API/CustomStateSet/forEach\"><code>CustomStateSet.forEach()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Executes a provided function for each value in the <code>CustomStateSet</code> object.</p>\n  </dd>\n  <dt id=\"customstateset.has\"><a href=\"/en-US/docs/Web/API/CustomStateSet/has\"><code>CustomStateSet.has()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Returns a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> asserting whether an element is present with the given value.</p>\n  </dd>\n  <dt id=\"customstateset.keys\"><a href=\"/en-US/docs/Web/API/CustomStateSet/keys\"><code>CustomStateSet.keys()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>An alias for <a href=\"/en-US/docs/Web/API/CustomStateSet/values\"><code>CustomStateSet.values()</code></a>.</p>\n  </dd>\n  <dt id=\"customstateset.values\"><a href=\"/en-US/docs/Web/API/CustomStateSet/values\"><code>CustomStateSet.values()</code></a> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></dt>\n  <dd>\n    <p>Returns a new iterator object that yields the values for each element in the <code>CustomStateSet</code> object in insertion order.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>\n  Built in HTML elements can have different <em>states</em>, such as \"enabled\" and \"disabled, \"checked\" and \"unchecked\", \"initial\", \"loading\" and \"ready\".\n  Some of these states are public and can be set or queried using properties/attributes, while others are effectively internal, and cannot be directly set.\n  Whether external or internal, element states can generally be selected and styled using <a href=\"/en-US/docs/Web/CSS/Pseudo-classes\">CSS pseudo-classes</a> as selectors.\n</p>\n<p>\n  The <code>CustomStateSet</code> allows developers to add and delete states for autonomous custom elements (but not elements derived from built-in elements).\n  These states can then be used as as custom state pseudo-class selectors in a similar way to the pseudo-classes for built-in elements.\n</p>"}},{"type":"prose","value":{"id":"setting_custom_element_states","title":"Setting custom element states","isH3":true,"content":"<p>\n  To make the <a href=\"/en-US/docs/Web/API/CustomStateSet\" aria-current=\"page\"><code>CustomStateSet</code></a> available, a custom element must first call <a href=\"/en-US/docs/Web/API/HTMLElement/attachInternals\"><code>HTMLElement.attachInternals()</code></a> in order to attach an <a href=\"/en-US/docs/Web/API/ElementInternals\"><code>ElementInternals</code></a> object.\n  <code>CustomStateSet</code> is then returned by <a href=\"/en-US/docs/Web/API/ElementInternals/states\"><code>ElementInternals.states</code></a>.\n  Note that <code>ElementInternals</code> cannot be attached to a custom element based on a built-in element, so this feature only works for autonomous custom elements (see <a href=\"https://github.com/whatwg/html/issues/5166\" class=\"external\" target=\"_blank\">github.com/whatwg/html/issues/5166</a>).\n</p>\n<p>\n  The <code>CustomStateSet</code> instance is a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_browser_apis\"><code>Set</code>-like object</a> that can hold an ordered set of state values.\n  Each value is a dashed identifier, with the format: <code>--mystatename</code>.\n  Identifiers can be added to the set or deleted.\n  If an identifier is present in the set the particular state is <code>true</code>, while if it is removed the state is <code>false</code>.\n</p>\n<p>Custom elements that have states with more than two values can represent them with multiple boolean states, only one of which is <code>true</code> (present in the <code>CustomStateSet</code>) at a time.</p>\n<p>The states can be used within the custom element but are not directly accessible outside of the custom component.</p>"}},{"type":"prose","value":{"id":"interaction_with_css","title":"Interaction with CSS","isH3":true,"content":"<p>\n  Developers can select a custom element with a specific state using its state <em>custom state pseudo-class</em>.\n  The format of this pseudo-class is <code>:--mystatename</code>, where <code>--mystatename</code> is the state as defined in the element.\n</p>\n<p>The custom state pseudo-class matches the custom element only if the state is <code>true</code> (i.e. if <code>--mystatename</code> is present in the <code>CustomStateSet</code>).</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"labeled_checkbox","title":"Labeled Checkbox","isH3":true,"content":"<p>\n  This example, which is adapted from the specification, demonstrates a custom checkbox element that has an internal \"checked\" state.\n  This is mapped to the <code>--checked</code> custom state, allowing styling to be applied using the <code>:--checked</code> custom state pseudo class.\n</p>\n<h4 id=\"javascript\">JavaScript</h4>\n<p>\n  First we define our class <code>LabeledCheckbox</code> which extends from <code>HTMLElement</code>.\n  In the constructor we call the <code>super()</code> method, leaving most of the \"work\" to <code>connectedCallback()</code>, which is invoked when a custom element is added to the page.\n  The content of the element is defined using a <code>&lt;style&gt;</code> element to be the text <code>[]</code> or <code>[x]</code> followed by a label.\n  What's noteworthy here is that the custom state pseudo class is used to select the text to display: <code>:host(:--checked)::</code>.\n  After the example below, we'll cover what's happening in the snippet in more detail.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">LabeledCheckbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Attach an ElementInternals to get states property</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachInternals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> shadowRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"open\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shadowRoot<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;style&gt;\n        :host {\n          display: block;\n        }\n       :host::before {\n         content: '[ ]';\n         white-space: pre;\n         font-family: monospace;\n       }\n       :host(:--checked)::before { content: '[x]'; background: grey; }\n       &lt;/style&gt;\n       &lt;slot&gt;Label&lt;/slot&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">checked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals<span class=\"token punctuation\">.</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--checked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">checked</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals<span class=\"token punctuation\">.</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--checked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals<span class=\"token punctuation\">.</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--checked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">_onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Toggle the 'checked' property when the element is clicked</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>checked <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>In the <code>LabeledCheckbox</code> class:</p>\n<ul>\n  <li>The <code>connectedCallback()</code> method uses <a href=\"/en-US/docs/Web/API/HTMLElement/attachInternals\" title=\"`this.attachInternals()`\"><code>`this.attachInternals()`</code></a> to attach an <a href=\"/en-US/docs/Web/API/ElementInternals\" title=\"`ElementInternals`\"><code>`ElementInternals`</code></a> object.</li>\n  <li>In the <code>get checked()</code> and <code>set checked()</code> we use <code>ElementInternals.states</code> to get the <code>CustomStateSet</code>.</li>\n  <li>The <code>set checked(flag)</code> method adds the <code>\"--checked\"</code> dashed identifier to the <code>CustomStateSet</code> if the flag is set and delete the identifier if the flag is <code>false</code>.</li>\n  <li>The <code>get checked()</code> method just checks whether the <code>--checked</code> property is defined in the set.</li>\n  <li>The property value is toggled when the element is clicked.</li>\n</ul>\n<p>We then call the <a href=\"/en-US/docs/Web/API/CustomElementRegistry/define\" title=\"define()\"><code>define()</code></a> method on the object returned by <a href=\"/en-US/docs/Web/API/Window/customElements\"><code>Window.customElements</code></a> in order to register the custom element:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"labeled-checkbox\"</span><span class=\"token punctuation\">,</span> LabeledCheckbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"html\">HTML</h4>\n<p>After registering the custom element we can use use the element in HTML as shown:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">html</span></p><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>labeled-checkbox</span><span class=\"token punctuation\">&gt;</span></span>You need to check this<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>labeled-checkbox</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"css\">CSS</h4>\n<p>Finally we use the <code>:--checked</code> custom state pseudo class to select CSS for when the box is checked.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">labeled-checkbox</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> dashed red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">labeled-checkbox:--checked</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> solid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"result\">Result</h4>\n<p>Click the element to see a different border being applied as the checkbox <code>checked</code> state is toggled.</p><div class=\"code-example\" id=\"sect2\"><p class=\"example-header\"></p><iframe class=\"sample-code-frame\" title=\"Labeled Checkbox sample\" id=\"frame_labeled_checkbox\" width=\"100%\" height=\"60\" src=\"http://localhost:5042/en-US/docs/Web/API/CustomStateSet/runner.html?id=labeled_checkbox\" loading=\"lazy\"></iframe></div>"}},{"type":"prose","value":{"id":"non-boolean_internal_states","title":"Non-boolean internal states","isH3":true,"content":"<p>This example shows how to handle the case where the custom element has an internal property with multiple possible value.</p>\n<p>\n  The custom element in this case has a <code>state</code> property with allowed values: \"loading\", \"interactive\" and \"complete\".\n  To make this work, we map each value to its custom state and create code to ensure that only the dashed identifier corresponding to the internal state is set.\n  You can see this in the implementation of the <code>set state()</code> method: we set the internal state, add the dashed identifier for the matching custom state to <code>CustomStateSet</code>, and remove the dashed identifiers associated with all the other values.\n</p>\n<p>Most of the remaining code is similar to the example that demonstrates a single boolean state (we show different text for each state as the user toggles through them).</p>\n<h4 id=\"javascript_2\">JavaScript</h4>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">ManyStateElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Attach an ElementInternals to get states property</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachInternals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">\"loading\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> shadowRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"open\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shadowRoot<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;style&gt;\n        :host {\n          display: block;\n          font-family: monospace;\n        }\n       :host::before { content: '[ unknown ]'; white-space: pre; }\n       :host(:--loading)::before { content: '[ loading ]' }\n       :host(:--interactive)::before { content: '[ interactive ]' }\n       :host(:--complete)::before { content: '[ complete ]' }\n       &lt;/style&gt;\n       &lt;slot&gt;Click me&lt;/slot&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stateName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Set internal state to passed value</span>\n    <span class=\"token comment\">// Add dashed identifier matching state and delete others</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stateName <span class=\"token operator\">==</span> <span class=\"token string\">\"loading\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_state <span class=\"token operator\">=</span> <span class=\"token string\">\"loading\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals<span class=\"token punctuation\">.</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--loading\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals<span class=\"token punctuation\">.</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--interactive\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals<span class=\"token punctuation\">.</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--complete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stateName <span class=\"token operator\">==</span> <span class=\"token string\">\"interactive\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_state <span class=\"token operator\">=</span> <span class=\"token string\">\"interactive\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals<span class=\"token punctuation\">.</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--loading\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals<span class=\"token punctuation\">.</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--interactive\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals<span class=\"token punctuation\">.</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--complete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stateName <span class=\"token operator\">==</span> <span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_state <span class=\"token operator\">=</span> <span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals<span class=\"token punctuation\">.</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--loading\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals<span class=\"token punctuation\">.</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--interactive\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internals<span class=\"token punctuation\">.</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--complete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">_onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Cycle the state when element clicked</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"loading\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">\"interactive\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"interactive\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">\"loading\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"many-state-element\"</span><span class=\"token punctuation\">,</span> ManyStateElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"html_2\">HTML</h4>\n<p>\n  After registering the new element we add it to the HTML.\n  This is similar to the example that demonstrates a single boolean state, except we don't specify a value and use the default value from the slot (<code>&lt;slot&gt;Click me&lt;/slot&gt;</code>).\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">html</span></p><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>many-state-element</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>many-state-element</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"css_2\">CSS</h4>\n<p>\n  In the CSS we use the three custom state pseudo classes to select CSS for each of the internal state values: <code>:--loading</code>, <code>:--interactive</code>, <code>:--complete</code>.\n  Note that the custom element code ensures that only one of these custom states can be defined at a time.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">many-state-element:--loading</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> dotted grey<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">many-state-element:--interactive</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> dashed blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">many-state-element:--complete</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> solid green<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"results\">Results</h4>\n<p>Click the element to see a different border being applied as the state changes.</p><div class=\"code-example\" id=\"sect3\"><p class=\"example-header\"></p><iframe class=\"sample-code-frame\" title=\"Non-boolean internal states sample\" id=\"frame_non-boolean_internal_states\" width=\"100%\" height=\"60\" src=\"http://localhost:5042/en-US/docs/Web/API/CustomStateSet/runner.html?id=non-boolean_internal_states\" loading=\"lazy\"></iframe></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://wicg.github.io/custom-state-pseudo-class/#customstateset","title":"Custom State Pseudo Class"}],"query":"api.CustomStateSet"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.CustomStateSet"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<p><a href=\"/en-US/docs/Web/API/Web_components/Using_custom_elements\">Using custom elements</a></p>"}}],"toc":[{"text":"Instance properties","id":"instance_properties"},{"text":"Instance methods","id":"instance_methods"},{"text":"Description","id":"description"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The CustomStateSet interface of the Document Object Model stores a list of states for an autonomous custom element, and allows states to be added and removed from the set.","popularity":0.0007,"modified":"2023-12-08T11:07:32.000Z","source":{"folder":"en-us/web/api/customstateset","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/customstateset/index.md","last_commit_url":"https://github.com/mdn/content/commit/ce10da0e9d23d241b175d8d68bf93507734b7c48","filename":"index.md"},"short_title":"CustomStateSet","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/CustomStateSet","title":"CustomStateSet"}],"pageTitle":"CustomStateSet - Web APIs | MDN","noIndexing":false}}