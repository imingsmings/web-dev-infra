{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{"macros":[{"id":"macro0","fixable":false,"suggestion":null,"explanation":"/en-US/docs/Web/API/RTCPeerConnection/removetrack_event does not exist","name":"MacroBrokenLinkError","error":{},"errorStack":"Error: /en-US/docs/Web/API/RTCPeerConnection/removetrack_event does not exist\n    at Object.recordNonFatalError (file:///Users/jason/Code/yari/kumascript/src/render.ts:88:13)\n    at Object.smartLink (file:///Users/jason/Code/yari/kumascript/src/api/web.ts:121:29)\n    at eval (\"/Users/jason/Code/yari/kumascript/macros/DOMxRef.ejs\":60:18)\n    at DOMxRef (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/jason/Code/yari/kumascript/src/templates.ts:55:40)\n    at render (file:///Users/jason/Code/yari/kumascript/src/render.ts:181:56)","offset":6,"line":279,"column":7,"macroName":"domxref","sourceContext":"  |     <p>This function is called whenever the WebRTC infrastructure needs you to start the session negotiation process anew. Its job is to create and send an offer, to the callee, asking it to connect with us. See <a href=\"#starting_negotiation\">Starting negotiation</a> to see how we handle this.</p>\n  |   </dd>\n> |   <dt>{{domxref(\"RTCPeerConnection.removetrack_event\", \"onremovetrack\")}}</dt>\n          ^\n  |   <dd>\n  |     <p>This counterpart to <code>ontrack</code> is called to handle the {{domxref(\"MediaStream/removetrack_event\", \"removetrack\")}} event; it's sent to the <code>RTCPeerConnection</code> when the remote peer removes a track from the media being sent. See <a href=\"#handling_the_removal_of_tracks\">Handling the removal of tracks</a>.</p>","fatal":false,"filepath":"/Users/jason/Code/content/files/en-us/web/api/webrtc_api/signaling_and_video_calling/index.md","macroSource":"{{domxref(\"RTCPeerConnection.removetrack_event\", \"onremovetrack\")}}"},{"id":"macro1","fixable":false,"suggestion":null,"explanation":"/en-US/docs/Web/API/HTMLElement/disabled does not exist","name":"MacroBrokenLinkError","error":{},"errorStack":"Error: /en-US/docs/Web/API/HTMLElement/disabled does not exist\n    at Object.recordNonFatalError (file:///Users/jason/Code/yari/kumascript/src/render.ts:88:13)\n    at Object.smartLink (file:///Users/jason/Code/yari/kumascript/src/api/web.ts:121:29)\n    at eval (\"/Users/jason/Code/yari/kumascript/macros/DOMxRef.ejs\":60:18)\n    at DOMxRef (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/jason/Code/yari/kumascript/src/templates.ts:55:40)\n    at render (file:///Users/jason/Code/yari/kumascript/src/render.ts:181:56)","offset":6,"line":522,"column":24,"macroName":"domxref","sourceContext":"  | </ol>\n  | <p>Then for both the incoming and outgoing {{HTMLElement(\"video\")}} elements, we remove their <a href=\"/en-US/docs/Web/HTML/Element/video#src\"><code>src</code></a> and <a href=\"/en-US/docs/Web/HTML/Element/video#srcobject\"><code>srcObject</code></a> attributes using their {{domxref(\"Element.removeAttribute\", \"removeAttribute()\")}} methods. This completes the disassociation of the streams from the video elements.</p>\n> | <p>Finally, we set the {{domxref(\"HTMLElement.disabled\", \"disabled\")}} property to <code>true</code> on the \"Hang Up\" button, making it unclickable while there is no call underway; then we set <code>targetUsername</code> to <code>null</code> since we're no longer talking to anyone. This allows the user to call another user, or to receive an incoming call.</p>\n                           ^\n  | <h4>Dealing with state changes</h4>\n  | <p>There are a number of additional events for which you can set listeners to notify your code of a variety of state changes. We use three of them: {{domxref(\"RTCPeerConnection.iceconnectionstatechange_event\", \"iceconnectionstatechange\")}}, {{domxref(\"RTCPeerConnection.icegatheringstatechange_event\", \"icegatheringstatechange\")}}, and {{domxref(\"RTCPeerConnection.signalingstatechange_event\", \"signalingstatechange\")}}.</p>","fatal":false,"filepath":"/Users/jason/Code/content/files/en-us/web/api/webrtc_api/signaling_and_video_calling/index.md","macroSource":"{{domxref(\"HTMLElement.disabled\", \"disabled\")}}"}]},"title":"Signaling and video calling","mdn_url":"/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling","locale":"en-US","native":"English (US)","summary":"WebRTC allows real-time, peer-to-peer, media exchange between two devices. A connection is established through a discovery and negotiation process called signaling. This tutorial will guide you through building a two-way video-call.","popularity":0.0155,"modified":"2023-12-02T17:29:04.000Z","source":{"folder":"en-us/web/api/webrtc_api/signaling_and_video_calling","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/webrtc_api/signaling_and_video_calling/index.md","last_commit_url":"https://github.com/mdn/content/commit/3b913d8abe0388012ca4bff5b33e64505d68db6e","filename":"index.md"},"short_title":"Signaling and video calling","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/WebRTC_API","title":"WebRTC API"},{"uri":"/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling","title":"Signaling and video calling"}],"pageTitle":"Signaling and video calling - Web APIs | MDN","noIndexing":false,"hash":"373b92a608b36d84b2017aa015f4cc5d26ce884b4dd84dbc1cc224bce72b1b43"}