{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"Creating a Call","mdn_url":"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Creating_a_call","locale":"en-US","native":"English (US)","sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/WebRTC_API\">WebRTC API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/en-US/docs/Web/API/WebRTC_API/Protocols\">Introduction to WebRTC protocols</a></li><li><a href=\"/en-US/docs/Web/API/WebRTC_API/Connectivity\">WebRTC connectivity</a></li><li><a href=\"/en-US/docs/Web/API/WebRTC_API/Perfect_negotiation\">Establishing a connection: The WebRTC perfect negotiation pattern</a></li><li><a href=\"/en-US/docs/Web/API/WebRTC_API/Session_lifetime\">Lifetime of a WebRTC session</a></li><li><a href=\"/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling\">Signaling and video calling</a></li><li><a href=\"/en-US/docs/Web/API/WebRTC_API/Using_data_channels\">Using WebRTC data channels</a></li><li><a href=\"/en-US/docs/Web/API/WebRTC_API/Using_DTMF\">Using DTMF with WebRTC</a></li><li><a href=\"/en-US/docs/Web/API/WebRTC_API/Using_Encoded_Transforms\">Using WebRTC Encoded Transforms</a></li><li><a href=\"/en-US/docs/Web/API/WebRTC_API#interoperability\">WebRTC API</a></li><li><a href=\"/en-US/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample\">A simple RTCDataChannel sample</a></li><li><a href=\"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs\">Building an Internet-Connected Phone with PeerJS</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnectionIceEvent\"><code>RTCPeerConnectionIceEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnectionIceErrorEvent\"><code>RTCPeerConnectionIceErrorEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCCertificate\"><code>RTCCertificate</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDtlsTransport\"><code>RTCDtlsTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCTrackEvent\"><code>RTCTrackEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCSctpTransport\"><code>RTCSctpTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannelEvent\"><code>RTCDataChannelEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDTMFSender\"><code>RTCDTMFSender</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDTMFToneChangeEvent\"><code>RTCDTMFToneChangeEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCStatsReport\"><code>RTCStatsReport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCErrorEvent\"><code>RTCErrorEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpScriptTransform\"><code>RTCRtpScriptTransform</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpScriptTransformer\"><code>RTCRtpScriptTransformer</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCEncodedVideoFrame\"><code>RTCEncodedVideoFrame</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCEncodedAudioFrame\"><code>RTCEncodedAudioFrame</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCTransformEvent\"><code>RTCTransformEvent</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Properties</summary><ol><li><a href=\"/en-US/docs/Web/API/Navigator/mediaDevices\"><code>Navigator.mediaDevices</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpReceiver/transform\"><code>RTCRtpReceiver.transform</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpSender/transform\"><code>RTCRtpSender.transform</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Events</summary><ol><li><a href=\"/en-US/docs/Web/API/DedicatedWorkerGlobalScope/rtctransform_event\"><code>DedicatedWorkerGlobalScope</code>: <code>rtctransform</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDTMFSender/tonechange_event\"><code>RTCDTMFSender</code>: <code>tonechange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannel/bufferedamountlow_event\"><code>RTCDataChannel</code>: <code>bufferedamountlow</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannel/close_event\"><code>RTCDataChannel</code>: <code>close</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannel/closing_event\"><code>RTCDataChannel</code>: <code>closing</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannel/error_event\"><code>RTCDataChannel</code>: <code>error</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannel/message_event\"><code>RTCDataChannel</code>: <code>message</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannel/open_event\"><code>RTCDataChannel</code>: <code>open</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDtlsTransport/error_event\"><code>RTCDtlsTransport</code>: <code>error</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDtlsTransport/statechange_event\"><code>RTCDtlsTransport</code>: <code>statechange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCIceTransport/error_event\"><code>RTCIceTransport</code>: <code>error</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCIceTransport/gatheringstatechange_event\"><code>RTCIceTransport</code>: <code>gatheringstatechange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCIceTransport/selectedcandidatepairchange_event\"><code>RTCIceTransport</code>: <code>selectedcandidatepairchange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCIceTransport/statechange_event\"><code>RTCIceTransport</code>: <code>statechange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/connectionstatechange_event\"><code>RTCPeerConnection</code>: <code>connectionstatechange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/datachannel_event\"><code>RTCPeerConnection</code>: <code>datachannel</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/icecandidate_event\"><code>RTCPeerConnection</code>: <code>icecandidate</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/icecandidateerror_event\"><code>RTCPeerConnection</code>: <code>icecandidateerror</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/iceconnectionstatechange_event\"><code>RTCPeerConnection</code>: <code>iceconnectionstatechange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event\"><code>RTCPeerConnection</code>: <code>icegatheringstatechange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/negotiationneeded_event\"><code>RTCPeerConnection</code>: <code>negotiationneeded</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/signalingstatechange_event\"><code>RTCPeerConnection</code>: <code>signalingstatechange</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection/track_event\"><code>RTCPeerConnection</code>: <code>track</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCSctpTransport/error_event\"><code>RTCSctpTransport</code>: <code>error</code></a></li></ol></details></li></ol>","sidebarMacro":"DefaultAPISidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Create_a_peer_connection\"><span class=\"button-wrap\"> Previous </span></a></li>\n    \n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Answer_a_call\"><span class=\"button-wrap\"> Next  </span></a></li>\n</ul>\n<p>Exciting times â€” now you're going to give your users the ability to create calls.</p>\n<ol>\n  <li>First of all, get a reference to the \"Call\" button that's defined in the HTML, by adding the following to the bottom of <code>script.js</code>:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> callBtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".call-btn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>When a caller clicks \"Call\" you'll want to ask them for the peer ID of the peer they want to call (which we will store in the <code>code</code> variable in <code>getStreamCode()</code>) and then you'll want to create a connection with that code. Add the following below your previous code:\n    <div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>callBtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getStreamCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">connectPeers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> call <span class=\"token operator\">=</span> <span class=\"token function\">peer</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>localStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A</span>\n\n  call<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stream\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// B</span>\n    window<span class=\"token punctuation\">.</span>remoteAudio<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span> <span class=\"token comment\">// C</span>\n    window<span class=\"token punctuation\">.</span>remoteAudio<span class=\"token punctuation\">.</span>autoplay <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// D</span>\n    window<span class=\"token punctuation\">.</span>peerStream <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span> <span class=\"token comment\">//E</span>\n    <span class=\"token function\">showConnectedContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//F    });</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>Let's walk through this code:\n    <ul>\n      <li><code>const call = peer.call(code, window.localStream)</code>: This will create a call with the <code>code</code> and <code>window.localStream</code> we've previously assigned. Note that the <code>localStream</code> will be the user's <code>localStream</code>. So for caller A it'll be their stream &amp; for B, their own stream.</li>\n      <li><code>call.on('stream', (stream) =&gt; {</code> : peerJS gives us a <code>stream</code> event which you can use on the <code>call</code> that you've created. When a call starts streaming, you need to ensure that the remote stream coming from the call is assigned to the correct HTML elements and window, this is where you'll do that.</li>\n      <li>The anonymous function takes a <code>MediaStream</code> object as an argument, which you then have to set to your window's HTML like you've done before. Here we get your remote <code>&lt;audio&gt;</code> element and assign the stream passed to the function to the <code>srcObject</code> property.</li>\n      <li>Ensure the element's <code>autoplay</code> attribute is also set to <code>true</code>.</li>\n      <li>Ensure that the window's <code>peerStream</code> is set to the stream passed to the function.</li>\n      <li>Finally you want to show the correct content, so call the <code>showConnectedContent()</code> function you created earlier.</li>\n    </ul>\n  </li>\n  <li>\n    To test this out, open <code>localhost:8000</code> in two browser windows and click Call inside one of them. You should see this:\n    \n    <img src=\"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Creating_a_call/screens_side_by_side.png\" alt=\"Two screens side by side both A cream background with the words 'phone a friend' in bold, dark green font as the heading. The first screen has 'Your device ID is: 3b77' and the second 'Your device ID is: 2doa', is immediately below the title and 'please use headphones!' below that. Following on, a big dark green button with 'Call' written in the same cream color of the background. The second screen has a browser dialogue that asks for a peer id.\" width=\"1400\" height=\"875\" loading=\"lazy\">\n    If you submit the other peer's ID, the call will be connected!\n  </li>\n</ol>\n<p>This is all working so far, but we need to give the other browser the chance to answer or decline the call We'll do that next.</p><ul class=\"prev-next\">\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Create_a_peer_connection\"><span class=\"button-wrap\"> Previous </span></a></li>\n    \n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Answer_a_call\"><span class=\"button-wrap\"> Next  </span></a></li>\n</ul>"}}],"toc":[],"summary":"Exciting times â€” now you're going to give your users the ability to create calls.","popularity":0.0021,"modified":"2023-01-21T12:18:52.000Z","source":{"folder":"en-us/web/api/webrtc_api/build_a_phone_with_peerjs/connect_peers/creating_a_call","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/webrtc_api/build_a_phone_with_peerjs/connect_peers/creating_a_call/index.md","last_commit_url":"https://github.com/mdn/content/commit/65cd9754ed95f116b641c68cad80f14ecf580b41","filename":"index.md"},"short_title":"Creating a Call","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/WebRTC_API","title":"WebRTC API"},{"uri":"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs","title":"Building an Internet-Connected Phone with PeerJS"},{"uri":"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers","title":"Connecting the peers"},{"uri":"/en-US/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs/Connect_peers/Creating_a_call","title":"Creating a Call"}],"pageTitle":"Creating a Call - Web APIs | MDN","noIndexing":false}}