{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{"macros":[{"id":"macro0","fixable":false,"suggestion":null,"explanation":"/en-US/docs/Web/API/MediaConstraints does not exist","name":"MacroBrokenLinkError","error":{},"errorStack":"Error: /en-US/docs/Web/API/MediaConstraints does not exist\n    at Object.recordNonFatalError (file:///Users/jason/Code/yari/kumascript/src/render.ts:88:13)\n    at Object.smartLink (file:///Users/jason/Code/yari/kumascript/src/api/web.ts:121:29)\n    at eval (\"/Users/jason/Code/yari/kumascript/macros/DOMxRef.ejs\":60:18)\n    at DOMxRef (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/jason/Code/yari/kumascript/src/templates.ts:55:40)\n    at render (file:///Users/jason/Code/yari/kumascript/src/render.ts:181:56)","offset":6,"line":93,"column":36,"macroName":"domxref","sourceContext":"  |   <dt><code>mediaConstraints</code></dt>\n  |   <dd>\n> |     <p>An object conforming to the {{domxref(\"MediaConstraints\")}} dictionary specifying the constraints to use when starting the connection. We want an audio-only connection, so <code>video</code> is <code>false</code>, while <code>audio</code> is <code>true</code>.</p>\n                                       ^\n  |   </dd>\n  |   <dt><code>offerOptions</code></dt>","fatal":false,"filepath":"/Users/jason/Code/content/files/en-us/web/api/webrtc_api/using_dtmf/index.md","macroSource":"{{domxref(\"MediaConstraints\")}}"},{"id":"macro1","fixable":false,"suggestion":null,"explanation":"/en-US/docs/Web/API/RTCPeerConnection/createDTMFSender does not exist","name":"MacroBrokenLinkError","error":{},"errorStack":"Error: /en-US/docs/Web/API/RTCPeerConnection/createDTMFSender does not exist\n    at Object.recordNonFatalError (file:///Users/jason/Code/yari/kumascript/src/render.ts:88:13)\n    at Object.smartLink (file:///Users/jason/Code/yari/kumascript/src/api/web.ts:121:29)\n    at eval (\"/Users/jason/Code/yari/kumascript/macros/DOMxRef.ejs\":60:18)\n    at DOMxRef (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/jason/Code/yari/kumascript/src/templates.ts:55:40)\n    at render (file:///Users/jason/Code/yari/kumascript/src/render.ts:181:56)","offset":6,"line":181,"column":66,"macroName":"domxref","sourceContext":"  | <p>After setting <code>audioTracks</code> to be a list of the audio tracks on the stream from the user's microphone, it's time to add the media to the caller's <code>RTCPeerConnection</code>. If <code>addTrack()</code> is available on the <code>RTCPeerConnection</code>, we add each of the stream's audio tracks, one by one, to the connection using {{domxref(\"RTCPeerConnection.addTrack()\")}}. Otherwise we call {{domxref(\"RTCPeerConnection.addStream()\")}} to add the stream to the call as a single unit.</p>\n  | <p>Next we look to see if the {{domxref(\"RTCPeerConnection.getSenders()\")}} method is implemented. If it is, we call it on <code>callerPC</code> and get the first entry in the returned list of senders; this is the {{domxref(\"RTCRtpSender\")}} responsible for transmitting data for the first audio track on the call (which is the track we'll send DTMF over). We then obtain the <code>RTCRtpSender</code>'s {{domxref(\"RTCRtpSender.dtmf\", \"dtmf\")}} property, which is an {{domxref(\"RTCDTMFSender\")}} object that can send DTMF on the connection, from the caller to the receiver.</p>\n> | <p>If <code>getSenders()</code> isn't available, we instead call {{domxref(\"RTCPeerConnection.createDTMFSender()\")}} to get the <code>RTCDTMFSender</code> object. Although this method is obsolete, this example supports it as a fallback to let older browsers (and those not yet updated to support the current WebRTC DTMF API) run the example.</p>\n                                                                     ^\n  | <p>Finally, we set the DTMF sender's {{domxref(\"RTCDTMFSender.tonechange_event\", \"ontonechange\")}} event handler so we get notified each time a DTMF tone finishes playing.</p>\n  | <p>You can find the log function at the bottom of the documentation.</p>","fatal":false,"filepath":"/Users/jason/Code/content/files/en-us/web/api/webrtc_api/using_dtmf/index.md","macroSource":"{{domxref(\"RTCPeerConnection.createDTMFSender()\")}}"},{"id":"macro2","fixable":false,"suggestion":null,"explanation":"/en-US/docs/Web/API/RTCPeerConnection/getTracks does not exist","name":"MacroBrokenLinkError","error":{},"errorStack":"Error: /en-US/docs/Web/API/RTCPeerConnection/getTracks does not exist\n    at Object.recordNonFatalError (file:///Users/jason/Code/yari/kumascript/src/render.ts:88:13)\n    at Object.smartLink (file:///Users/jason/Code/yari/kumascript/src/api/web.ts:121:29)\n    at eval (\"/Users/jason/Code/yari/kumascript/macros/DOMxRef.ejs\":60:18)\n    at DOMxRef (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/jason/Code/yari/kumascript/src/templates.ts:55:40)\n    at render (file:///Users/jason/Code/yari/kumascript/src/render.ts:181:56)","offset":6,"line":211,"column":260,"macroName":"domxref","sourceContext":"  | <p>The <a href=\"/en-US/docs/Web/API/RTCDTMFSender/tonechange_event\"><code>tonechange</code></a> event is used both to indicate when an individual tone has played and when all tones have finished playing. The event's {{domxref(\"RTCDTMFToneChangeEvent.tone\", \"tone\")}} property is a string indicating which tone just finished playing. If all tones have finished playing, <code>tone</code> is an empty string; when that's the case, {{domxref(\"RTCDTMFSender.toneBuffer\")}} is empty.</p>\n  | <p>In this example, we log to the screen which tone just finished playing. In a more advanced application, you might update the user interface, for example, to indicate which note is currently playing.</p>\n> | <p>On the other hand, if the tone buffer is empty, our example is designed to disconnect the call. This is done by stopping each stream on both the caller and the receiver by iterating over each <code>RTCPeerConnection</code>'s track list (as returned by its {{domxref(\"RTCPeerConnection.getTracks\", \"getTracks()\")}} method) and calling each track's {{domxref(\"MediaStreamTrack.stop\", \"stop()\")}} method.</p>\n                                                                                                                                                                                                                                                                       ^\n  | <p>Once both the caller's and the receiver's media tracks are all stopped, we pause the {{HTMLElement(\"audio\")}} element and set its {{domxref(\"HTMLMediaElement.srcObject\", \"srcObject\")}} to <code>null</code>. This detaches the audio stream from the {{HTMLElement(\"audio\")}} element.</p>\n  | <p>Then, finally, each <code>RTCPeerConnection</code> is closed by calling its {{domxref(\"RTCPeerConnection.close\", \"close()\")}} method.</p>","fatal":false,"filepath":"/Users/jason/Code/content/files/en-us/web/api/webrtc_api/using_dtmf/index.md","macroSource":"{{domxref(\"RTCPeerConnection.getTracks\", \"getTracks()\")}}"},{"id":"macro3","fixable":false,"suggestion":null,"explanation":"/en-US/docs/Web/API/RTCTrackEvent/stream does not exist","name":"MacroBrokenLinkError","error":{},"errorStack":"Error: /en-US/docs/Web/API/RTCTrackEvent/stream does not exist\n    at Object.recordNonFatalError (file:///Users/jason/Code/yari/kumascript/src/render.ts:88:13)\n    at Object.smartLink (file:///Users/jason/Code/yari/kumascript/src/api/web.ts:121:29)\n    at eval (\"/Users/jason/Code/yari/kumascript/macros/DOMxRef.ejs\":60:18)\n    at DOMxRef (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/jason/Code/yari/kumascript/src/templates.ts:55:40)\n    at render (file:///Users/jason/Code/yari/kumascript/src/render.ts:181:56)","offset":6,"line":321,"column":48,"macroName":"domxref","sourceContext":"  | </pre>\n  | <p>The <code>track</code> event includes a {{domxref(\"RTCTrackEvent.streams\", \"streams\")}} property containing an array of the streams the track is a member of (one track can be part of many streams). We take the first stream and attach it to the {{HTMLElement(\"audio\")}} element.</p>\n> | <p>The <code>addstream</code> event includes a {{domxref(\"RTCTrackEvent.stream\", \"stream\")}} property specifying a single stream added to the track. We attach it to the <code>&#x3C;audio></code> element.</p>\n                                                   ^\n  | <h4>Logging</h4>\n  | <p>A simple <code>log()</code> function is used throughout the code to append HTML to a {{HTMLElement(\"div\")}} box for displaying status and errors to the user.</p>","fatal":false,"filepath":"/Users/jason/Code/content/files/en-us/web/api/webrtc_api/using_dtmf/index.md","macroSource":"{{domxref(\"RTCTrackEvent.stream\", \"stream\")}}"}]},"title":"Using DTMF with WebRTC","mdn_url":"/en-US/docs/Web/API/WebRTC_API/Using_DTMF","locale":"en-US","native":"English (US)","summary":"In order to more fully support audio/video conferencing, WebRTC supports sending DTMF to the remote peer on an RTCPeerConnection. This article offers a brief high-level overview of how DTMF works over WebRTC, then provides a guide for everyday developers about how to send DTMF over an RTCPeerConnection. The DTMF system is often referred to as \"touch tone,\" after an old trade name for the system.","popularity":0.0017,"modified":"2023-07-07T07:19:19.000Z","source":{"folder":"en-us/web/api/webrtc_api/using_dtmf","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/webrtc_api/using_dtmf/index.md","last_commit_url":"https://github.com/mdn/content/commit/acfe8c9f1f4145f77653a2bc64a9744b001358dc","filename":"index.md"},"short_title":"Using DTMF with WebRTC","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/WebRTC_API","title":"WebRTC API"},{"uri":"/en-US/docs/Web/API/WebRTC_API/Using_DTMF","title":"Using DTMF with WebRTC"}],"pageTitle":"Using DTMF with WebRTC - Web APIs | MDN","noIndexing":false,"hash":"f77a1a6e8dffa8bc977e4739399ad5c97ff1f2e6afdc4774f1652e69251728f3"}