{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"RTCEncodedAudioFrame: getMetadata() method","mdn_url":"/en-US/docs/Web/API/RTCEncodedAudioFrame/getMetadata","locale":"en-US","native":"English (US)","browserCompat":["api.RTCEncodedAudioFrame.getMetadata"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/WebRTC_API\">WebRTC API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/RTCEncodedAudioFrame\"><code>RTCEncodedAudioFrame</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/RTCEncodedAudioFrame/data\"><code>data</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCEncodedAudioFrame/timestamp\"><code>timestamp</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><em><code>getMetadata()</code> </em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for WebRTC</summary><ol><li><a href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li><li><a href=\"/en-US/docs/Web/API/Navigator/mediaDevices\"><code>Navigator.mediaDevices</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCCertificate\"><code>RTCCertificate</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDTMFSender\"><code>RTCDTMFSender</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDTMFToneChangeEvent\"><code>RTCDTMFToneChangeEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDataChannelEvent\"><code>RTCDataChannelEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCDtlsTransport\"><code>RTCDtlsTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCEncodedVideoFrame\"><code>RTCEncodedVideoFrame</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCErrorEvent\"><code>RTCErrorEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCIceTransport\"><code>RTCIceTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnectionIceErrorEvent\"><code>RTCPeerConnectionIceErrorEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCPeerConnectionIceEvent\"><code>RTCPeerConnectionIceEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpReceiver/transform\"><code>RTCRtpReceiver.transform</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpScriptTransform\"><code>RTCRtpScriptTransform</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpScriptTransformer\"><code>RTCRtpScriptTransformer</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpSender/transform\"><code>RTCRtpSender.transform</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCSctpTransport\"><code>RTCSctpTransport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCStatsReport\"><code>RTCStatsReport</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCTrackEvent\"><code>RTCTrackEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/RTCTransformEvent\"><code>RTCTransformEvent</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>getMetadata()</code></strong> method of the <a href=\"/en-US/docs/Web/API/RTCEncodedAudioFrame\"><code>RTCEncodedAudioFrame</code></a> interface returns an object containing the metadata associated with the frame.</p>\n<p>This includes information about the frame, including the audio encoding used, the synchronization source and contributing sources, and the sequence number (for incoming frames).</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<p>None.</p>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>An object with the following properties:</p>\n<dl>\n  <dt id=\"synchronizationsource\"><a href=\"#synchronizationsource\"><code>synchronizationSource</code></a></dt>\n  <dd>\n    <p>\n      A positive integer value indicating synchronization source (\"ssrc\") of the stream of RTP packets that are described by this frame.\n      A source might be something like a microphone, or a mixer application that combines multiple sources.\n      All packets from the same source share the same time source and sequence space, and so can be ordered relative to each other.\n      Note that two frames with the same value refer to the same source.\n    </p>\n  </dd>\n  <dt id=\"payloadtype\"><a href=\"#payloadtype\"><code>payloadType</code></a></dt>\n  <dd>\n    <p>\n      A positive integer value in the range from 0 to 127 that describes the format of the RTP payload.\n      The mappings of values to formats is defined in RFC3550, and more specifically <a href=\"https://www.rfc-editor.org/rfc/rfc3551#section-6\" class=\"external\" target=\"_blank\">Section 6: Payload Type Definitions</a> of RFC3551.\n    </p>\n  </dd>\n  <dt id=\"contributingsources\"><a href=\"#contributingsources\"><code>contributingSources</code></a></dt>\n  <dd>\n    <p>\n      An <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of sources (ssrc) that have contributed to the frame.\n      Consider the case of a conferencing application that combines audio from multiple users.\n      The <code>synchronizationSource</code> would include the ssrc of the application, while <code>contributingSources</code> would include the ssrc values of all the individual audio sources.\n    </p>\n  </dd>\n  <dt id=\"sequencenumber\"><a href=\"#sequencenumber\"><code>sequenceNumber</code></a></dt>\n  <dd>\n    <p>\n      The sequence number of an incoming audio frame (not used for outgoing frames) that can be used for reconstructing the original send-order of frames.\n      This is number between 0 and 32767 .\n      Note that while numbers are allocated sequentially when sent, they will overflow at 32767 and restart back at 0.\n      Therefore to compare two frame sequence numbers, in order to determine whether one is assumed to be after another, you must use <a href=\"https://en.wikipedia.org/wiki/Serial_number_arithmetic\" class=\"external\" target=\"_blank\">serial number arithmetic</a>.<!-- [RFC1982] -->\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>This example <a href=\"/en-US/docs/Web/API/WebRTC_API/Using_Encoded_Transforms\">WebRTC encoded transform</a> implementation shows how you might get the frame metadata in a <code>transform()</code> function and log it.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rtctransform\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">async</span> transform <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">encodedFrame<span class=\"token punctuation\">,</span> controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token comment\">// Get the metadata and log</span>\n      <span class=\"token keyword\">const</span> frameMetaData <span class=\"token operator\">=</span> encodedFrame<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>frameMetaData<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// Enqueue the frame without modifying</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>encodedFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  event<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">.</span>readable\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipeThrough</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipeTo</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">.</span>writable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  The resulting object from a local microphone might look like the one shown below.\n  Note that there are no contributing sources because there is just one source, and no <code>sequenceNumber</code> because this is an outgoing frame.\n</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"payloadType\"</span><span class=\"token operator\">:</span> <span class=\"token number\">109</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"synchronizationSource\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1876443470</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webrtc-encoded-transform/#dom-rtcencodedaudioframe-getmetadata","title":"WebRTC Encoded Transform"}],"query":"api.RTCEncodedAudioFrame.getMetadata"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.RTCEncodedAudioFrame.getMetadata"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Using_Encoded_Transforms\">Using WebRTC Encoded Transforms</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The getMetadata() method of the RTCEncodedAudioFrame interface returns an object containing the metadata associated with the frame.","popularity":0,"modified":"2023-09-08T02:40:33.000Z","source":{"folder":"en-us/web/api/rtcencodedaudioframe/getmetadata","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/rtcencodedaudioframe/getmetadata/index.md","last_commit_url":"https://github.com/mdn/content/commit/4799bed9382147f0b0ff642a130a1c12ed59a28e","filename":"index.md"},"short_title":"getMetadata()","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/RTCEncodedAudioFrame","title":"RTCEncodedAudioFrame"},{"uri":"/en-US/docs/Web/API/RTCEncodedAudioFrame/getMetadata","title":"getMetadata()"}],"pageTitle":"RTCEncodedAudioFrame: getMetadata() method - Web APIs | MDN","noIndexing":false}}