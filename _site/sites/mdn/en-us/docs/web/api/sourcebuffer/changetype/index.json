{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{"macros":[{"id":"macro0","fixable":false,"suggestion":null,"explanation":"/en-US/docs/Web/API/MediaSource/sourceopen_event does not exist","name":"MacroBrokenLinkError","error":{},"errorStack":"Error: /en-US/docs/Web/API/MediaSource/sourceopen_event does not exist\n    at Object.recordNonFatalError (file:///Users/jason/Code/yari/kumascript/src/render.ts:88:13)\n    at Object.smartLink (file:///Users/jason/Code/yari/kumascript/src/api/web.ts:121:29)\n    at eval (\"/Users/jason/Code/yari/kumascript/macros/DOMxRef.ejs\":60:18)\n    at DOMxRef (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/jason/Code/yari/kumascript/src/templates.ts:55:40)\n    at render (file:///Users/jason/Code/yari/kumascript/src/render.ts:181:56)","offset":8,"line":66,"column":29,"macroName":"domxref","sourceContext":"  |   If the {{domxref(\"MediaSource.readyState\", \"readyState\")}} property of the parent {{domxref(\"MediaSource\")}} is set to <code>\"ended\"</code>, calling <code>changeType()</code>\n  |   will set the <code>readyState</code> property to<code>\"open\"</code> and\n> |   fire a simple event named {{domxref(\"MediaSource.sourceopen_event\", \"sourceopen\")}} at the parent media source.\n                                ^\n  | </p>\n  | <h2>Browser compatibility</h2>{{Compat}}","fatal":false,"filepath":"/Users/jason/Code/content/files/en-us/web/api/sourcebuffer/changetype/index.md","macroSource":"{{domxref(\"MediaSource.sourceopen_event\", \"sourceopen\")}}"}]},"title":"SourceBuffer: changeType() method","mdn_url":"/en-US/docs/Web/API/SourceBuffer/changeType","locale":"en-US","native":"English (US)","browserCompat":["api.SourceBuffer.changeType"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/Media_Source_Extensions_API\">Media Source Extensions API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/SourceBuffer/appendWindowEnd\"><code>appendWindowEnd</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer/appendWindowStart\"><code>appendWindowStart</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer/audioTracks\"><code>audioTracks</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer/buffered\"><code>buffered</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer/mode\"><code>mode</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer/textTracks\"><code>textTracks</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer/timestampOffset\"><code>timestampOffset</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer/updating\"><code>updating</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer/videoTracks\"><code>videoTracks</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><a href=\"/en-US/docs/Web/API/SourceBuffer/abort\"><code>abort()</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer/appendBuffer\"><code>appendBuffer()</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer/appendBufferAsync\"><code>appendBufferAsync()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li><li><em><code>changeType()</code> </em></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer/remove\"><code>remove()</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBuffer/removeAsync\"><code>removeAsync()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr><abbr class=\"icon icon-nonstandard\" title=\"Non-standard. Check cross-browser support before using.\">\n    <span class=\"visually-hidden\">Non-standard</span>\n</abbr></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Inheritance:</summary><ol><li><a href=\"/en-US/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for Media Source Extensions</summary><ol><li><a href=\"/en-US/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality\"><code>HTMLVideoElement.getVideoPlaybackQuality()</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSource\"><code>MediaSource</code></a></li><li><a href=\"/en-US/docs/Web/API/MediaSourceHandle\"><code>MediaSourceHandle</code></a></li><li><a href=\"/en-US/docs/Web/API/SourceBufferList\"><code>SourceBufferList</code></a></li><li><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>TextTrack.sourceBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/VideoPlaybackQuality\"><code>VideoPlaybackQuality</code></a></li><li><a href=\"/en-US/docs/Web/API/VideoTrack/sourceBuffer\"><code>VideoTrack.sourceBuffer</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>\n  The <strong><code>changeType()</code></strong> method of the\n  <a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> interface sets the MIME type that future calls to\n  <a href=\"/en-US/docs/Web/API/SourceBuffer/appendBuffer\" title=\"appendBuffer()\"><code>appendBuffer()</code></a> should expect the new media\n  data to conform to. This makes it possible to change codecs or container type\n  mid-stream.\n</p>\n<p>\n  One scenario in which this is helpful is to support adapting the media source to\n  changing bandwidth availability, by transitioning from one codec to another as resource\n  constraints change.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">changeType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"type\"><a href=\"#type\"><code>type</code></a></dt>\n  <dd>\n    <p>\n      A string specifying the MIME type that future buffers will conform\n      to.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>None (<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>).</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>Thrown if the specified string is empty, rather than indicating a valid MIME type.</p>\n  </dd>\n  <dt id=\"invalidstateerror\"><a href=\"#invalidstateerror\"><code>InvalidStateError</code></a> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if the <a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> is not a member of the parent media source's\n      <a href=\"/en-US/docs/Web/API/MediaSource/sourceBuffers\" title=\"sourceBuffers\"><code>sourceBuffers</code></a> list, or the buffer's\n      <a href=\"/en-US/docs/Web/API/SourceBuffer/updating\" title=\"updating\"><code>updating</code></a> property indicates that a previously\n      queued <a href=\"/en-US/docs/Web/API/SourceBuffer/appendBuffer\" title=\"appendBuffer()\"><code>appendBuffer()</code></a> or\n      <a href=\"/en-US/docs/Web/API/SourceBuffer/remove\" title=\"remove()\"><code>remove()</code></a> is still being processed.\n    </p>\n  </dd>\n  <dt id=\"notsupportederror\"><a href=\"#notsupportederror\"><code>NotSupportedError</code></a> <a href=\"/en-US/docs/Web/API/DOMException\"><code>DOMException</code></a></dt>\n  <dd>\n    <p>\n      Thrown if the specified MIME type is not supported, or is not supported with the types of\n      <a href=\"/en-US/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> objects present in the\n      <a href=\"/en-US/docs/Web/API/MediaSource/sourceBuffers\"><code>MediaSource.sourceBuffers</code></a> list.\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"usage_notes","title":"Usage notes","isH3":false,"content":"<p>\n  If the <a href=\"/en-US/docs/Web/API/MediaSource/readyState\" title=\"readyState\"><code>readyState</code></a> property of the parent <a href=\"/en-US/docs/Web/API/MediaSource\"><code>MediaSource</code></a> is set to <code>\"ended\"</code>, calling <code>changeType()</code>\n  will set the <code>readyState</code> property to<code>\"open\"</code> and\n  fire a simple event named <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\" data-flaw-src=\"{{domxref(&quot;MediaSource.sourceopen_event&quot;, &quot;sourceopen&quot;)}}\"><code>sourceopen</code></a> at the parent media source.\n</p>"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.SourceBuffer.changeType"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/MediaSource\"><code>MediaSource</code></a></li>\n  <li><a href=\"/en-US/docs/Web/API/SourceBufferList\"><code>SourceBufferList</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Usage notes","id":"usage_notes"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The changeType() method of the\n  SourceBuffer interface sets the MIME type that future calls to\n  appendBuffer() should expect the new media\n  data to conform to. This makes it possible to change codecs or container type\n  mid-stream.","popularity":0.0005,"modified":"2023-04-08T06:00:31.000Z","source":{"folder":"en-us/web/api/sourcebuffer/changetype","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/sourcebuffer/changetype/index.md","last_commit_url":"https://github.com/mdn/content/commit/f2f9346c0c0e9f6676f2df9f1850933e274401de","filename":"index.md"},"short_title":"changeType()","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/SourceBuffer","title":"SourceBuffer"},{"uri":"/en-US/docs/Web/API/SourceBuffer/changeType","title":"changeType()"}],"pageTitle":"SourceBuffer: changeType() method - Web APIs | MDN","noIndexing":false}}