{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"GPUCanvasContext: configure() method","mdn_url":"/en-US/docs/Web/API/GPUCanvasContext/configure","locale":"en-US","native":"English (US)","browserCompat":["api.GPUCanvasContext.configure"],"sidebarHTML":"<ol><li><strong><a href=\"/en-US/docs/Web/API/WebGPU_API\">WebGPU API</a></strong></li><li><strong><a href=\"/en-US/docs/Web/API/GPUCanvasContext\"><code>GPUCanvasContext</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Instance properties</summary><ol><li><a href=\"/en-US/docs/Web/API/GPUCanvasContext/canvas\"><code>canvas</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Instance methods</summary><ol><li><em><code>configure()</code> <abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></em></li><li><a href=\"/en-US/docs/Web/API/GPUCanvasContext/getCurrentTexture\"><code>getCurrentTexture()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li><li><a href=\"/en-US/docs/Web/API/GPUCanvasContext/unconfigure\"><code>unconfigure()</code></a><abbr class=\"icon icon-experimental\" title=\"Experimental. Expect behavior to change in the future.\">\n    <span class=\"visually-hidden\">Experimental</span>\n</abbr></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Related pages for WebGPU API</summary><ol><li><a href=\"/en-US/docs/Web/API/GPU\"><code>GPU</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUAdapter\"><code>GPUAdapter</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUAdapterInfo\"><code>GPUAdapterInfo</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUBindGroup\"><code>GPUBindGroup</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUBindGroupLayout\"><code>GPUBindGroupLayout</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUBuffer\"><code>GPUBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUCommandBuffer\"><code>GPUCommandBuffer</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUCommandEncoder\"><code>GPUCommandEncoder</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUCompilationInfo\"><code>GPUCompilationInfo</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUCompilationMessage\"><code>GPUCompilationMessage</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUComputePassEncoder\"><code>GPUComputePassEncoder</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUComputePipeline\"><code>GPUComputePipeline</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUDevice\"><code>GPUDevice</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUDeviceLostInfo\"><code>GPUDeviceLostInfo</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUError\"><code>GPUError</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUExternalTexture\"><code>GPUExternalTexture</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUInternalError\"><code>GPUInternalError</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUOutOfMemoryError\"><code>GPUOutOfMemoryError</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUPipelineError\"><code>GPUPipelineError</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUPipelineLayout\"><code>GPUPipelineLayout</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUQuerySet\"><code>GPUQuerySet</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUQueue\"><code>GPUQueue</code></a></li><li><a href=\"/en-US/docs/Web/API/GPURenderBundle\"><code>GPURenderBundle</code></a></li><li><a href=\"/en-US/docs/Web/API/GPURenderBundleEncoder\"><code>GPURenderBundleEncoder</code></a></li><li><a href=\"/en-US/docs/Web/API/GPURenderPassEncoder\"><code>GPURenderPassEncoder</code></a></li><li><a href=\"/en-US/docs/Web/API/GPURenderPipeline\"><code>GPURenderPipeline</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUSampler\"><code>GPUSampler</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUShaderModule\"><code>GPUShaderModule</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUSupportedFeatures\"><code>GPUSupportedFeatures</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUSupportedLimits\"><code>GPUSupportedLimits</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUTexture\"><code>GPUTexture</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUTextureView\"><code>GPUTextureView</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUUncapturedErrorEvent\"><code>GPUUncapturedErrorEvent</code></a></li><li><a href=\"/en-US/docs/Web/API/GPUValidationError\"><code>GPUValidationError</code></a></li><li><a href=\"/en-US/docs/Web/API/HTMLCanvasElement/getContext\"><code>HTMLCanvasElement.getContext()</code></a></li><li><a href=\"/en-US/docs/Web/API/Navigator/gpu\"><code>Navigator.gpu</code></a></li><li><a href=\"/en-US/docs/Web/API/WorkerNavigator/gpu\"><code>WorkerNavigator.gpu</code></a></li></ol></details></li></ol>","sidebarMacro":"APIRef","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>This is an <a href=\"/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\">experimental technology</a></strong><br>Check the <a href=\"#browser_compatibility\">Browser compatibility table</a> carefully before using this in production.</p></div>\n<p>\n  The <strong><code>configure()</code></strong> method of the\n  <a href=\"/en-US/docs/Web/API/GPUCanvasContext\"><code>GPUCanvasContext</code></a> interface configures the context to use for rendering with a given <a href=\"/en-US/docs/Web/API/GPUDevice\"><code>GPUDevice</code></a>. When called the canvas will initially be cleared to transparent black.\n</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"configuration\"><a href=\"#configuration\"><code>configuration</code></a></dt>\n  <dd>\n    <p>An object containing the following properties:</p>\n    <dl>\n      <dt id=\"alphamode\"><a href=\"#alphamode\"><code>alphaMode</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>An enumerated value that specifies the effect that alpha values will have on the content of textures returned by <a href=\"/en-US/docs/Web/API/GPUCanvasContext/getCurrentTexture\" title=\"getCurrentTexture()\"><code>getCurrentTexture()</code></a> when read, displayed, or used as an image source. Possible values are:</p>\n        <ul>\n          <li><code>opaque</code>: Alpha values are ignored — if a texture is not already opaque, the alpha channel is cleared to 1.0 when it is used as an image source or displayed to the screen. This is the default value.</li>\n          <li><code>premultiplied</code>: Color values are premultiplied by their alpha value. For example, 100% red at 50% alpha is <code>[0.5, 0, 0, 0.5]</code>.</li>\n        </ul>\n      </dd>\n      <dt id=\"colorspace\"><a href=\"#colorspace\"><code>colorSpace</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>The color space that values written into textures returned by <code>getCurrentTexture()</code> should be displayed with. Possible values are <code>srgb</code> (the default) and <code>display-p3</code>.</p>\n      </dd>\n      <dt id=\"device\"><a href=\"#device\"><code>device</code></a></dt>\n      <dd>\n        <p>The <a href=\"/en-US/docs/Web/API/GPUDevice\"><code>GPUDevice</code></a> that the rendering information for the context will come from.</p>\n      </dd>\n      <dt id=\"format\"><a href=\"#format\"><code>format</code></a></dt>\n      <dd>\n        <p>The format that textures returned by <code>getCurrentTexture()</code> will have. This can be <code>bgra8unorm</code>, <code>rgba8unorm</code>, or <code>rgba16float</code>. The optimal canvas texture format for the current system can be returned by <a href=\"/en-US/docs/Web/API/GPU/getPreferredCanvasFormat\"><code>GPU.getPreferredCanvasFormat()</code></a>. Using this is recommended — if you don't use the preferred format when configuring the canvas context, you may incur additional overhead, such as additional texture copies, depending on the platform.</p>\n      </dd>\n      <dt id=\"usage\"><a href=\"#usage\"><code>usage</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p><a href=\"/en-US/docs/Glossary/Bitwise_flags\">Bitwise flags</a> specifying the allowed usage for textures returned by <code>getCurrentTexture()</code>. Possible values are:</p>\n        <ul>\n          <li><code>GPUTextureUsage.COPY_SRC</code>: The texture can be used as the source of a copy operation, for example the source argument of a <a href=\"/en-US/docs/Web/API/GPUCommandEncoder/copyTextureToBuffer\"><code>GPUCommandEncoder.copyTextureToBuffer()</code></a> call.</li>\n          <li><code>GPUTextureUsage.COPY_DST</code>: The texture can be used as the destination of a copy/write operation, for example the destination argument of a <a href=\"/en-US/docs/Web/API/GPUCommandEncoder/copyTextureToTexture\"><code>GPUCommandEncoder.copyTextureToTexture()</code></a> call.</li>\n          <li><code>GPUTextureUsage.RENDER_ATTACHMENT</code>: The texture can be used as a color attachment in a render pass, for example in a color attachment view in a <a href=\"/en-US/docs/Web/API/GPUCommandEncoder/beginRenderPass\"><code>GPUCommandEncoder.beginRenderPass()</code></a> call. <code>GPUTextureUsage.RENDER_ATTACHMENT</code> is the default <code>usage</code>, but note that it is not automatically included if a different value is explicitly set; in such cases you need to include it in addition.</li>\n          <li><code>GPUTextureUsage.TEXTURE_BINDING</code>: The texture can be bound for use as a sampled texture in a shader, for example in a bind group entry in a <a href=\"/en-US/docs/Web/API/GPUDevice/createBindGroup\"><code>GPUDevice.createBindGroup()</code></a> call.</li>\n          <li><code>GPUTextureUsage.STORAGE_BINDING</code>: The texture can be bound for use as a storage texture in a shader, for example in a bind group entry in a <a href=\"/en-US/docs/Web/API/GPUDevice/createBindGroup\"><code>GPUDevice.createBindGroup()</code></a> call.</li>\n        </ul>\n        <p>Note that multiple possible usages can be specified using the <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">bitwise OR operator</a>. For example, <code>usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT</code>.</p>\n      </dd>\n      <dt id=\"viewformats\"><a href=\"#viewformats\"><code>viewFormats</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>An array of formats that views created from textures returned by <code>getCurrentTexture()</code> may use. See <a href=\"https://gpuweb.github.io/gpuweb/#texture-formats\" class=\"external\" target=\"_blank\">Texture Formats</a> for all the possible values.</p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"return_value","title":"Return value","isH3":true,"content":"<p>None (<code>undefined</code>).</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#gpuCanvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webgpu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">device</span><span class=\"token operator\">:</span> device<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">format</span><span class=\"token operator\">:</span> navigator<span class=\"token punctuation\">.</span>gpu<span class=\"token punctuation\">.</span><span class=\"token function\">getPreferredCanvasFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">alphaMode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"premultiplied\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-configure","title":"WebGPU"}],"query":"api.GPUCanvasContext.configure"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.GPUCanvasContext.configure"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li>The <a href=\"/en-US/docs/Web/API/WebGPU_API\">WebGPU API</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The configure() method of the\n  GPUCanvasContext interface configures the context to use for rendering with a given GPUDevice. When called the canvas will initially be cleared to transparent black.","popularity":0,"modified":"2023-05-21T10:42:41.000Z","source":{"folder":"en-us/web/api/gpucanvascontext/configure","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/gpucanvascontext/configure/index.md","last_commit_url":"https://github.com/mdn/content/commit/5415333266332743d94132ee55b4c34ad0d9b7ad","filename":"index.md"},"short_title":"configure()","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/GPUCanvasContext","title":"GPUCanvasContext"},{"uri":"/en-US/docs/Web/API/GPUCanvasContext/configure","title":"configure()"}],"pageTitle":"GPUCanvasContext: configure() method - Web APIs | MDN","noIndexing":false}}