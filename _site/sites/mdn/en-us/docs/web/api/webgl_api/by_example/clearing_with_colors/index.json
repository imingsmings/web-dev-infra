{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{"macros":[{"id":"macro0","fixable":false,"suggestion":null,"explanation":"/en-US/docs/Glossary/RGBA does not exist","name":"MacroBrokenLinkError","error":{},"errorStack":"Error: /en-US/docs/Glossary/RGBA does not exist\n    at Object.recordNonFatalError (file:///Users/jason/Code/yari/kumascript/src/render.ts:88:13)\n    at Object.smartLink (file:///Users/jason/Code/yari/kumascript/src/api/web.ts:121:29)\n    at eval (\"/Users/jason/Code/yari/kumascript/macros/Glossary.ejs\":22:18)\n    at Glossary (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:703:17)\n    at /Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:260:40\n    at new Promise (<anonymous>)\n    at tryHandleCache (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:258:14)\n    at exports.renderFile (/Users/jason/Code/yari/node_modules/ejs/lib/ejs.js:491:10)\n    at Templates.render (file:///Users/jason/Code/yari/kumascript/src/templates.ts:55:40)\n    at render (file:///Users/jason/Code/yari/kumascript/src/render.ts:181:56)","offset":6,"line":13,"column":55,"macroName":"Glossary","sourceContext":"  | <p>In addition, you may notice that clearing the drawing buffer with a solid color is a two-stage process. First, we set the clear color to green, using the method {{domxref(\"WebGLRenderingContext.clearColor()\",\"clearColor()\")}}. This only changes some internal state of {{Glossary(\"WebGL\")}}, but does not draw anything yet. Next, we actually do the drawing by calling the {{domxref(\"WebGLRenderingContext.clear()\",\"clear()\")}} method. This is typical of how drawing is done with WebGL. There is only a handful of methods for actual drawing (<code>clear()</code> is one of them). All other methods are for setting and querying WebGL state variables (such as the clear color).</p>\n  | <p>There are many \"dials\" and \"switches\" that affect drawing with {{Glossary(\"WebGL\")}}. The clear color is just the first of many you will get to know. This is why {{Glossary(\"WebGL\")}}/{{Glossary(\"OpenGL\")}} is often called a <em>state machine</em>. By tweaking those \"dials\" and \"switches\" you can modify the internal state of the WebGL machine, which in turn changes how input (in this case, a clear command) translates into output (in this case, all pixels are set to green).</p>\n> | <p>Finally, we note that color in WebGL is usually in {{Glossary(\"RGBA\")}} format, that is four numerical components for red, green, blue and alpha (opacity). Therefore, <code>clearColor()</code> takes four arguments.</p>\n                                                          ^\n  | <pre class=\"brush: html\">&#x3C;p>A very simple WebGL program that shows some color.&#x3C;/p>\n  | &#x3C;!-- Text within a canvas element is displayed","fatal":false,"filepath":"/Users/jason/Code/content/files/en-us/web/api/webgl_api/by_example/clearing_with_colors/index.md","macroSource":"{{Glossary(\"RGBA\")}}"}]},"title":"Clearing with colors","mdn_url":"/en-US/docs/Web/API/WebGL_API/By_example/Clearing_with_colors","locale":"en-US","native":"English (US)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/API/WebGL_API/By_example/Detect_WebGL\">« Previous</a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/API/WebGL_API/By_example/Clearing_by_clicking\">Next  »</a></li>\n</ul>\n<p>An example showing how to clear a WebGL rendering context to a solid color.</p>"}},{"type":"prose","value":{"id":"clearing_the_webgl_context_with_a_solid_color","title":"Clearing the WebGL context with a solid color","isH3":false,"content":"<div class=\"code-example\" id=\"sect1\"><p class=\"example-header\"></p><iframe class=\"sample-code-frame\" title=\"Clearing the WebGL context with a solid color sample\" id=\"frame_clearing_the_webgl_context_with_a_solid_color\" width=\"660\" height=\"425\" src=\"http://localhost:5042/en-US/docs/Web/API/WebGL_API/By_example/Clearing_with_colors/runner.html?id=clearing_the_webgl_context_with_a_solid_color\" loading=\"lazy\"></iframe></div>\n<p>The simplest graphical <a href=\"/en-US/docs/Glossary/WebGL\">WebGL</a> program. Set up the <a href=\"/en-US/docs/Web/API/WebGLRenderingContext\" title=\"rendering context\">rendering context</a> and then just clear it solid green. Note that <a href=\"/en-US/docs/Glossary/CSS\">CSS</a> sets the background color of the canvas to black, so when the canvas turns green we know that <a href=\"/en-US/docs/Glossary/WebGL\">WebGL</a>'s magic has worked.</p>\n<p>In addition, you may notice that clearing the drawing buffer with a solid color is a two-stage process. First, we set the clear color to green, using the method <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/clearColor\" title=\"clearColor()\"><code>clearColor()</code></a>. This only changes some internal state of <a href=\"/en-US/docs/Glossary/WebGL\">WebGL</a>, but does not draw anything yet. Next, we actually do the drawing by calling the <a href=\"/en-US/docs/Web/API/WebGLRenderingContext/clear\" title=\"clear()\"><code>clear()</code></a> method. This is typical of how drawing is done with WebGL. There is only a handful of methods for actual drawing (<code>clear()</code> is one of them). All other methods are for setting and querying WebGL state variables (such as the clear color).</p>\n<p>There are many \"dials\" and \"switches\" that affect drawing with <a href=\"/en-US/docs/Glossary/WebGL\">WebGL</a>. The clear color is just the first of many you will get to know. This is why <a href=\"/en-US/docs/Glossary/WebGL\">WebGL</a>/<a href=\"/en-US/docs/Glossary/OpenGL\">OpenGL</a> is often called a <em>state machine</em>. By tweaking those \"dials\" and \"switches\" you can modify the internal state of the WebGL machine, which in turn changes how input (in this case, a clear command) translates into output (in this case, all pixels are set to green).</p>\n<p>Finally, we note that color in WebGL is usually in <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\" data-flaw-src=\"{{Glossary(&quot;RGBA&quot;)}}\">RGBA</a> format, that is four numerical components for red, green, blue and alpha (opacity). Therefore, <code>clearColor()</code> takes four arguments.</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">html</span></p><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>A very simple WebGL program that shows some color.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!-- Text within a canvas element is displayed\n    only if canvas is not supported. --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>Your browser does not seem to support HTML canvas.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">css</span></p><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">canvas</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 280px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 210px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Run everything inside window load event handler, to make sure</span>\n<span class=\"token comment\">// DOM is fully loaded and styled before trying to manipulate it,</span>\n<span class=\"token comment\">// and to not mess up the global scope. We are giving the event</span>\n<span class=\"token comment\">// handler a name (setupWebGL) so that we can refer to the</span>\n<span class=\"token comment\">// function object within the function itself.</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setupWebGL</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Cleaning after ourselves. The event handler removes</span>\n    <span class=\"token comment\">// itself, because it only needs to run once.</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> setupWebGL<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// References to the document elements.</span>\n    <span class=\"token keyword\">const</span> paragraph <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Getting the WebGL rendering context.</span>\n    <span class=\"token keyword\">const</span> gl <span class=\"token operator\">=</span>\n      canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webgl\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"experimental-webgl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// If failed, inform user of failure. Otherwise, initialize</span>\n    <span class=\"token comment\">// the drawing buffer (the viewport) and clear the context</span>\n    <span class=\"token comment\">// with a solid color.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      paragraph<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span>\n        <span class=\"token string\">\"Failed to get WebGL context. \"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"Your browser or device may not support WebGL.\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    paragraph<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"Congratulations! Your browser supports WebGL. \"</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">viewport</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span>drawingBufferWidth<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span>drawingBufferHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Set the clear color to darkish green.</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Clear the context with the newly set color. This is</span>\n    <span class=\"token comment\">// the function call that actually does the drawing.</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The source code of this example is also available on <a href=\"https://github.com/idofilin/webgl-by-example/tree/master/clearing-with-colors\" class=\"external\" target=\"_blank\">GitHub</a>.</p><ul class=\"prev-next\">\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/API/WebGL_API/By_example/Detect_WebGL\">« Previous</a></li>\n    <li><a class=\"button secondary\" href=\"/en-US/docs/Web/API/WebGL_API/By_example/Clearing_by_clicking\">Next  »</a></li>\n</ul>"}}],"toc":[{"text":"Clearing the WebGL context with a solid color","id":"clearing_the_webgl_context_with_a_solid_color"}],"summary":"An example showing how to clear a WebGL rendering context to a solid color.","popularity":0.0013,"modified":"2023-07-07T07:19:19.000Z","source":{"folder":"en-us/web/api/webgl_api/by_example/clearing_with_colors","github_url":"https://github.com/mdn/content/blob/main/files/en-us/web/api/webgl_api/by_example/clearing_with_colors/index.md","last_commit_url":"https://github.com/mdn/content/commit/acfe8c9f1f4145f77653a2bc64a9744b001358dc","filename":"index.md"},"short_title":"Clearing with colors","parents":[{"uri":"/en-US/docs/Web","title":"References"},{"uri":"/en-US/docs/Web/API","title":"Web APIs"},{"uri":"/en-US/docs/Web/API/WebGL_API","title":"WebGL: 2D and 3D graphics for the web"},{"uri":"/en-US/docs/Web/API/WebGL_API/By_example","title":"WebGL by example"},{"uri":"/en-US/docs/Web/API/WebGL_API/By_example/Clearing_with_colors","title":"Clearing with colors"}],"pageTitle":"Clearing with colors - Web APIs | MDN","noIndexing":false}}