{"doc":{"isMarkdown":true,"isTranslated":false,"isActive":true,"flaws":{},"title":"WebAssembly.Table() constructor","mdn_url":"/en-US/docs/WebAssembly/JavaScript_interface/Table/Table","locale":"en-US","native":"English (US)","browserCompat":["webassembly.api.Table.Table"],"sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/en-US/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>JavaScript interface</summary>\n      <ol>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Tag\"><code>WebAssembly.Tag</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Exception\"><code>WebAssembly.Exception</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></li>\n        <li><a href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","sidebarMacro":"WebAssemblySidebar","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>The <strong><code>WebAssembly.Table()</code></strong> constructor creates a new <code>Table</code> object of the given size and element type, filled with the provided value.</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Table</span><span class=\"token punctuation\">(</span>tableDescriptor<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Table</span><span class=\"token punctuation\">(</span>tableDescriptor<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<dl>\n  <dt id=\"tabledescriptor\"><a href=\"#tabledescriptor\"><code>tableDescriptor</code></a></dt>\n  <dd>\n    <p>An object that can contain the following members:</p>\n    <dl>\n      <dt id=\"element\"><a href=\"#element\"><code>element</code></a></dt>\n      <dd>\n        <p>A string representing the type of value to be stored in the table. This can have a value of <code>\"anyfunc\"</code> (functions) or <code>\"externref\"</code> (host references).</p>\n      </dd>\n      <dt id=\"initial\"><a href=\"#initial\"><code>initial</code></a></dt>\n      <dd>\n        <p>The initial number of elements of the WebAssembly Table.</p>\n      </dd>\n      <dt id=\"maximum\"><a href=\"#maximum\"><code>maximum</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n      <dd>\n        <p>The maximum number of elements the WebAssembly Table is allowed to grow to.</p>\n      </dd>\n    </dl>\n  </dd>\n  <dt id=\"value\"><a href=\"#value\"><code>value</code></a> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>The element to fill the newly-allocated space with.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<ul>\n  <li>If <code>tableDescriptor</code> is not an object, a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> is thrown.</li>\n  <li>If <code>maximum</code> is specified and is smaller than <code>initial</code>, a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> is thrown.</li>\n  <li>If <code>element</code> is not one of the <a href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" class=\"external\" target=\"_blank\">reference types</a>, then a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> is thrown.</li>\n  <li>If <code>value</code> is not a value of the type <code>element</code>, a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> is thrown.</li>\n</ul>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":""}},{"type":"prose","value":{"id":"creating_a_new_webassembly_table_instance","title":"Creating a new WebAssembly Table instance","isH3":true,"content":"<p>The following example creates a <code>WebAssembly.Table</code> instance with an initial size of 2 elements. The <code>WebAssembly.Table</code> contents are populated using a WebAssembly module and are accessible from JavaScript. When viewing the <a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/table2.html\" class=\"external\" target=\"_blank\">live example</a>, open your developer console to display console log messages from the code snippets below.</p>\n<p>This example uses the following reference files:</p>\n<ol>\n  <li><code>table2.html</code>: An HTML file containing JavaScript that creates a <code>WebAssembly.Table</code> (<a href=\"https://github.com/mdn/webassembly-examples/blob/main/js-api-examples/table2.html\" class=\"external\" target=\"_blank\">source code</a>)</li>\n  <li><code>table2.wasm</code>: A WebAssembly module imported by the JavaScript code in <code>table2.html</code> (<a href=\"https://github.com/mdn/webassembly-examples/blob/main/js-api-examples/table2.wat\" class=\"external\" target=\"_blank\">source code</a>)</li>\n</ol>\n<p>In <code>table2.html</code>, we create a <code>WebAssembly.Table</code>:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> tbl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token string\">\"anyfunc\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>We can retrieve the index contents using <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/get\"><code>Table.prototype.get()</code></a>:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a table with 2 elements</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// content for index 0 is null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// content for index 1 is null</span>\n</code></pre></div>\n<p>Next, we create an import object that contains the <code>WebAssembly.Table</code>:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">js</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> tbl <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Next, we load and instantiate a WebAssembly module. The <code>table2.wasm</code> module defines a table containing two functions. The first function returns 42, and the second returns 83:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">wasm</span></p><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"js\"</span> <span class=\"token string\">\"tbl\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">table</span> <span class=\"token number\">2</span> <span class=\"token keyword\">anyfunc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$f42</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$f83</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">83</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">elem</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$f42</span> <span class=\"token variable\">$f83</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>We instantiate <code>table2.wasm</code> using the <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/instantiateStreaming_static\"><code>WebAssembly.instantiateStreaming()</code></a> method:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> instantiating <span class=\"token operator\">=</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table2.wasm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  importObject<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>After instantiating <code>table2.wasm</code>, <code>tbl</code> is updated with the following:</p>\n<ul>\n  <li>table length is still 2</li>\n  <li>content for index 0 is now a function which returns 42</li>\n  <li>content for index 1 is now a function which returns 83</li>\n</ul>\n<p>The items at indexes 0 and 1 of the table are now callable <a href=\"/en-US/docs/WebAssembly/Exported_functions\">Exported WebAssembly Functions</a>. To call them, note that we must add the function invocation operator <code>()</code> after the <code>get()</code> call:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code>instantiating<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 83</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>While we are creating and accessing the <code>WebAssembly.Table</code> from JavaScript, the same <code>Table</code> is also visible and callable inside the WebAssembly instance.</p>"}},{"type":"prose","value":{"id":"creating_a_new_webassembly_table_instance_with_a_value","title":"Creating a new WebAssembly Table instance with a value","isH3":true,"content":"<p>The following example creates a new WebAssembly Table instance with 4 elements, full of the same object:</p>\n<div class=\"code-example\"><p class=\"example-header\"><span class=\"language-name\">js</span></p><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> <span class=\"token string\">\"world\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Table</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token string\">\"externref\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">maximum</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  myObject<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myObject <span class=\"token operator\">===</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webassembly.github.io/spec/js-api/#dom-table-table","title":"WebAssembly JavaScript Interface"}],"query":"webassembly.api.Table.Table"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"webassembly.api.Table.Table"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/WebAssembly\">WebAssembly</a> overview page</li>\n  <li><a href=\"/en-US/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n  <li><a href=\"/en-US/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Examples","id":"examples"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"The WebAssembly.Table() constructor creates a new Table object of the given size and element type, filled with the provided value.","popularity":0,"modified":"2023-11-20T17:47:35.000Z","source":{"folder":"en-us/webassembly/javascript_interface/table/table","github_url":"https://github.com/mdn/content/blob/main/files/en-us/webassembly/javascript_interface/table/table/index.md","last_commit_url":"https://github.com/mdn/content/commit/d23f8c5c52bdfb6151476a2574e72d323d0d30f4","filename":"index.md"},"short_title":"WebAssembly.Table() constructor","parents":[{"uri":"/en-US/docs/WebAssembly","title":"WebAssembly"},{"uri":"/en-US/docs/WebAssembly/JavaScript_interface","title":"WebAssembly"},{"uri":"/en-US/docs/WebAssembly/JavaScript_interface/Table","title":"WebAssembly.Table"},{"uri":"/en-US/docs/WebAssembly/JavaScript_interface/Table/Table","title":"WebAssembly.Table() constructor"}],"pageTitle":"WebAssembly.Table() constructor - WebAssembly | MDN","noIndexing":false}}