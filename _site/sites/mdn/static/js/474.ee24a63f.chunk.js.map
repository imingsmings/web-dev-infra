{"version":3,"file":"static/js/474.ee24a63f.chunk.js","mappings":"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","sources":["../../node_modules/extend/index.js","../../node_modules/inline-style-parser/index.js","../../node_modules/prismjs/prism.js","../../node_modules/sse.js/lib/sse.js","../../node_modules/style-to-object/index.js","../../node_modules/devlop/lib/default.js","../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/hast-util-whitespace/lib/index.js","../../node_modules/property-information/lib/util/schema.js","../../node_modules/property-information/lib/util/merge.js","../../node_modules/property-information/lib/normalize.js","../../node_modules/property-information/lib/util/info.js","../../node_modules/property-information/lib/util/types.js","../../node_modules/property-information/lib/util/defined-info.js","../../node_modules/property-information/lib/util/create.js","../../node_modules/property-information/lib/xlink.js","../../node_modules/property-information/lib/xml.js","../../node_modules/property-information/lib/util/case-sensitive-transform.js","../../node_modules/property-information/lib/util/case-insensitive-transform.js","../../node_modules/property-information/lib/xmlns.js","../../node_modules/property-information/lib/aria.js","../../node_modules/property-information/lib/html.js","../../node_modules/property-information/lib/svg.js","../../node_modules/property-information/index.js","../../node_modules/property-information/lib/find.js","../../node_modules/property-information/lib/hast-to-react.js","../../node_modules/style-to-object/index.mjs","../../node_modules/unist-util-position/lib/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/vfile-message/lib/index.js","../../node_modules/hast-util-to-jsx-runtime/lib/index.js","../../node_modules/comma-separated-tokens/index.js","../../node_modules/space-separated-tokens/index.js","../../node_modules/html-url-attributes/lib/index.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/micromark/lib/parse.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/@ungap/structured-clone/esm/types.js","../../node_modules/@ungap/structured-clone/esm/deserialize.js","../../node_modules/@ungap/structured-clone/esm/serialize.js","../../node_modules/@ungap/structured-clone/esm/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/trim-lines/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/remark-rehype/lib/index.js","../../node_modules/bail/index.js","../../node_modules/unified/node_modules/is-plain-obj/index.js","../../node_modules/trough/index.js","../../node_modules/vfile/lib/minpath.browser.js","../../node_modules/vfile/lib/minproc.browser.js","../../node_modules/vfile/lib/minurl.shared.js","../../node_modules/vfile/lib/minurl.browser.js","../../node_modules/vfile/lib/index.js","../../node_modules/unified/lib/callable-instance.js","../../node_modules/unified/lib/index.js","../../node_modules/react-markdown/lib/index.js","../../node_modules/ccount/index.js","../../node_modules/mdast-util-find-and-replace/lib/index.js","../../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../../node_modules/mdast-util-gfm-footnote/lib/index.js","../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../../node_modules/markdown-table/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../../node_modules/mdast-util-to-markdown/lib/handle/break.js","../../node_modules/mdast-util-to-markdown/lib/handle/code.js","../../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../../node_modules/mdast-util-to-markdown/lib/handle/html.js","../../node_modules/mdast-util-to-markdown/lib/handle/image.js","../../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../../node_modules/mdast-util-to-markdown/lib/handle/link.js","../../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../../node_modules/mdast-util-phrasing/lib/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../../node_modules/mdast-util-to-markdown/lib/handle/index.js","../../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../../node_modules/longest-streak/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../../node_modules/mdast-util-to-markdown/lib/handle/list.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../../node_modules/mdast-util-to-markdown/lib/handle/root.js","../../node_modules/mdast-util-to-markdown/lib/handle/text.js","../../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../../node_modules/mdast-util-gfm-table/lib/index.js","../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../../node_modules/micromark-extension-gfm-table/lib/infer.js","../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../node_modules/remark-gfm/lib/index.js","../../node_modules/micromark-extension-gfm/index.js","../../node_modules/mdast-util-gfm/lib/index.js","../../node_modules/unist-util-is/lib/index.js","../../node_modules/unist-util-visit-parents/lib/index.js","../../node_modules/unist-util-visit/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\n/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\t/**\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n\t\t * own worker, you don't want it to do this.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\n\t\t *\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.disableWorkerMessageHandler = true;\n\t\t * // Load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism’s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\t_.util.setLanguage(element, language);\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\t_.util.setLanguage(parent, language);\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tif (!env.grammar) {\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\n\t\t\t}\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': {\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n\t\tgreedy: true\n\t},\n\t'prolog': {\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\n\t\tgreedy: true\n\t},\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/i,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': {\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\tgreedy: true\n\t},\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'special-attr': [],\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n\t/**\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\n\t *\n\t * An example of an inlined language is CSS with `style` attributes.\n\t *\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addAttribute('style', 'css');\n\t */\n\tvalue: function (attrName, lang) {\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\t\t\t\t'i'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attr-name': /^[^\\s=]+/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\n(function (Prism) {\n\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: RegExp('@[\\\\w-](?:' + /[^;{\\s\"']|\\s+(?!\\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\\s*\\{))/.source),\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': {\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': {\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'important': /!important\\b/i,\n\t\t'function': {\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\t\tmarkup.tag.addAttribute('style', 'css');\n\t}\n\n}(Prism));\n\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': {\n\t\tpattern: RegExp(\n\t\t\t/(^|[^\\w$])/.source +\n\t\t\t'(?:' +\n\t\t\t(\n\t\t\t\t// constant\n\t\t\t\t/NaN|Infinity/.source +\n\t\t\t\t'|' +\n\t\t\t\t// binary integer\n\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// octal integer\n\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// hexadecimal integer\n\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal bigint\n\t\t\t\t/\\d+(?:_\\d+)*n/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal number (integer or float) but no bigint\n\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\n\t\t\t) +\n\t\t\t')' +\n\t\t\t/(?![\\w$])/.source\n\t\t),\n\t\tlookbehind: true\n\t},\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: RegExp(\n\t\t\t// lookbehind\n\t\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\t\t/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source +\n\t\t\t// Regex pattern:\n\t\t\t// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\n\t\t\t// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\n\t\t\t// with the only syntax, so we have to define 2 different regex patterns.\n\t\t\t/\\//.source +\n\t\t\t'(?:' +\n\t\t\t/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source +\n\t\t\t'|' +\n\t\t\t// `v` flag syntax. This supports 3 levels of nested character classes.\n\t\t\t/(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +\n\t\t\t')' +\n\t\t\t// lookahead\n\t\t\t/(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source\n\t\t),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'string-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'property'\n\t}\n});\n\nPrism.languages.insertBefore('javascript', 'operator', {\n\t'literal-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\tif (!Element.prototype.matches) {\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\t}\n\n\tvar LOADING_MESSAGE = 'Loading…';\n\tvar FAILURE_MESSAGE = function (status, message) {\n\t\treturn '✖ Error ' + status + ' while fetching file: ' + message;\n\t};\n\tvar FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';\n\n\tvar EXTENSIONS = {\n\t\t'js': 'javascript',\n\t\t'py': 'python',\n\t\t'rb': 'ruby',\n\t\t'ps1': 'powershell',\n\t\t'psm1': 'powershell',\n\t\t'sh': 'bash',\n\t\t'bat': 'batch',\n\t\t'h': 'c',\n\t\t'tex': 'latex'\n\t};\n\n\tvar STATUS_ATTR = 'data-src-status';\n\tvar STATUS_LOADING = 'loading';\n\tvar STATUS_LOADED = 'loaded';\n\tvar STATUS_FAILED = 'failed';\n\n\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\n\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\n\n\t/**\n\t * Loads the given file.\n\t *\n\t * @param {string} src The URL or path of the source file to load.\n\t * @param {(result: string) => void} success\n\t * @param {(reason: string) => void} error\n\t */\n\tfunction loadFile(src, success, error) {\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('GET', src, true);\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState == 4) {\n\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\tsuccess(xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\tif (xhr.status >= 400) {\n\t\t\t\t\t\terror(FAILURE_MESSAGE(xhr.status, xhr.statusText));\n\t\t\t\t\t} else {\n\t\t\t\t\t\terror(FAILURE_EMPTY_MESSAGE);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\txhr.send(null);\n\t}\n\n\t/**\n\t * Parses the given range.\n\t *\n\t * This returns a range with inclusive ends.\n\t *\n\t * @param {string | null | undefined} range\n\t * @returns {[number, number | undefined] | undefined}\n\t */\n\tfunction parseRange(range) {\n\t\tvar m = /^\\s*(\\d+)\\s*(?:(,)\\s*(?:(\\d+)\\s*)?)?$/.exec(range || '');\n\t\tif (m) {\n\t\t\tvar start = Number(m[1]);\n\t\t\tvar comma = m[2];\n\t\t\tvar end = m[3];\n\n\t\t\tif (!comma) {\n\t\t\t\treturn [start, start];\n\t\t\t}\n\t\t\tif (!end) {\n\t\t\t\treturn [start, undefined];\n\t\t\t}\n\t\t\treturn [start, Number(end)];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tPrism.hooks.add('before-highlightall', function (env) {\n\t\tenv.selector += ', ' + SELECTOR;\n\t});\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\n\t\tif (pre.matches(SELECTOR)) {\n\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\n\n\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\n\n\t\t\t// add code element with loading message\n\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\n\t\t\tcode.textContent = LOADING_MESSAGE;\n\n\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\tvar language = env.language;\n\t\t\tif (language === 'none') {\n\t\t\t\t// the language might be 'none' because there is no language set;\n\t\t\t\t// in this case, we want to use the extension as the language\n\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\n\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\n\t\t\t}\n\n\t\t\t// set language classes\n\t\t\tPrism.util.setLanguage(code, language);\n\t\t\tPrism.util.setLanguage(pre, language);\n\n\t\t\t// preload the language\n\t\t\tvar autoloader = Prism.plugins.autoloader;\n\t\t\tif (autoloader) {\n\t\t\t\tautoloader.loadLanguages(language);\n\t\t\t}\n\n\t\t\t// load file\n\t\t\tloadFile(\n\t\t\t\tsrc,\n\t\t\t\tfunction (text) {\n\t\t\t\t\t// mark as loaded\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\n\n\t\t\t\t\t// handle data-range\n\t\t\t\t\tvar range = parseRange(pre.getAttribute('data-range'));\n\t\t\t\t\tif (range) {\n\t\t\t\t\t\tvar lines = text.split(/\\r\\n?|\\n/g);\n\n\t\t\t\t\t\t// the range is one-based and inclusive on both ends\n\t\t\t\t\t\tvar start = range[0];\n\t\t\t\t\t\tvar end = range[1] == null ? lines.length : range[1];\n\n\t\t\t\t\t\tif (start < 0) { start += lines.length; }\n\t\t\t\t\t\tstart = Math.max(0, Math.min(start - 1, lines.length));\n\t\t\t\t\t\tif (end < 0) { end += lines.length; }\n\t\t\t\t\t\tend = Math.max(0, Math.min(end, lines.length));\n\n\t\t\t\t\t\ttext = lines.slice(start, end).join('\\n');\n\n\t\t\t\t\t\t// add data-start for line numbers\n\t\t\t\t\t\tif (!pre.hasAttribute('data-start')) {\n\t\t\t\t\t\t\tpre.setAttribute('data-start', String(start + 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// highlight code\n\t\t\t\t\tcode.textContent = text;\n\t\t\t\t\tPrism.highlightElement(code);\n\t\t\t\t},\n\t\t\t\tfunction (error) {\n\t\t\t\t\t// mark as failed\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\n\n\t\t\t\t\tcode.textContent = error;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n\n\tPrism.plugins.fileHighlight = {\n\t\t/**\n\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\n\t\t *\n\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\n\t\t *\n\t\t * @param {ParentNode} [container=document]\n\t\t */\n\t\thighlight: function highlight(container) {\n\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\n\n\t\t\tfor (var i = 0, element; (element = elements[i++]);) {\n\t\t\t\tPrism.highlightElement(element);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar logged = false;\n\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\n\tPrism.fileHighlight = function () {\n\t\tif (!logged) {\n\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\n\t\t\tlogged = true;\n\t\t}\n\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\n\t};\n\n}());\n","/**\n * Copyright (C) 2016-2023 Maxime Petazzoni <maxime.petazzoni@bulix.org>.\n * All rights reserved.\n */\n\nvar SSE = function (url, options) {\n  if (!(this instanceof SSE)) {\n    return new SSE(url, options);\n  }\n\n  this.INITIALIZING = -1;\n  this.CONNECTING = 0;\n  this.OPEN = 1;\n  this.CLOSED = 2;\n\n  this.url = url;\n\n  options = options || {};\n  this.headers = options.headers || {};\n  this.payload = options.payload !== undefined ? options.payload : '';\n  this.method = options.method || (this.payload && 'POST' || 'GET');\n  this.withCredentials = !!options.withCredentials;\n  this.debug = !!options.debug;\n\n  this.FIELD_SEPARATOR = ':';\n  this.listeners = {};\n\n  this.xhr = null;\n  this.readyState = this.INITIALIZING;\n  this.progress = 0;\n  this.chunk = '';\n\n  this.addEventListener = function(type, listener) {\n    if (this.listeners[type] === undefined) {\n      this.listeners[type] = [];\n    }\n\n    if (this.listeners[type].indexOf(listener) === -1) {\n      this.listeners[type].push(listener);\n    }\n  };\n\n  this.removeEventListener = function(type, listener) {\n    if (this.listeners[type] === undefined) {\n      return;\n    }\n\n    var filtered = [];\n    this.listeners[type].forEach(function(element) {\n      if (element !== listener) {\n        filtered.push(element);\n      }\n    });\n    if (filtered.length === 0) {\n      delete this.listeners[type];\n    } else {\n      this.listeners[type] = filtered;\n    }\n  };\n\n  this.dispatchEvent = function(e) {\n    if (!e) {\n      return true;\n    }\n\n    if (this.debug) {\n      console.debug(e);\n    }\n\n    e.source = this;\n\n    var onHandler = 'on' + e.type;\n    if (this.hasOwnProperty(onHandler)) {\n      this[onHandler].call(this, e);\n      if (e.defaultPrevented) {\n        return false;\n      }\n    }\n\n    if (this.listeners[e.type]) {\n      return this.listeners[e.type].every(function(callback) {\n        callback(e);\n        return !e.defaultPrevented;\n      });\n    }\n\n    return true;\n  };\n\n  this._setReadyState = function(state) {\n    var event = new CustomEvent('readystatechange');\n    event.readyState = state;\n    this.readyState = state;\n    this.dispatchEvent(event);\n  };\n\n  this._onStreamFailure = function(e) {\n    var event = new CustomEvent('error');\n    event.data = e.currentTarget.response;\n    this.dispatchEvent(event);\n    this.close();\n  }\n\n  this._onStreamAbort = function(e) {\n    this.dispatchEvent(new CustomEvent('abort'));\n    this.close();\n  }\n\n  this._onStreamProgress = function(e) {\n    if (!this.xhr) {\n      return;\n    }\n\n    if (this.xhr.status !== 200) {\n      this._onStreamFailure(e);\n      return;\n    }\n\n    if (this.readyState == this.CONNECTING) {\n      this.dispatchEvent(new CustomEvent('open'));\n      this._setReadyState(this.OPEN);\n    }\n\n    var data = this.xhr.responseText.substring(this.progress);\n\n    this.progress += data.length;\n    var parts = (this.chunk + data).split(/(\\r\\n|\\r|\\n){2}/g);\n\n    // we assume that the last chunk can be incomplete because of buffering or other network effects\n    // so we always save the last part to merge it with the next incoming packet\n    var lastPart = parts.pop();\n    parts.forEach(function(part) {\n        if (part.trim().length > 0) {\n            this.dispatchEvent(this._parseEventChunk(part));\n        }\n    }.bind(this));\n    this.chunk = lastPart;\n  };\n\n  this._onStreamLoaded = function(e) {\n    this._onStreamProgress(e);\n\n    // Parse the last chunk.\n    this.dispatchEvent(this._parseEventChunk(this.chunk));\n    this.chunk = '';\n  };\n\n  /**\n   * Parse a received SSE event chunk into a constructed event object.\n   *\n   * Reference: https://html.spec.whatwg.org/multipage/server-sent-events.html#dispatchMessage\n   */\n  this._parseEventChunk = function(chunk) {\n    if (!chunk || chunk.length === 0) {\n      return null;\n    }\n\n    if (this.debug) {\n      console.debug(chunk);\n    }\n\n    var e = {'id': null, 'retry': null, 'data': null, 'event': 'message'};\n    chunk.split(/\\n|\\r\\n|\\r/).forEach(function(line) {\n      line = line.trimRight();\n      var index = line.indexOf(this.FIELD_SEPARATOR);\n      if (index <= 0) {\n        // Line was either empty, or started with a separator and is a comment.\n        // Either way, ignore.\n        return;\n      }\n\n      var field = line.substring(0, index);\n      if (!(field in e)) {\n        return;\n      }\n\n      // only first whitespace should be trimmed\n      var skip = (line[index+1] === ' ') ? 2 : 1;\n      var value = line.substring(index + skip);\n\n      // consecutive 'data' is concatenated with newlines\n      if (field === 'data' && e[field] !== null) {\n          e['data'] += \"\\n\" + value;\n      } else {\n        e[field] = value;\n      }\n    }.bind(this));\n\n    var event = new CustomEvent(e.event);\n    event.data = e.data || '';\n    event.id = e.id;\n    return event;\n  };\n\n  this._checkStreamClosed = function() {\n    if (!this.xhr) {\n      return;\n    }\n\n    if (this.xhr.readyState === XMLHttpRequest.DONE) {\n      this._setReadyState(this.CLOSED);\n    }\n  };\n\n  this.stream = function() {\n    if (this.xhr) {\n      // Already connected.\n      return;\n    }\n\n    this._setReadyState(this.CONNECTING);\n\n    this.xhr = new XMLHttpRequest();\n    this.xhr.addEventListener('progress', this._onStreamProgress.bind(this));\n    this.xhr.addEventListener('load', this._onStreamLoaded.bind(this));\n    this.xhr.addEventListener('readystatechange', this._checkStreamClosed.bind(this));\n    this.xhr.addEventListener('error', this._onStreamFailure.bind(this));\n    this.xhr.addEventListener('abort', this._onStreamAbort.bind(this));\n    this.xhr.open(this.method, this.url);\n    for (var header in this.headers) {\n      this.xhr.setRequestHeader(header, this.headers[header]);\n    }\n    this.xhr.withCredentials = this.withCredentials;\n    this.xhr.send(this.payload);\n  };\n\n  this.close = function() {\n    if (this.readyState === this.CLOSED) {\n      return;\n    }\n\n    this.xhr.abort();\n    this.xhr = null;\n    this._setReadyState(this.CLOSED);\n  };\n\n  if (options.start === undefined || options.start) {\n    this.stream();\n  }\n};\n\n// Export our SSE module for npm.js\nif (typeof exports !== 'undefined') {\n  exports.SSE = SSE;\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nconst unicodePunctuationInternal = regexCheck(/\\p{P}/u)\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function unicodePunctuation(code) {\n  return asciiPunctuation(code) || unicodePunctuationInternal(code)\n}\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   An element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   An element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | undefined, [prop: string]: Array<Child> | Child | Element | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element' || node.type === 'root') {\n    const parentSchema = state.schema\n    let schema = parentSchema\n\n    if (\n      node.type === 'element' &&\n      node.tagName.toLowerCase() === 'svg' &&\n      parentSchema.space === 'html'\n    ) {\n      schema = svg\n      state.schema = schema\n    }\n\n    state.ancestors.push(node)\n\n    let children = createChildren(state, node)\n    const props = createProperties(state, state.ancestors)\n    let type = state.Fragment\n\n    state.ancestors.pop()\n\n    if (node.type === 'element') {\n      if (children && tableElements.has(node.tagName)) {\n        children = children.filter(function (child) {\n          return typeof child === 'string' ? !whitespace(child) : true\n        })\n      }\n\n      if (own.call(state.components, node.tagName)) {\n        const key = /** @type {keyof JSX.IntrinsicElements} */ (node.tagName)\n        type = state.components[key]\n\n        // If this is swapped out for a component:\n        if (\n          typeof type !== 'string' &&\n          type !== state.Fragment &&\n          state.passNode\n        ) {\n          props.node = node\n        }\n      } else {\n        type = node.tagName\n      }\n    }\n\n    if (children.length > 0) {\n      const value = children.length > 1 ? children : children[0]\n\n      if (value) {\n        props.children = value\n      }\n    }\n\n    // Restore parent schema.\n    state.schema = parentSchema\n\n    return state.create(node, type, props, key)\n  }\n\n  if (node.type === 'text') {\n    return node.value\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByTagName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys && child.type === 'element') {\n      const count = countsByTagName.get(child.tagName) || 0\n      key = child.tagName + '-' + count\n      countsByTagName.set(child.tagName, count + 1)\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle properties.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Parents>} ancestors\n *   Stack of parents.\n * @returns {Props}\n *   Props for runtime.\n */\nfunction createProperties(state, ancestors) {\n  const node = ancestors[ancestors.length - 1]\n  /** @type {Props} */\n  const props = {}\n  /** @type {string} */\n  let prop\n\n  if ('properties' in node && node.properties) {\n    /** @type {string | undefined} */\n    let alignValue\n\n    for (prop in node.properties) {\n      if (prop !== 'children' && own.call(node.properties, prop)) {\n        const result = createProperty(\n          state,\n          ancestors,\n          prop,\n          node.properties[prop]\n        )\n\n        if (result) {\n          const [key, value] = result\n\n          if (\n            state.tableCellAlignToStyle &&\n            key === 'align' &&\n            typeof value === 'string' &&\n            tableCellElement.has(node.tagName)\n          ) {\n            alignValue = value\n          } else {\n            props[key] = value\n          }\n        }\n      }\n    }\n\n    if (alignValue) {\n      // Assume style is an object.\n      const style = /** @type {Style} */ (props.style || (props.style = {}))\n      style[\n        state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'\n      ] = alignValue\n    }\n  }\n\n  return props\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Parents>} ancestors\n *   Stack of parents.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, ancestors, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object'\n        ? value\n        : parseStyle(state, ancestors, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Array<Nodes>} ancestors\n *   Stack of nodes.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, ancestors, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors,\n        cause,\n        source: 'hast-util-to-jsx-runtime',\n        ruleId: 'style'\n      })\n      message.file = state.filePath || undefined\n      message.url =\n        'https://github.com/syntax-tree/hast-util-to-jsx-runtime#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55_295 && code < 57_344) ||\n    // Noncharacters.\n    (code > 64_975 && code < 65_008) /* eslint-disable no-bitwise */ ||\n    (code & 65_535) === 65_535 ||\n    (code & 65_535) === 65_534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1_114_111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (toHast(tree, options))\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (toHast(tree, options || destination))\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value !== false) {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is PhrasingContent} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      'link',\n      'linkReference',\n      'strong',\n      'text'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `character` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} character\n *   Single character to look for.\n * @returns {number}\n *   Count of most frequent adjacent `character`s in `value`.\n */\nexport function longestStreak(value, character) {\n  const source = String(value)\n  let index = source.indexOf(character)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof character !== 'string' || character.length !== 1) {\n    throw new Error('Expected character')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + 1\n    index = source.indexOf(character, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  }\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (default: `true`).\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0]\n    })\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(\n        events.slice(this.map[index][0] + this.map[index][1]),\n        this.map[index][2]\n      )\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","Prism","_self","lang","uniqueId","plainTextGrammar","_","manual","disableWorkerMessageHandler","util","encode","tokens","Token","alias","map","o","objId","deepClone","visited","id","forEach","v","getLanguage","element","className","toLowerCase","parentElement","setLanguage","language","RegExp","classList","add","currentScript","document","stack","scripts","getElementsByTagName","isActive","defaultActivation","no","contains","languages","plain","plaintext","text","txt","redef","insertBefore","inside","before","insert","root","grammar","token","newToken","old","DFS","callback","propertyType","plugins","highlightAll","async","highlightAllUnder","container","env","selector","hooks","run","elements","apply","querySelectorAll","highlightElement","parent","nodeName","code","textContent","insertHighlightedCode","highlightedCode","innerHTML","hasAttribute","setAttribute","Worker","worker","onmessage","evt","data","postMessage","JSON","stringify","immediateClose","highlight","tokenize","rest","tokenList","LinkedList","addAfter","head","matchGrammar","list","array","next","tail","toArray","all","callbacks","matchedStr","matchPattern","pattern","lookbehind","lastIndex","lookbehindLength","index","startNode","startPos","rematch","patterns","j","cause","patternObj","greedy","global","flags","currentNode","reach","removeCount","from","to","p","k","matchStr","after","removeFrom","prev","removeRange","nestedRematch","newNode","count","s","e","tag","classes","attributes","aliases","join","addEventListener","message","parse","close","script","highlightAutomaticallyCallback","readyState","defer","window","requestAnimationFrame","setTimeout","WorkerGlobalScope","self","markup","tagName","includedCdataInside","def","attrName","html","mathml","svg","xml","ssml","atom","rss","string","css","addInlined","addAttribute","clike","javascript","regex","js","Element","matches","msMatchesSelector","webkitMatchesSelector","EXTENSIONS","STATUS_ATTR","STATUS_LOADING","STATUS_LOADED","SELECTOR","pre","appendChild","createElement","getAttribute","extension","autoloader","loadLanguages","success","xhr","XMLHttpRequest","open","onreadystatechange","status","responseText","statusText","send","loadFile","range","Number","comma","undefined","parseRange","split","Math","max","min","String","fileHighlight","logged","console","warn","SSE","url","INITIALIZING","CONNECTING","OPEN","CLOSED","headers","payload","method","withCredentials","debug","FIELD_SEPARATOR","listeners","progress","chunk","listener","indexOf","removeEventListener","filtered","dispatchEvent","onHandler","defaultPrevented","every","_setReadyState","state","event","CustomEvent","_onStreamFailure","currentTarget","response","_onStreamAbort","_onStreamProgress","substring","parts","lastPart","pop","part","_parseEventChunk","bind","_onStreamLoaded","trimRight","field","skip","_checkStreamClosed","DONE","stream","header","setRequestHeader","abort","require","StyleToObject","iterator","output","hasIterator","len","ok","unreachable","emptyOptions","settings","one","includeImageAlt","includeHtml","Boolean","alt","children","values","result","blankLine","effects","nok","markdownSpace","factorySpace","markdownLineEnding","partial","limit","POSITIVE_INFINITY","size","enter","prefix","consume","exit","unicodePunctuationInternal","regexCheck","asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","test","fromCharCode","splice","remove","items","parameters","chunkStart","unshift","classifyCharacter","combineExtensions","extensions","syntaxExtension","hook","left","right","constructs","existing","normalizeIdentifier","toUpperCase","resolveAll","events","context","called","resolve","includes","empty","Schema","normal","space","merge","definitions","assign","normalize","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","types","DefinedInfo","mask","super","mark","check","own","create","definition","properties","info","transform","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","checked","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","dir","dirName","disabled","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","loading","loop","low","manifest","maxLength","media","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","kebab","$0","camelcase","hastToReact","pointEnd","point","pointStart","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","ruleId","fatal","file","actual","expected","note","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsx","jsxs","fn","productionCreate","components","elementAttributeNameCase","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","countsByTagName","child","get","set","createChildren","alignValue","createProperty","has","createProperties","thing","Type","dashes","find","isNaN","padRight","padLeft","commas","styleObject","styleToObject","replacer","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","toDash","$1","urlAttributes","icon","subtokenize","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","startPosition","startPositions","tokenizer","parser","childEvents","gaps","previous","current","adjust","breaks","sliceStream","defineSkip","_gfmTasklistFirstContentOfListItem","write","contentStart","attempt","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","sliceSerialize","initial","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","charCodeAt","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","shift","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","decodeNamedCharacterReference","characterReference","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","search","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","defaultConstructs","atCarriageReturn","endPosition","TextDecoder","ceil","preprocess","combined","remarkParse","doc","globalThis","deserialize","serialized","deserializer","$","out","unpair","Date","BigInt","EMPTY","asString","shouldSkip","_ref","TYPE","serialize","json","lossy","serializer","strict","pair","valueOf","toJSON","entries","toISOString","structuredClone","any","normalizeUri","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","contents","listItemLoose","tab","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","body","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","visit","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","assert","remarkRehype","destination","hastTree","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","_len","_key","middlewareIndex","_len2","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","Promise","then","_len4","_key4","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","proc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","CallableInstance","proto","func","setPrototypeOf","names","getOwnPropertyNames","descriptor","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","colon","questionMark","numberSign","ccount","character","findAndReplace","ignored","convert","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","parents","grandparent","change","matchObject","input","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","tracker","createTracker","move","subexit","safe","associationId","indentLines","containerFlow","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","unsafe","checkQuote","quote","checkEmphasis","concat","expression","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","longestStreak","rank","literalWithBreak","EXIT","setext","formatHeadingAsSetext","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","fromCodePoint","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImpl","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","castFactory","tests","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","SKIP","reverse","factory","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse"],"sourceRoot":""}