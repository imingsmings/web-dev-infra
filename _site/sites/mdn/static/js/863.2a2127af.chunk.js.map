{"version":3,"file":"static/js/863.2a2127af.chunk.js","mappings":"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","sources":["settings/db.ts","settings/mdn-worker.tsx","settings/update.tsx","settings/clear.tsx","settings/offline-settings.tsx","../../node_modules/@use-it/interval/dist/index.js","../../node_modules/@use-it/interval/src/index.tsx"],"sourcesContent":["// WARNING - This file is duplicated at two locations:\n// - client/pwa/src/db.ts\n// - client/src/settings/db.ts\n// Until we find a solution, keep both files in sync.\n\nimport Dexie from \"dexie\";\n\nexport enum SwType {\n  PreferOnline = \"PreferOnline\",\n  PreferOffline = \"PreferOffline\",\n}\n\nexport interface PlusSettings {\n  col_in_search: boolean;\n}\n\nexport interface Whoami {\n  id?: number;\n  username: string;\n  is_authenticated: boolean;\n  email: string;\n  avatar_url: string;\n  is_subscriber: boolean;\n  settings: PlusSettings | null;\n}\n\nexport enum ContentStatusPhase {\n  INITIAL = \"initial\",\n  IDLE = \"idle\",\n  DOWNLOAD = \"download\",\n  UNPACK = \"unpack\",\n  CLEAR = \"clear\",\n}\n\nexport interface LocalContentStatus {\n  version: string;\n  date: string;\n}\n\nexport interface RemoteContentStatus {\n  date: string;\n  latest: string;\n  updates: [string];\n}\n\nexport interface ContentStatus {\n  id?: number;\n  phase: ContentStatusPhase;\n  local: LocalContentStatus | null;\n  remote: RemoteContentStatus | null;\n  progress: number | null;\n  timestamp: Date;\n}\n\nexport class MDNOfflineDB extends Dexie {\n  // Declare implicit table properties.\n  // (just to inform Typescript. Instantiated by Dexie in stores() method)\n  whoami!: Dexie.Table<Whoami, number>; // number = type of the primkey\n  contentStatusHistory!: Dexie.Table<ContentStatus, number>;\n\n  constructor() {\n    super(\"MDNOfflineDB\");\n    this.version(1).stores({\n      whoami:\n        \"++, username, is_authenticated, email, avatar_url, is_subscriber\",\n      collections: \"url, title, created\",\n      watched: \"url, title, path\",\n      notifications: \"id, title, text, url, created, read, starred\",\n    });\n    this.version(2).stores({\n      contentStatusHistory: \"++id\",\n    });\n    this.version(3).stores({\n      whoami:\n        \"++, username, is_authenticated, email, avatar_url, is_subscriber, settings\",\n    });\n    // We can drop the tables only after we stop using thing in the sw\n    /*\n    this.version(4).stores({\n      collections: null,\n      watched: null,\n      notifications: null,\n    });\n    */\n  }\n}\n\nexport const offlineDb = new MDNOfflineDB();\n\nexport async function getContentStatus(): Promise<ContentStatus> {\n  const current = await offlineDb.contentStatusHistory.toCollection().last();\n\n  return (\n    current || {\n      phase: ContentStatusPhase.INITIAL,\n      local: null,\n      remote: null,\n      progress: null,\n      timestamp: new Date(),\n    }\n  );\n}\n\nexport async function patchContentStatus(\n  changes: Omit<Partial<ContentStatus>, \"id\" | \"timestamp\">\n) {\n  const db = offlineDb;\n  const table = db.contentStatusHistory;\n\n  await db.transaction(\"rw\", table, async () => {\n    const oldStatus = await getContentStatus();\n    const newStatus = {\n      ...oldStatus,\n      ...changes,\n      id: undefined,\n      timestamp: new Date(),\n    };\n\n    if (oldStatus.phase === ContentStatusPhase.INITIAL && !changes.phase) {\n      newStatus.phase = ContentStatusPhase.IDLE;\n    }\n\n    if (oldStatus.id && oldStatus.phase === newStatus.phase) {\n      await table.update(oldStatus.id, newStatus);\n    } else {\n      await table.add(newStatus);\n      // Keep latest entries for debugging.\n      await table.reverse().offset(100).delete();\n    }\n  });\n}\n","import { OfflineSettingsData } from \"../user-context\";\nimport { getContentStatus, SwType, offlineDb } from \"./db\";\n\nexport class MDNWorker {\n  settings: OfflineSettingsData;\n  registered: boolean;\n  timeout?: ReturnType<typeof setTimeout> | null;\n  keepAlive: ReturnType<typeof setInterval> | null;\n\n  constructor() {\n    this.settings = this.offlineSettings();\n    this.registered = false;\n    this.timeout = null;\n    this.keepAlive = null;\n\n    if (this.settings.autoUpdates) {\n      this.autoUpdate();\n    }\n    if (this.settings.offline) {\n      this.enableServiceWorker(\n        this.settings.preferOnline ? SwType.PreferOnline : SwType.PreferOffline\n      );\n    } else {\n      this.disableServiceWorker();\n    }\n  }\n\n  autoUpdate() {\n    console.log(\"running auto update\");\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n    this.update();\n    this.timeout = setTimeout(() => this.autoUpdate(), 60 * 60 * 1000);\n  }\n\n  messageHandler(event) {\n    switch (event.data.type) {\n      case \"pong\":\n        console.log(\"pong\");\n        break;\n      default:\n        console.log(\"unknown message\");\n    }\n  }\n\n  controller(): ServiceWorker | null {\n    return navigator.serviceWorker.controller;\n  }\n\n  checkForUpdate(): void {\n    this.controller()?.postMessage({ type: \"checkForUpdate\" });\n  }\n\n  update() {\n    this.controller()?.postMessage({ type: \"update\" });\n  }\n\n  swName(type: SwType | null | undefined = null) {\n    return `/service-worker.js?type=${type ?? SwType.PreferOnline}`;\n  }\n\n  registerMessageHandler() {\n    navigator.serviceWorker.addEventListener(\"message\", (e) =>\n      this.messageHandler(e)\n    );\n  }\n\n  async enableServiceWorker(type: SwType) {\n    if (\"serviceWorker\" in navigator && !this.registered) {\n      await navigator.serviceWorker.register(this.swName(type), {\n        scope: \"/\",\n      });\n      this.registered = true;\n    }\n    this.registerMessageHandler();\n  }\n\n  cleanDb() {\n    offlineDb.delete();\n  }\n\n  async disableServiceWorker() {\n    if (\"serviceWorker\" in navigator) {\n      const registration = await navigator.serviceWorker.getRegistration();\n      await registration?.unregister();\n      this.registered = false;\n    }\n  }\n\n  toggleKeepAlive(keepAlive: boolean) {\n    if (this.keepAlive && !keepAlive) {\n      console.log(\"[worker] keepalive -> enabling\");\n      clearInterval(this.keepAlive);\n      this.keepAlive = null;\n    } else if (keepAlive && !this.keepAlive) {\n      console.log(\"[worker] keepalive -> disabling\");\n      this.keepAlive = setInterval(\n        () => this.controller()?.postMessage({ type: \"keepalive\" }),\n        10000\n      );\n    }\n  }\n\n  async status() {\n    return await getContentStatus();\n  }\n\n  offlineSettings(): OfflineSettingsData {\n    return OfflineSettingsData.read();\n  }\n\n  async setOfflineSettings(\n    settingsData: Partial<OfflineSettingsData>\n  ): Promise<OfflineSettingsData> {\n    const current = this.offlineSettings();\n\n    if (!current.offline && settingsData.offline) {\n      await this.disableServiceWorker();\n      await this.enableServiceWorker(\n        settingsData.preferOnline || current.preferOnline\n          ? SwType.PreferOnline\n          : SwType.PreferOffline\n      );\n    } else if (\n      \"preferOnline\" in settingsData &&\n      current.preferOnline !== settingsData.preferOnline\n    ) {\n      await this.disableServiceWorker();\n      await this.enableServiceWorker(\n        settingsData.preferOnline ? SwType.PreferOnline : SwType.PreferOffline\n      );\n    }\n    if (current.offline && settingsData.offline === false) {\n      await this.disableServiceWorker();\n    }\n\n    if (settingsData.autoUpdates === false && this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    } else if (\n      settingsData.autoUpdates === true &&\n      current.autoUpdates === false\n    ) {\n      this.autoUpdate();\n    }\n\n    this.settings = new OfflineSettingsData({ ...current, ...settingsData });\n    this.settings.write();\n    return this.settings;\n  }\n\n  async clearOfflineSettings() {\n    await this.setOfflineSettings(new OfflineSettingsData());\n  }\n\n  async clear() {\n    this.controller()?.postMessage({ type: \"clear\" });\n  }\n}\n\ndeclare global {\n  interface Window {\n    mdnWorker: MDNWorker;\n  }\n}\n\nexport function getMDNWorker(): MDNWorker {\n  if (!window.mdnWorker) {\n    window.mdnWorker = new MDNWorker();\n  }\n  return window.mdnWorker;\n}\n","import { ContentStatus, ContentStatusPhase } from \"./db\";\n\nexport default function UpdateButton({\n  updateStatus,\n  update,\n  disabled = false,\n}: {\n  updateStatus: ContentStatus | null;\n  update: () => void;\n  disabled?: boolean;\n}) {\n  const current =\n    updateStatus?.local?.date &&\n    `Last updated: ${Intl.DateTimeFormat([], { dateStyle: \"medium\" }).format(\n      Date.parse(updateStatus?.local?.date)\n    )}`;\n  let button: JSX.Element | null = null;\n  let info: string | undefined;\n\n  switch (updateStatus?.phase) {\n    case ContentStatusPhase.INITIAL:\n      info = \"Checking for updates\";\n      break;\n\n    case ContentStatusPhase.IDLE:\n      if (updateStatus?.local?.version === updateStatus?.remote?.latest) {\n        info = \"Your content is up to date\";\n        button = <button disabled>Up to date</button>;\n      } else {\n        if (updateStatus?.local) {\n          info = \"Update available\";\n          button = (\n            <button className=\"button\" onClick={update} disabled={disabled}>\n              {\" \"}\n              Update now\n            </button>\n          );\n        } else {\n          info =\n            \"Start using MDN Offline by downloading the latest version of MDN Web Docs\";\n          button = (\n            <button className=\"button\" onClick={update} disabled={disabled}>\n              {\" \"}\n              Download\n            </button>\n          );\n        }\n      }\n      break;\n\n    case ContentStatusPhase.DOWNLOAD:\n      if (updateStatus?.local) {\n        info = \"Update in progress…\";\n      } else {\n        info = \"Download in progress…\";\n      }\n      button = <button disabled={disabled}>Downloading…</button>;\n      break;\n\n    case ContentStatusPhase.UNPACK:\n      if (updateStatus?.local) {\n        info = \"Update in progress…\";\n      } else {\n        info = \"Download in progress…\";\n      }\n      const progress = (updateStatus?.progress || 0) * 100;\n      button = (\n        <button disabled={disabled}>\n          Unpacking…{\" \"}\n          {progress?.toLocaleString(undefined, {\n            maximumFractionDigits: 0,\n          })}\n          %\n        </button>\n      );\n      break;\n\n    case ContentStatusPhase.CLEAR:\n      info = \"Clearing…\";\n      break;\n  }\n\n  return (\n    <>\n      <h3>Update status</h3>\n      <span>\n        {current}\n        {current && <br />}\n        {info}\n      </span>\n      {button}\n    </>\n  );\n}\n","import { ContentStatus, ContentStatusPhase } from \"./db\";\n\nexport default function ClearButton({\n  updateStatus,\n  clear,\n  disabled = false,\n}: {\n  updateStatus: ContentStatus | null;\n  clear: () => void;\n  disabled?: boolean;\n}) {\n  let button;\n  if (updateStatus?.phase === ContentStatusPhase.IDLE && updateStatus?.local) {\n    button = (\n      <button className=\"button\" onClick={clear} disabled={disabled}>\n        Clear data\n      </button>\n    );\n  } else if (updateStatus?.phase === ContentStatusPhase.CLEAR) {\n    button = <button disabled>Clearing…</button>;\n  } else {\n    button = (\n      <button className=\"button\" disabled>\n        Clear data\n      </button>\n    );\n  }\n\n  return <>{button}</>;\n}\n","import { Switch } from \"../ui/atoms/switch\";\nimport { getMDNWorker } from \"./mdn-worker\";\nimport useInterval from \"@use-it/interval\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport UpdateButton from \"./update\";\nimport ClearButton from \"./clear\";\nimport { Spinner } from \"../ui/atoms/spinner\";\nimport { MDN_PLUS_TITLE } from \"../constants\";\nimport { ContentStatus, ContentStatusPhase } from \"./db\";\nimport { OfflineSettingsData, useUserData } from \"../user-context\";\nimport { useLocale } from \"../hooks\";\nimport {\n  TOGGLE_PLUS_OFFLINE_DISABLED,\n  TOGGLE_PLUS_OFFLINE_ENABLED,\n} from \"../telemetry/constants\";\nimport { useGleanClick } from \"../telemetry/glean-context\";\n\nfunction displayEstimate({ usage = 0, quota = Infinity }: StorageEstimate) {\n  const usageInMib = Math.round(usage / (1024 * 1024));\n\n  return `${usageInMib} MiB`;\n}\n\nexport default function OfflineSettings({ ...appProps }) {\n  const serviceWorkerAvailable = window?.navigator?.serviceWorker;\n  const user = useUserData();\n  const locale = useLocale();\n\n  return (\n    <section className=\"field-group\">\n      <h2>MDN Offline</h2>\n      {user?.isSubscriber ? (\n        serviceWorkerAvailable ? (\n          <Settings />\n        ) : (\n          <>\n            <h3>Offline mode is unavailable </h3>{\" \"}\n            <p>\n              Please make sure that you are not using a private or incognito\n              window.\n            </p>\n          </>\n        )\n      ) : (\n        <>\n          MDN Offline is only available to MDN Plus subscribers.{\" \"}\n          <a href={`/${locale}/plus#subscribe`}>Learn more</a> about our plans.\n        </>\n      )}\n    </section>\n  );\n}\n\nfunction Settings() {\n  document.title = `Settings | ${MDN_PLUS_TITLE}`;\n  const [status, setStatus] = useState<ContentStatus>();\n  const [saving, setSaving] = useState<boolean>(true);\n\n  const [estimate, setEstimate] = useState<StorageEstimate | null>(null);\n  const [settings, setSettings] = useState<OfflineSettingsData>();\n  // Workaround to avoid \"Error: Too many re-renders.\" (https://github.com/mdn/yari/pull/5744).\n  const updateTriggered = useRef(false);\n  const gleanClick = useGleanClick();\n\n  useEffect(() => {\n    const init = async () => {\n      const mdnWorker = getMDNWorker();\n      setSettings(await mdnWorker.offlineSettings());\n      setEstimate(await navigator?.storage?.estimate?.());\n      mdnWorker.checkForUpdate();\n    };\n    init().then(() => {});\n  }, []);\n  useEffect(() => {\n    const init = async () => {\n      setSaving(false);\n    };\n    init();\n  }, [settings]);\n\n  useEffect(() => {\n    const mdnWorker = getMDNWorker();\n    const isWorkerBusy = status?.phase\n      ? ![ContentStatusPhase.INITIAL, ContentStatusPhase.IDLE].includes(\n          status?.phase\n        )\n      : false;\n    mdnWorker.toggleKeepAlive(isWorkerBusy);\n\n    if (isWorkerBusy) {\n      // Warn when leaving page.\n      const listener = (e) => {\n        e.preventDefault();\n        e.returnValue = \"\";\n      };\n      window.addEventListener(\"beforeunload\", listener);\n\n      return () => window.removeEventListener(\"beforeunload\", listener);\n    }\n  }, [status?.phase]);\n\n  const updateSettings = async (change: Partial<OfflineSettingsData>) => {\n    setSaving(true);\n    const mdnWorker = getMDNWorker();\n    let newSettings = await mdnWorker.setOfflineSettings(change);\n    setSettings(newSettings);\n  };\n\n  useInterval(async () => {\n    const mdnWorker = getMDNWorker();\n    const next = await mdnWorker.status();\n    setStatus({ ...next });\n  }, 500);\n\n  const update = () => {\n    const mdnWorker = getMDNWorker();\n    mdnWorker.update();\n    setStatus(status);\n  };\n\n  const clear = async () => {\n    if (\n      window.confirm(\"All downloaded content will be removed from your device\")\n    ) {\n      const mdnWorker = getMDNWorker();\n      mdnWorker.clear();\n      setStatus(status);\n    }\n  };\n\n  if (\n    settings?.autoUpdates &&\n    status?.remote?.latest !== status?.local?.version &&\n    !updateTriggered.current\n  ) {\n    update();\n    updateTriggered.current = true;\n  }\n\n  const usage = estimate && displayEstimate(estimate);\n  return (\n    <ul>\n      <li>\n        <h3>Enable offline storage</h3>\n        <span>Allow MDN content to be downloaded for offline access</span>\n        {(saving === true && <Spinner extraClasses=\"loading\" />) || (\n          <Switch\n            name=\"offline\"\n            checked={settings?.offline || false}\n            toggle={(e) => {\n              const source = e.target.checked\n                ? TOGGLE_PLUS_OFFLINE_ENABLED\n                : TOGGLE_PLUS_OFFLINE_DISABLED;\n              gleanClick(source);\n              updateSettings({\n                offline: e.target.checked,\n              });\n            }}\n          ></Switch>\n        )}\n      </li>\n      {settings?.offline && (\n        <>\n          <li>\n            <h3>Prefer online content</h3>\n            <span>\n              Do not use offline content while connected to the internet\n            </span>\n            {(saving === true && <Spinner extraClasses=\"loading\" />) || (\n              <Switch\n                name=\"prefer-online\"\n                checked={settings?.preferOnline || false}\n                toggle={(e) =>\n                  updateSettings({\n                    preferOnline: e.target.checked,\n                  })\n                }\n              ></Switch>\n            )}\n          </li>\n          <li>\n            <UpdateButton\n              disabled={saving}\n              updateStatus={status || null}\n              update={update}\n            />\n          </li>\n          <li>\n            <h3>Enable auto-update</h3>\n            <span>\n              Automatically download updates to content enabled for download\n            </span>\n            {(saving === true && <Spinner extraClasses=\"loading\" />) || (\n              <Switch\n                name=\"auto-update\"\n                checked={settings?.autoUpdates || false}\n                toggle={(e) =>\n                  updateSettings({\n                    autoUpdates: e.target.checked,\n                  })\n                }\n              ></Switch>\n            )}\n          </li>\n          {window?.location.hash === \"#debug\" && (\n            <li>\n              <h3>Debug</h3>\n              <span style={{ fontFamily: \"monospace\", whiteSpace: \"pre\" }}>\n                {JSON.stringify(status, null, 2)}\n              </span>\n            </li>\n          )}\n          {usage && (\n            <li>\n              <h3>Storage used</h3>\n              <span>\n                MDN Offline currently uses <b>{usage}</b>\n              </span>\n            </li>\n          )}\n          <li>\n            <ClearButton\n              disabled={saving}\n              updateStatus={status || null}\n              clear={clear}\n            />\n          </li>\n        </>\n      )}\n    </ul>\n  );\n}\n","\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./interval.cjs.production.min.js')\n} else {\n  module.exports = require('./interval.cjs.development.js')\n}\n","import { useEffect, useRef } from 'react';\n\ntype Delay = number | null;\ntype TimerHandler = (...args: any[]) => void;\n\nconst useInterval = (callback: TimerHandler, delay: Delay) => {\n  const savedCallbackRef = useRef<TimerHandler>();\n\n  useEffect(() => {\n    savedCallbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const handler = (...args: any[]) => savedCallbackRef.current!(...args);\n\n    if (delay !== null) {\n      const intervalId = setInterval(handler, delay);\n      return () => clearInterval(intervalId);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n"],"names":["SwType","ContentStatusPhase","MDNOfflineDB","Dexie","constructor","super","this","version","stores","whoami","collections","watched","notifications","contentStatusHistory","offlineDb","async","getContentStatus","toCollection","last","phase","INITIAL","local","remote","progress","timestamp","Date","MDNWorker","settings","offlineSettings","registered","timeout","keepAlive","autoUpdates","autoUpdate","offline","enableServiceWorker","preferOnline","PreferOnline","PreferOffline","disableServiceWorker","console","log","clearTimeout","update","setTimeout","messageHandler","event","data","type","controller","navigator","serviceWorker","checkForUpdate","_this$controller","postMessage","_this$controller2","swName","arguments","length","undefined","concat","registerMessageHandler","addEventListener","e","register","scope","cleanDb","delete","registration","getRegistration","unregister","toggleKeepAlive","clearInterval","setInterval","_this$controller3","OfflineSettingsData","read","settingsData","current","write","setOfflineSettings","_this$controller4","getMDNWorker","window","mdnWorker","UpdateButton","_ref","_updateStatus$local","_updateStatus$local2","_updateStatus$local3","_updateStatus$remote","updateStatus","disabled","date","Intl","DateTimeFormat","dateStyle","format","parse","info","button","IDLE","latest","_jsx","children","_jsxs","className","onClick","DOWNLOAD","UNPACK","toLocaleString","maximumFractionDigits","CLEAR","_Fragment","ClearButton","clear","OfflineSettings","_ref2","_window","_window$navigator","appProps","serviceWorkerAvailable","user","useUserData","locale","useLocale","isSubscriber","Settings","href","_status$remote","_status$local","_window2","document","title","MDN_PLUS_TITLE","status","setStatus","useState","saving","setSaving","estimate","setEstimate","setSettings","updateTriggered","useRef","gleanClick","useGleanClick","useEffect","_navigator","_navigator$storage","_navigator$storage$es","storage","call","init","then","isWorkerBusy","includes","listener","preventDefault","returnValue","removeEventListener","updateSettings","newSettings","change","useInterval","next","usage","quota","Infinity","usageInMib","Math","round","displayEstimate","Spinner","extraClasses","Switch","name","checked","toggle","source","target","TOGGLE_PLUS_OFFLINE_ENABLED","TOGGLE_PLUS_OFFLINE_DISABLED","location","hash","style","fontFamily","whiteSpace","JSON","stringify","confirm","module","exports","r","t","n","apply"],"sourceRoot":""}